
task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038e3  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003375  00000000  00000000  00003c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b4  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  000071c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002748  00000000  00000000  00007200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000df  00000000  00000000  00009948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00009a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59
 20c:	0e 94 0c 01 	call	0x218	; 0x218 <main>
 210:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <main>:
*  the variable 'TransferError' is false and LEDs are lit up at the end of
*  the function, the bytes have been successfully sent and received by USARTx0.
*/

int main(void)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	c1 5e       	subi	r28, 0xE1	; 225
 222:	d1 40       	sbci	r29, 0x01	; 1
 224:	cd bf       	out	0x3d, r28	; 61
 226:	de bf       	out	0x3e, r29	; 62
	
	LEDPORT.DIR = 0xFF;
 228:	e0 ee       	ldi	r30, 0xE0	; 224
 22a:	f7 e0       	ldi	r31, 0x07	; 7
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	80 83       	st	Z, r24
	LEDPORT.OUT = 0xFF;
 230:	84 83       	std	Z+4, r24	; 0x04
	
	uint8_t i;

	volatile char Tx_Buf[TEST_CHARS];
	volatile char Rx_Buf[TEST_CHARS];
	volatile char RxTxData = 0;
 232:	cf 51       	subi	r28, 0x1F	; 31
 234:	de 4f       	sbci	r29, 0xFE	; 254
 236:	18 82       	st	Y, r1
 238:	c1 5e       	subi	r28, 0xE1	; 225
 23a:	d1 40       	sbci	r29, 0x01	; 1

	bool TransferError = false;

	/* Pin 3 (TX) as output */
	USART_PORT.DIRSET   = PIN3_bm;
 23c:	e0 e4       	ldi	r30, 0x40	; 64
 23e:	f6 e0       	ldi	r31, 0x06	; 6
 240:	88 e0       	ldi	r24, 0x08	; 8
 242:	81 83       	std	Z+1, r24	; 0x01
	/* Pin 2 (RX) as input */
	USART_PORT.DIRCLR   = PIN2_bm;
 244:	84 e0       	ldi	r24, 0x04	; 4
 246:	82 83       	std	Z+2, r24	; 0x02

	/* USARTx0, 8 Data bits, No Parity, 1 Stop bit */
	USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc
 248:	e0 ea       	ldi	r30, 0xA0	; 160
 24a:	f8 e0       	ldi	r31, 0x08	; 8
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	85 83       	std	Z+5, r24	; 0x05
	* Example (9600bps)  :   - I/O clock = 2MHz
	*                        - 9600bps can be achieved by 9600bps / 2^0
	*                        - UBRR = 2MHz/(16*9600)-1 = 12.02
	*                        - ScaleFactor = 0
	*/
	USART.BAUDCTRLA = BSEL_VALUE;
 250:	8c e0       	ldi	r24, 0x0C	; 12
 252:	86 83       	std	Z+6, r24	; 0x06

	/* Enable both RX and TX */
	USART.CTRLB |= USART_RXEN_bm;
 254:	84 81       	ldd	r24, Z+4	; 0x04
 256:	80 61       	ori	r24, 0x10	; 16
 258:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLB |= USART_TXEN_bm;
 25a:	84 81       	ldd	r24, Z+4	; 0x04
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	84 83       	std	Z+4, r24	; 0x04
 260:	6a e0       	ldi	r22, 0x0A	; 10
 262:	70 e0       	ldi	r23, 0x00	; 0

	volatile char Tx_Buf[TEST_CHARS];
	volatile char Rx_Buf[TEST_CHARS];
	volatile char RxTxData = 0;

	bool TransferError = false;
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	2a c0       	rjmp	.+84     	; 0x2bc <main+0xa4>
	{
		i = 0;
		while (i != TEST_CHARS){
			
			/* Wait for previous character to be sent */
			while ((USART.STATUS & USART_DREIF_bm) == 0){}
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	85 ff       	sbrs	r24, 5
 26c:	fd cf       	rjmp	.-6      	; 0x268 <main+0x50>
			/* Transmit current character */
			USART.DATA = RxTxData;
 26e:	cf 51       	subi	r28, 0x1F	; 31
 270:	de 4f       	sbci	r29, 0xFE	; 254
 272:	88 81       	ld	r24, Y
 274:	c1 5e       	subi	r28, 0xE1	; 225
 276:	d1 40       	sbci	r29, 0x01	; 1
 278:	80 83       	st	Z, r24
			
			/* Wait until data is received */
			while ((USART.STATUS & USART_RXCIF_bm) == 0){}
 27a:	81 81       	ldd	r24, Z+1	; 0x01
 27c:	88 23       	and	r24, r24
 27e:	ec f7       	brge	.-6      	; 0x27a <main+0x62>
			/* Read the received data */
			RxTxData = USART.DATA;
 280:	80 81       	ld	r24, Z
 282:	cf 51       	subi	r28, 0x1F	; 31
 284:	de 4f       	sbci	r29, 0xFE	; 254
 286:	88 83       	st	Y, r24
 288:	c1 5e       	subi	r28, 0xE1	; 225
 28a:	d1 40       	sbci	r29, 0x01	; 1

			/* Compare buffers */
			if (Rx_Buf[i] != Tx_Buf[i]){
 28c:	a1 ef       	ldi	r26, 0xF1	; 241
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	ac 0f       	add	r26, r28
 292:	bd 1f       	adc	r27, r29
 294:	a2 0f       	add	r26, r18
 296:	b3 1f       	adc	r27, r19
 298:	4c 91       	ld	r20, X
 29a:	a1 e0       	ldi	r26, 0x01	; 1
 29c:	b0 e0       	ldi	r27, 0x00	; 0
 29e:	ac 0f       	add	r26, r28
 2a0:	bd 1f       	adc	r27, r29
 2a2:	a2 0f       	add	r26, r18
 2a4:	b3 1f       	adc	r27, r19
 2a6:	8c 91       	ld	r24, X
 2a8:	48 13       	cpse	r20, r24
				TransferError = true;
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	3f 4f       	sbci	r19, 0xFF	; 255
	USART.CTRLB |= USART_RXEN_bm;
	USART.CTRLB |= USART_TXEN_bm;
	for( int x=0; x < 10; x++)
	{
		i = 0;
		while (i != TEST_CHARS){
 2b0:	20 3f       	cpi	r18, 0xF0	; 240
 2b2:	31 05       	cpc	r19, r1
 2b4:	c9 f6       	brne	.-78     	; 0x268 <main+0x50>
 2b6:	61 50       	subi	r22, 0x01	; 1
 2b8:	71 09       	sbc	r23, r1
	USART.BAUDCTRLA = BSEL_VALUE;

	/* Enable both RX and TX */
	USART.CTRLB |= USART_RXEN_bm;
	USART.CTRLB |= USART_TXEN_bm;
	for( int x=0; x < 10; x++)
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <main+0xaa>
*  the variable 'TransferError' is false and LEDs are lit up at the end of
*  the function, the bytes have been successfully sent and received by USARTx0.
*/

int main(void)
{
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	d3 cf       	rjmp	.-90     	; 0x268 <main+0x50>
	
	while (1){
		/* Check for transfer error */
		if (TransferError){
			/* No light */
			LEDPORT.OUT = 0xFF;
 2c2:	e0 ee       	ldi	r30, 0xE0	; 224
 2c4:	f7 e0       	ldi	r31, 0x07	; 7
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
		}
	} //smy for
	
	while (1){
		/* Check for transfer error */
		if (TransferError){
 2c8:	99 23       	and	r25, r25
 2ca:	11 f0       	breq	.+4      	; 0x2d0 <main+0xb8>
			/* No light */
			LEDPORT.OUT = 0xFF;
 2cc:	84 83       	std	Z+4, r24	; 0x04
 2ce:	fc cf       	rjmp	.-8      	; 0x2c8 <main+0xb0>
			} else {
			/* Light */
			LEDPORT.OUT = 0x00;
 2d0:	14 82       	std	Z+4, r1	; 0x04
 2d2:	fa cf       	rjmp	.-12     	; 0x2c8 <main+0xb0>

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
