
task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  000004e8  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00802004  00802004  00000580  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000411b  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003613  00000000  00000000  000047a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051a  00000000  00000000  00007db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000082d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a32  00000000  00000000  00008468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005cb  00000000  00000000  0000ae9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000b465  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  68:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  8c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  90:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  94:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  98:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  9c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  fc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 100:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 104:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 108:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 10c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 110:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 114:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 118:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 11c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 120:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 124:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 128:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 12c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 130:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 134:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 138:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 13c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 140:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 144:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 148:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 14c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 150:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 154:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 158:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 15c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 160:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 164:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 168:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 16c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 170:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 174:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 178:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 17c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 180:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 184:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 188:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 18c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 190:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 194:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 198:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 19c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1dc:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_119>
 1e0:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_120>
 1e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e8 ee       	ldi	r30, 0xE8	; 232
 214:	f4 e0       	ldi	r31, 0x04	; 4
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a4 30       	cpi	r26, 0x04	; 4
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	20 e2       	ldi	r18, 0x20	; 32
 22a:	a4 e0       	ldi	r26, 0x04	; 4
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a7 31       	cpi	r26, 0x17	; 23
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	0e 94 94 01 	call	0x328	; 0x328 <main>
 23c:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <_exit>

00000240 <__bad_interrupt>:
 240:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000244 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 244:	fc 01       	movw	r30, r24
 246:	60 83       	st	Z, r22
 248:	71 83       	std	Z+1, r23	; 0x01
 24a:	42 83       	std	Z+2, r20	; 0x02
 24c:	14 86       	std	Z+12, r1	; 0x0c
 24e:	13 86       	std	Z+11, r1	; 0x0b
 250:	16 86       	std	Z+14, r1	; 0x0e
 252:	15 86       	std	Z+13, r1	; 0x0d
 254:	08 95       	ret

00000256 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 256:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 258:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 25a:	26 85       	ldd	r18, Z+14	; 0x0e

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 25c:	9f 5f       	subi	r25, 0xFF	; 255
 25e:	93 70       	andi	r25, 0x03	; 3
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	92 13       	cpse	r25, r18
 264:	01 c0       	rjmp	.+2      	; 0x268 <USART_TXBuffer_FreeSpace+0x12>
 266:	80 e0       	ldi	r24, 0x00	; 0
}
 268:	08 95       	ret

0000026a <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 274:	0e 94 2b 01 	call	0x256	; 0x256 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 278:	88 23       	and	r24, r24
 27a:	79 f0       	breq	.+30     	; 0x29a <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 27c:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 27e:	fe 01       	movw	r30, r28
 280:	e9 0f       	add	r30, r25
 282:	f1 1d       	adc	r31, r1
 284:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 286:	9f 5f       	subi	r25, 0xFF	; 255
 288:	93 70       	andi	r25, 0x03	; 3
 28a:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 28c:	e8 81       	ld	r30, Y
 28e:	f9 81       	ldd	r31, Y+1	; 0x01
 290:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 292:	9c 7f       	andi	r25, 0xFC	; 252
 294:	2a 81       	ldd	r18, Y+2	; 0x02
 296:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 298:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	08 95       	ret

000002a2 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 2a2:	fc 01       	movw	r30, r24
 2a4:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 2a6:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	29 13       	cpse	r18, r25
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <USART_RXBufferData_Available+0xe>
 2ae:	80 e0       	ldi	r24, 0x00	; 0
}
 2b0:	08 95       	ret

000002b2 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 2b2:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 2b4:	84 85       	ldd	r24, Z+12	; 0x0c
 2b6:	df 01       	movw	r26, r30
 2b8:	a8 0f       	add	r26, r24
 2ba:	b1 1d       	adc	r27, r1
 2bc:	13 96       	adiw	r26, 0x03	; 3
 2be:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 2c0:	94 85       	ldd	r25, Z+12	; 0x0c
 2c2:	9f 5f       	subi	r25, 0xFF	; 255
 2c4:	93 70       	andi	r25, 0x03	; 3
 2c6:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 2c8:	08 95       	ret

000002ca <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 2ca:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 2cc:	93 85       	ldd	r25, Z+11	; 0x0b
 2ce:	9f 5f       	subi	r25, 0xFF	; 255
 2d0:	93 70       	andi	r25, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 2d2:	84 85       	ldd	r24, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 2d4:	a0 81       	ld	r26, Z
 2d6:	b1 81       	ldd	r27, Z+1	; 0x01
 2d8:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
 2da:	98 17       	cp	r25, r24
 2dc:	49 f0       	breq	.+18     	; 0x2f0 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 2de:	83 85       	ldd	r24, Z+11	; 0x0b
 2e0:	df 01       	movw	r26, r30
 2e2:	a8 0f       	add	r26, r24
 2e4:	b1 1d       	adc	r27, r1
 2e6:	13 96       	adiw	r26, 0x03	; 3
 2e8:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
 2ea:	93 87       	std	Z+11, r25	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 2f2:	08 95       	ret

000002f4 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 2f4:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 2f6:	96 85       	ldd	r25, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 2f8:	85 85       	ldd	r24, Z+13	; 0x0d
 2fa:	98 13       	cpse	r25, r24
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 2fe:	01 90       	ld	r0, Z+
 300:	f0 81       	ld	r31, Z
 302:	e0 2d       	mov	r30, r0
 304:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 306:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 308:	83 83       	std	Z+3, r24	; 0x03
 30a:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 30c:	86 85       	ldd	r24, Z+14	; 0x0e
 30e:	df 01       	movw	r26, r30
 310:	a8 0f       	add	r26, r24
 312:	b1 1d       	adc	r27, r1
 314:	17 96       	adiw	r26, 0x07	; 7
 316:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
 318:	a0 81       	ld	r26, Z
 31a:	b1 81       	ldd	r27, Z+1	; 0x01
 31c:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 31e:	86 85       	ldd	r24, Z+14	; 0x0e
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	83 70       	andi	r24, 0x03	; 3
 324:	86 87       	std	Z+14, r24	; 0x0e
 326:	08 95       	ret

00000328 <main>:
{
	/* Counter variable */
	uint8_t i;

	/* LEDs as output */
	LEDPORT.DIR = 0xFF;
 328:	e0 e8       	ldi	r30, 0x80	; 128
 32a:	f6 e0       	ldi	r31, 0x06	; 6
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	80 83       	st	Z, r24
	LEDPORT.OUT = 0xFF;
 330:	84 83       	std	Z+4, r24	; 0x04

	/* (TX) as output */
	USART_PORT.DIRSET = PIN3_bm;
 332:	e0 ea       	ldi	r30, 0xA0	; 160
 334:	f6 e0       	ldi	r31, 0x06	; 6
 336:	88 e0       	ldi	r24, 0x08	; 8
 338:	81 83       	std	Z+1, r24	; 0x01
	/* (RX) as input */
	USART_PORT.DIRCLR = PIN2_bm;
 33a:	84 e0       	ldi	r24, 0x04	; 4
 33c:	82 83       	std	Z+2, r24	; 0x02
    
	/* Use USARTx0 and initialize buffers */
	USART_InterruptDriver_Initialize(&USART_data, 
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	60 ea       	ldi	r22, 0xA0	; 160
 342:	7b e0       	ldi	r23, 0x0B	; 11
 344:	88 e0       	ldi	r24, 0x08	; 8
 346:	90 e2       	ldi	r25, 0x20	; 32
 348:	0e 94 22 01 	call	0x244	; 0x244 <USART_InterruptDriver_Initialize>
		&USART, 
		USART_DREINTLVL_LO_gc);
    
	/* USARTx0, 8 Data bits, No Parity, 1 Stop bit */
	USART_Format_Set(USART_data.usart, 
 34c:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <USART_data>
 350:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <USART_data+0x1>
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	85 83       	std	Z+5, r24	; 0x05
		USART_CHSIZE_8BIT_gc,
		USART_PMODE_DISABLED_gc, 
		false);
    
	/* Enable RXC interrupt */
	USART_RxdInterruptLevel_Set(USART_data.usart, USART_RXCINTLVL_LO_gc);
 358:	83 81       	ldd	r24, Z+3	; 0x03
 35a:	8f 7c       	andi	r24, 0xCF	; 207
 35c:	80 61       	ori	r24, 0x10	; 16
 35e:	83 83       	std	Z+3, r24	; 0x03
	 *
	 * Baud rate select	= (1 / (16 * (((I/O clock frequency) / Baudrate) - 1)
	 *					= 12
	 */

	USART_Baudrate_Set(&USART, 12 , 0);
 360:	a0 ea       	ldi	r26, 0xA0	; 160
 362:	bb e0       	ldi	r27, 0x0B	; 11
 364:	8c e0       	ldi	r24, 0x0C	; 12
 366:	16 96       	adiw	r26, 0x06	; 6
 368:	8c 93       	st	X, r24
 36a:	16 97       	sbiw	r26, 0x06	; 6
 36c:	17 96       	adiw	r26, 0x07	; 7
 36e:	1c 92       	st	X, r1

	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data.usart);
 370:	84 81       	ldd	r24, Z+4	; 0x04
 372:	80 61       	ori	r24, 0x10	; 16
 374:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_data.usart);
 376:	84 81       	ldd	r24, Z+4	; 0x04
 378:	88 60       	ori	r24, 0x08	; 8
 37a:	84 83       	std	Z+4, r24	; 0x04

	/* Enable PMIC interrupt level low */
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
 37c:	e0 ea       	ldi	r30, 0xA0	; 160
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	82 81       	ldd	r24, Z+2	; 0x02
 382:	81 60       	ori	r24, 0x01	; 1
 384:	82 83       	std	Z+2, r24	; 0x02

	/* Enable global interrupts */
	sei();
 386:	78 94       	sei

	/* Send array */
	i = 0;
 388:	c0 e0       	ldi	r28, 0x00	; 0
	while (i < NUM_BYTES){
		bool byteToBuffer;
		
		byteToBuffer = USART_TXBuffer_PutByte(&USART_data, sendArray[i]);		
 38a:	ec 2f       	mov	r30, r28
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	e0 50       	subi	r30, 0x00	; 0
 390:	f0 4e       	sbci	r31, 0xE0	; 224
 392:	60 81       	ld	r22, Z
 394:	88 e0       	ldi	r24, 0x08	; 8
 396:	90 e2       	ldi	r25, 0x20	; 32
 398:	0e 94 35 01 	call	0x26a	; 0x26a <USART_TXBuffer_PutByte>
		if (byteToBuffer){
 39c:	81 11       	cpse	r24, r1
			i++;
 39e:	cf 5f       	subi	r28, 0xFF	; 255
	/* Enable global interrupts */
	sei();

	/* Send array */
	i = 0;
	while (i < NUM_BYTES){
 3a0:	c3 30       	cpi	r28, 0x03	; 3
 3a2:	98 f3       	brcs	.-26     	; 0x38a <main+0x62>
 3a4:	c0 e0       	ldi	r28, 0x00	; 0
 3a6:	d0 e0       	ldi	r29, 0x00	; 0
	}

	/* Fetch received data as it is received */
	i = 0;
	while (i < NUM_BYTES){
		if (USART_RXBufferData_Available(&USART_data)){
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	90 e2       	ldi	r25, 0x20	; 32
 3ac:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART_RXBufferData_Available>
 3b0:	88 23       	and	r24, r24
 3b2:	69 f0       	breq	.+26     	; 0x3ce <main+0xa6>
			receiveArray[i] = USART_RXBuffer_GetByte(&USART_data);
 3b4:	88 e0       	ldi	r24, 0x08	; 8
 3b6:	90 e2       	ldi	r25, 0x20	; 32
 3b8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <USART_RXBuffer_GetByte>
 3bc:	fe 01       	movw	r30, r28
 3be:	eb 5f       	subi	r30, 0xFB	; 251
 3c0:	ff 4d       	sbci	r31, 0xDF	; 223
 3c2:	80 83       	st	Z, r24
 3c4:	21 96       	adiw	r28, 0x01	; 1
		}
	}

	/* Fetch received data as it is received */
	i = 0;
	while (i < NUM_BYTES){
 3c6:	c3 30       	cpi	r28, 0x03	; 3
 3c8:	d1 05       	cpc	r29, r1
 3ca:	19 f0       	breq	.+6      	; 0x3d2 <main+0xaa>
 3cc:	ed cf       	rjmp	.-38     	; 0x3a8 <main+0x80>
 3ce:	c3 30       	cpi	r28, 0x03	; 3
 3d0:	58 f3       	brcs	.-42     	; 0x3a8 <main+0x80>
		}
	}

	/* Test to see if sent data equals received data */
	/* Assume no Errors first */
	TransferError = false;
 3d2:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <__data_end>
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i < NUM_BYTES; i++){
		/* Check that each element is received correctly */
		if (receiveArray[i] != sendArray[i]){
			TransferError = true;
 3da:	21 e0       	ldi	r18, 0x01	; 1
	/* Test to see if sent data equals received data */
	/* Assume no Errors first */
	TransferError = false;
	for (i = 0; i < NUM_BYTES; i++){
		/* Check that each element is received correctly */
		if (receiveArray[i] != sendArray[i]){
 3dc:	fc 01       	movw	r30, r24
 3de:	eb 5f       	subi	r30, 0xFB	; 251
 3e0:	ff 4d       	sbci	r31, 0xDF	; 223
 3e2:	40 81       	ld	r20, Z
 3e4:	fc 01       	movw	r30, r24
 3e6:	e0 50       	subi	r30, 0x00	; 0
 3e8:	f0 4e       	sbci	r31, 0xE0	; 224
 3ea:	30 81       	ld	r19, Z
 3ec:	43 13       	cpse	r20, r19
			TransferError = true;
 3ee:	20 93 04 20 	sts	0x2004, r18	; 0x802004 <__data_end>
 3f2:	01 96       	adiw	r24, 0x01	; 1
	}

	/* Test to see if sent data equals received data */
	/* Assume no Errors first */
	TransferError = false;
	for (i = 0; i < NUM_BYTES; i++){
 3f4:	83 30       	cpi	r24, 0x03	; 3
 3f6:	91 05       	cpc	r25, r1
 3f8:	89 f7       	brne	.-30     	; 0x3dc <main+0xb4>
		if (TransferError){
			/* No light */
			LEDPORT.OUT = 0xFF;
		} else {  
			/* Light */    
			LEDPORT.OUT = 0x00;
 3fa:	e0 e8       	ldi	r30, 0x80	; 128
 3fc:	f6 e0       	ldi	r31, 0x06	; 6

	/* Show status of the transfer */
	while (1){
		if (TransferError){
			/* No light */
			LEDPORT.OUT = 0xFF;
 3fe:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}

	/* Show status of the transfer */
	while (1){
		if (TransferError){
 400:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 404:	88 23       	and	r24, r24
 406:	11 f0       	breq	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			/* No light */
			LEDPORT.OUT = 0xFF;
 408:	94 83       	std	Z+4, r25	; 0x04
 40a:	fa cf       	rjmp	.-12     	; 0x400 <__LOCK_REGION_LENGTH__>
		} else {  
			/* Light */    
			LEDPORT.OUT = 0x00;
 40c:	14 82       	std	Z+4, r1	; 0x04
 40e:	f8 cf       	rjmp	.-16     	; 0x400 <__LOCK_REGION_LENGTH__>

00000410 <__vector_119>:
 *
 *  Note that the vector name is a hash define mapped to the correct interrupt
 *  vector. See "board.h".
 */
ISR(USART_RXC_vect)
{                     
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	08 b6       	in	r0, 0x38	; 56
 41c:	0f 92       	push	r0
 41e:	18 be       	out	0x38, r1	; 56
 420:	09 b6       	in	r0, 0x39	; 57
 422:	0f 92       	push	r0
 424:	19 be       	out	0x39, r1	; 57
 426:	0b b6       	in	r0, 0x3b	; 59
 428:	0f 92       	push	r0
 42a:	1b be       	out	0x3b, r1	; 59
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
    USART_RXComplete(&USART_data);
 444:	88 e0       	ldi	r24, 0x08	; 8
 446:	90 e2       	ldi	r25, 0x20	; 32
 448:	0e 94 65 01 	call	0x2ca	; 0x2ca <USART_RXComplete>
}
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0b be       	out	0x3b, r0	; 59
 468:	0f 90       	pop	r0
 46a:	09 be       	out	0x39, r0	; 57
 46c:	0f 90       	pop	r0
 46e:	08 be       	out	0x38, r0	; 56
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <__vector_120>:
 *
 *  Note that the vector name is a hash define mapped to the correct interrupt
 *  vector. See "board.h".
 */
ISR(USART_DRE_vect) 
{
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	08 b6       	in	r0, 0x38	; 56
 486:	0f 92       	push	r0
 488:	18 be       	out	0x38, r1	; 56
 48a:	09 b6       	in	r0, 0x39	; 57
 48c:	0f 92       	push	r0
 48e:	19 be       	out	0x39, r1	; 57
 490:	0b b6       	in	r0, 0x3b	; 59
 492:	0f 92       	push	r0
 494:	1b be       	out	0x3b, r1	; 59
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	4f 93       	push	r20
 49c:	5f 93       	push	r21
 49e:	6f 93       	push	r22
 4a0:	7f 93       	push	r23
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
    USART_DataRegEmpty(&USART_data);
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	90 e2       	ldi	r25, 0x20	; 32
 4b2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART_DataRegEmpty>
}
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0b be       	out	0x3b, r0	; 59
 4d2:	0f 90       	pop	r0
 4d4:	09 be       	out	0x39, r0	; 57
 4d6:	0f 90       	pop	r0
 4d8:	08 be       	out	0x38, r0	; 56
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <_exit>:
 4e4:	f8 94       	cli

000004e6 <__stop_program>:
 4e6:	ff cf       	rjmp	.-2      	; 0x4e6 <__stop_program>
