
Temp_Sensor_Using_ADC_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00802000  00002cb8  00002d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000216  00802038  00802038  00002d84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002de0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00002e28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000124c6  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005b36  00000000  00000000  0001580e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a6a0  00000000  00000000  0001b344  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011dc  00000000  00000000  000259e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033feb  00000000  00000000  00026bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000080c5  00000000  00000000  0005abab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  00062c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd3a  00000000  00000000  00063238  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4e c2       	rjmp	.+1180   	; 0x49e <__ctors_end>
       2:	00 00       	nop
       4:	6d c2       	rjmp	.+1242   	; 0x4e0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c2       	rjmp	.+1238   	; 0x4e0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c2       	rjmp	.+1234   	; 0x4e0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c2       	rjmp	.+1230   	; 0x4e0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c2       	rjmp	.+1226   	; 0x4e0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c2       	rjmp	.+1222   	; 0x4e0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c2       	rjmp	.+1218   	; 0x4e0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c2       	rjmp	.+1214   	; 0x4e0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c2       	rjmp	.+1210   	; 0x4e0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c2       	rjmp	.+1206   	; 0x4e0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c2       	rjmp	.+1202   	; 0x4e0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c2       	rjmp	.+1198   	; 0x4e0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c2       	rjmp	.+1194   	; 0x4e0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c2       	rjmp	.+1190   	; 0x4e0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c2       	rjmp	.+1186   	; 0x4e0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c2       	rjmp	.+1182   	; 0x4e0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c2       	rjmp	.+1178   	; 0x4e0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c2       	rjmp	.+1174   	; 0x4e0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c2       	rjmp	.+1170   	; 0x4e0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c2       	rjmp	.+1166   	; 0x4e0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c2       	rjmp	.+1162   	; 0x4e0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c2       	rjmp	.+1158   	; 0x4e0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c2       	rjmp	.+1154   	; 0x4e0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c2       	rjmp	.+1150   	; 0x4e0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c2       	rjmp	.+1146   	; 0x4e0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c2       	rjmp	.+1142   	; 0x4e0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c2       	rjmp	.+1138   	; 0x4e0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c2       	rjmp	.+1134   	; 0x4e0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c2       	rjmp	.+1130   	; 0x4e0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c2       	rjmp	.+1126   	; 0x4e0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c2       	rjmp	.+1122   	; 0x4e0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c2       	rjmp	.+1118   	; 0x4e0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c2       	rjmp	.+1114   	; 0x4e0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c2       	rjmp	.+1110   	; 0x4e0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c2       	rjmp	.+1106   	; 0x4e0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c2       	rjmp	.+1102   	; 0x4e0 <__bad_interrupt>
      92:	00 00       	nop
      94:	25 c2       	rjmp	.+1098   	; 0x4e0 <__bad_interrupt>
      96:	00 00       	nop
      98:	23 c2       	rjmp	.+1094   	; 0x4e0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__vector_39>
      a0:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__vector_40>
      a4:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__vector_41>
      a8:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__vector_42>
      ac:	19 c2       	rjmp	.+1074   	; 0x4e0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	17 c2       	rjmp	.+1070   	; 0x4e0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	15 c2       	rjmp	.+1066   	; 0x4e0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	13 c2       	rjmp	.+1062   	; 0x4e0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	11 c2       	rjmp	.+1058   	; 0x4e0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0f c2       	rjmp	.+1054   	; 0x4e0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0d c2       	rjmp	.+1050   	; 0x4e0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0b c2       	rjmp	.+1046   	; 0x4e0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	09 c2       	rjmp	.+1042   	; 0x4e0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	07 c2       	rjmp	.+1038   	; 0x4e0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	05 c2       	rjmp	.+1034   	; 0x4e0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	03 c2       	rjmp	.+1030   	; 0x4e0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	01 c2       	rjmp	.+1026   	; 0x4e0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ff c1       	rjmp	.+1022   	; 0x4e0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fd c1       	rjmp	.+1018   	; 0x4e0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fb c1       	rjmp	.+1014   	; 0x4e0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f9 c1       	rjmp	.+1010   	; 0x4e0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f7 c1       	rjmp	.+1006   	; 0x4e0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f5 c1       	rjmp	.+1002   	; 0x4e0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f3 c1       	rjmp	.+998    	; 0x4e0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f1 c1       	rjmp	.+994    	; 0x4e0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ef c1       	rjmp	.+990    	; 0x4e0 <__bad_interrupt>
     102:	00 00       	nop
     104:	ed c1       	rjmp	.+986    	; 0x4e0 <__bad_interrupt>
     106:	00 00       	nop
     108:	eb c1       	rjmp	.+982    	; 0x4e0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e9 c1       	rjmp	.+978    	; 0x4e0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e7 c1       	rjmp	.+974    	; 0x4e0 <__bad_interrupt>
     112:	00 00       	nop
     114:	e5 c1       	rjmp	.+970    	; 0x4e0 <__bad_interrupt>
     116:	00 00       	nop
     118:	e3 c1       	rjmp	.+966    	; 0x4e0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__vector_71>
     120:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__vector_72>
     124:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__vector_73>
     128:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__vector_74>
     12c:	d9 c1       	rjmp	.+946    	; 0x4e0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d7 c1       	rjmp	.+942    	; 0x4e0 <__bad_interrupt>
     132:	00 00       	nop
     134:	d5 c1       	rjmp	.+938    	; 0x4e0 <__bad_interrupt>
     136:	00 00       	nop
     138:	d3 c1       	rjmp	.+934    	; 0x4e0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d1 c1       	rjmp	.+930    	; 0x4e0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	cf c1       	rjmp	.+926    	; 0x4e0 <__bad_interrupt>
     142:	00 00       	nop
     144:	cd c1       	rjmp	.+922    	; 0x4e0 <__bad_interrupt>
     146:	00 00       	nop
     148:	cb c1       	rjmp	.+918    	; 0x4e0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c9 c1       	rjmp	.+914    	; 0x4e0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c7 c1       	rjmp	.+910    	; 0x4e0 <__bad_interrupt>
     152:	00 00       	nop
     154:	c5 c1       	rjmp	.+906    	; 0x4e0 <__bad_interrupt>
     156:	00 00       	nop
     158:	c3 c1       	rjmp	.+902    	; 0x4e0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c1 c1       	rjmp	.+898    	; 0x4e0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	bf c1       	rjmp	.+894    	; 0x4e0 <__bad_interrupt>
     162:	00 00       	nop
     164:	bd c1       	rjmp	.+890    	; 0x4e0 <__bad_interrupt>
     166:	00 00       	nop
     168:	bb c1       	rjmp	.+886    	; 0x4e0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b9 c1       	rjmp	.+882    	; 0x4e0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b7 c1       	rjmp	.+878    	; 0x4e0 <__bad_interrupt>
     172:	00 00       	nop
     174:	b5 c1       	rjmp	.+874    	; 0x4e0 <__bad_interrupt>
     176:	00 00       	nop
     178:	b3 c1       	rjmp	.+870    	; 0x4e0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b1 c1       	rjmp	.+866    	; 0x4e0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	af c1       	rjmp	.+862    	; 0x4e0 <__bad_interrupt>
     182:	00 00       	nop
     184:	ad c1       	rjmp	.+858    	; 0x4e0 <__bad_interrupt>
     186:	00 00       	nop
     188:	ab c1       	rjmp	.+854    	; 0x4e0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a9 c1       	rjmp	.+850    	; 0x4e0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a7 c1       	rjmp	.+846    	; 0x4e0 <__bad_interrupt>
     192:	00 00       	nop
     194:	a5 c1       	rjmp	.+842    	; 0x4e0 <__bad_interrupt>
     196:	00 00       	nop
     198:	a3 c1       	rjmp	.+838    	; 0x4e0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a1 c1       	rjmp	.+834    	; 0x4e0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9f c1       	rjmp	.+830    	; 0x4e0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9d c1       	rjmp	.+826    	; 0x4e0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9b c1       	rjmp	.+822    	; 0x4e0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	99 c1       	rjmp	.+818    	; 0x4e0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	97 c1       	rjmp	.+814    	; 0x4e0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	95 c1       	rjmp	.+810    	; 0x4e0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	93 c1       	rjmp	.+806    	; 0x4e0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	91 c1       	rjmp	.+802    	; 0x4e0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8f c1       	rjmp	.+798    	; 0x4e0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8d c1       	rjmp	.+794    	; 0x4e0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8b c1       	rjmp	.+790    	; 0x4e0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	89 c1       	rjmp	.+786    	; 0x4e0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	87 c1       	rjmp	.+782    	; 0x4e0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	85 c1       	rjmp	.+778    	; 0x4e0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	83 c1       	rjmp	.+774    	; 0x4e0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	81 c1       	rjmp	.+770    	; 0x4e0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7f c1       	rjmp	.+766    	; 0x4e0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7d c1       	rjmp	.+762    	; 0x4e0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7b c1       	rjmp	.+758    	; 0x4e0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	79 c1       	rjmp	.+754    	; 0x4e0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	77 c1       	rjmp	.+750    	; 0x4e0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	75 c1       	rjmp	.+746    	; 0x4e0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	73 c1       	rjmp	.+742    	; 0x4e0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1e52>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x663a>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6612>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x563a>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1e12>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <header>:
     48e:	54 65 6d 70 65 72 61 74 75 72 65 28 46 29 00 00     Temperature(F)..

0000049e <__ctors_end>:
     49e:	11 24       	eor	r1, r1
     4a0:	1f be       	out	0x3f, r1	; 63
     4a2:	cf ef       	ldi	r28, 0xFF	; 255
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df e5       	ldi	r29, 0x5F	; 95
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	00 e0       	ldi	r16, 0x00	; 0
     4ac:	0c bf       	out	0x3c, r16	; 60

000004ae <__do_copy_data>:
     4ae:	10 e2       	ldi	r17, 0x20	; 32
     4b0:	a0 e0       	ldi	r26, 0x00	; 0
     4b2:	b0 e2       	ldi	r27, 0x20	; 32
     4b4:	e8 eb       	ldi	r30, 0xB8	; 184
     4b6:	fc e2       	ldi	r31, 0x2C	; 44
     4b8:	00 e0       	ldi	r16, 0x00	; 0
     4ba:	0b bf       	out	0x3b, r16	; 59
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__do_copy_data+0x14>
     4be:	07 90       	elpm	r0, Z+
     4c0:	0d 92       	st	X+, r0
     4c2:	a8 33       	cpi	r26, 0x38	; 56
     4c4:	b1 07       	cpc	r27, r17
     4c6:	d9 f7       	brne	.-10     	; 0x4be <__do_copy_data+0x10>

000004c8 <__do_clear_bss>:
     4c8:	22 e2       	ldi	r18, 0x22	; 34
     4ca:	a8 e3       	ldi	r26, 0x38	; 56
     4cc:	b0 e2       	ldi	r27, 0x20	; 32
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <.do_clear_bss_start>

000004d0 <.do_clear_bss_loop>:
     4d0:	1d 92       	st	X+, r1

000004d2 <.do_clear_bss_start>:
     4d2:	ae 34       	cpi	r26, 0x4E	; 78
     4d4:	b2 07       	cpc	r27, r18
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <.do_clear_bss_loop>
     4d8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <main>
     4dc:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <_exit>

000004e0 <__bad_interrupt>:
     4e0:	8f cd       	rjmp	.-1250   	; 0x0 <__vectors>

000004e2 <adc_handler>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t ntc_get_raw_value(void)
{
	return ntc_sensor_sample;
}
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	1f 92       	push	r1
     4e8:	1f 92       	push	r1
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	61 30       	cpi	r22, 0x01	; 1
     4f0:	69 f5       	brne	.+90     	; 0x54c <adc_handler+0x6a>
     4f2:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <light_sensor_samples.5066>
     4f6:	8f 5f       	subi	r24, 0xFF	; 255
     4f8:	80 93 39 20 	sts	0x2039, r24	; 0x802039 <light_sensor_samples.5066>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	39 f4       	brne	.+14     	; 0x50e <adc_handler+0x2c>
     500:	40 93 3a 20 	sts	0x203A, r20	; 0x80203a <light_sensor_sample>
     504:	50 93 3b 20 	sts	0x203B, r21	; 0x80203b <light_sensor_sample+0x1>
     508:	10 92 3e 20 	sts	0x203E, r1	; 0x80203e <light_sensor_data_ready>
     50c:	14 c0       	rjmp	.+40     	; 0x536 <adc_handler+0x54>
     50e:	20 91 3a 20 	lds	r18, 0x203A	; 0x80203a <light_sensor_sample>
     512:	30 91 3b 20 	lds	r19, 0x203B	; 0x80203b <light_sensor_sample+0x1>
     516:	42 0f       	add	r20, r18
     518:	53 1f       	adc	r21, r19
     51a:	56 95       	lsr	r21
     51c:	47 95       	ror	r20
     51e:	40 93 3a 20 	sts	0x203A, r20	; 0x80203a <light_sensor_sample>
     522:	50 93 3b 20 	sts	0x203B, r21	; 0x80203b <light_sensor_sample+0x1>
     526:	84 30       	cpi	r24, 0x04	; 4
     528:	31 f4       	brne	.+12     	; 0x536 <adc_handler+0x54>
     52a:	10 92 39 20 	sts	0x2039, r1	; 0x802039 <light_sensor_samples.5066>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <light_sensor_data_ready>
     534:	39 c0       	rjmp	.+114    	; 0x5a8 <adc_handler+0xc6>
     536:	8f b7       	in	r24, 0x3f	; 63
     538:	8a 83       	std	Y+2, r24	; 0x02
     53a:	f8 94       	cli
     53c:	9a 81       	ldd	r25, Y+2	; 0x02
     53e:	e0 e0       	ldi	r30, 0x00	; 0
     540:	f2 e0       	ldi	r31, 0x02	; 2
     542:	80 81       	ld	r24, Z
     544:	84 60       	ori	r24, 0x04	; 4
     546:	80 83       	st	Z, r24
     548:	9f bf       	out	0x3f, r25	; 63
     54a:	2e c0       	rjmp	.+92     	; 0x5a8 <adc_handler+0xc6>
     54c:	62 30       	cpi	r22, 0x02	; 2
     54e:	61 f5       	brne	.+88     	; 0x5a8 <adc_handler+0xc6>
     550:	80 91 38 20 	lds	r24, 0x2038	; 0x802038 <__data_end>
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	80 93 38 20 	sts	0x2038, r24	; 0x802038 <__data_end>
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	39 f4       	brne	.+14     	; 0x56c <adc_handler+0x8a>
     55e:	40 93 3c 20 	sts	0x203C, r20	; 0x80203c <ntc_sensor_sample>
     562:	50 93 3d 20 	sts	0x203D, r21	; 0x80203d <ntc_sensor_sample+0x1>
     566:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <ntc_sensor_data_ready>
     56a:	14 c0       	rjmp	.+40     	; 0x594 <adc_handler+0xb2>
     56c:	20 91 3c 20 	lds	r18, 0x203C	; 0x80203c <ntc_sensor_sample>
     570:	30 91 3d 20 	lds	r19, 0x203D	; 0x80203d <ntc_sensor_sample+0x1>
     574:	42 0f       	add	r20, r18
     576:	53 1f       	adc	r21, r19
     578:	56 95       	lsr	r21
     57a:	47 95       	ror	r20
     57c:	40 93 3c 20 	sts	0x203C, r20	; 0x80203c <ntc_sensor_sample>
     580:	50 93 3d 20 	sts	0x203D, r21	; 0x80203d <ntc_sensor_sample+0x1>
     584:	84 30       	cpi	r24, 0x04	; 4
     586:	31 f4       	brne	.+12     	; 0x594 <adc_handler+0xb2>
     588:	10 92 38 20 	sts	0x2038, r1	; 0x802038 <__data_end>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 3f 20 	sts	0x203F, r24	; 0x80203f <ntc_sensor_data_ready>
     592:	0a c0       	rjmp	.+20     	; 0x5a8 <adc_handler+0xc6>
     594:	8f b7       	in	r24, 0x3f	; 63
     596:	89 83       	std	Y+1, r24	; 0x01
     598:	f8 94       	cli
     59a:	99 81       	ldd	r25, Y+1	; 0x01
     59c:	e0 e0       	ldi	r30, 0x00	; 0
     59e:	f2 e0       	ldi	r31, 0x02	; 2
     5a0:	80 81       	ld	r24, Z
     5a2:	88 60       	ori	r24, 0x08	; 8
     5a4:	80 83       	st	Z, r24
     5a6:	9f bf       	out	0x3f, r25	; 63
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <ntc_data_is_ready>:
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	1f 92       	push	r1
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	8f b7       	in	r24, 0x3f	; 63
     5be:	89 83       	std	Y+1, r24	; 0x01
     5c0:	f8 94       	cli
     5c2:	99 81       	ldd	r25, Y+1	; 0x01
     5c4:	80 91 3f 20 	lds	r24, 0x203F	; 0x80203f <ntc_sensor_data_ready>
     5c8:	88 23       	and	r24, r24
     5ca:	21 f0       	breq	.+8      	; 0x5d4 <ntc_data_is_ready+0x22>
     5cc:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <ntc_sensor_data_ready>
     5d0:	9f bf       	out	0x3f, r25	; 63
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <ntc_data_is_ready+0x24>
     5d4:	9f bf       	out	0x3f, r25	; 63
     5d6:	0f 90       	pop	r0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <adc_sensors_init>:
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	2b 97       	sbiw	r28, 0x0b	; 11
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	be 01       	movw	r22, r28
     5f0:	6f 5f       	subi	r22, 0xFF	; 255
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <adc_read_configuration>
     5fc:	ae 01       	movw	r20, r28
     5fe:	48 5f       	subi	r20, 0xF8	; 248
     600:	5f 4f       	sbci	r21, 0xFF	; 255
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <adcch_read_configuration>
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	9b 81       	ldd	r25, Y+3	; 0x03
     610:	9f 78       	andi	r25, 0x8F	; 143
     612:	90 61       	ori	r25, 0x10	; 16
     614:	9b 83       	std	Y+3, r25	; 0x03
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	9d 83       	std	Y+5, r25	; 0x05
     61a:	81 7e       	andi	r24, 0xE1	; 225
     61c:	80 61       	ori	r24, 0x10	; 16
     61e:	8a 83       	std	Y+2, r24	; 0x02
     620:	1c 82       	std	Y+4, r1	; 0x04
     622:	be 01       	movw	r22, r28
     624:	6f 5f       	subi	r22, 0xFF	; 255
     626:	7f 4f       	sbci	r23, 0xFF	; 255
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <adc_write_configuration>
     630:	61 e7       	ldi	r22, 0x71	; 113
     632:	72 e0       	ldi	r23, 0x02	; 2
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	0e 94 28 0c 	call	0x1850	; 0x1850 <adc_set_callback>
     63c:	11 e0       	ldi	r17, 0x01	; 1
     63e:	18 87       	std	Y+8, r17	; 0x08
     640:	19 86       	std	Y+9, r1	; 0x09
     642:	8a 85       	ldd	r24, Y+10	; 0x0a
     644:	80 7f       	andi	r24, 0xF0	; 240
     646:	81 60       	ori	r24, 0x01	; 1
     648:	8a 87       	std	Y+10, r24	; 0x0a
     64a:	ae 01       	movw	r20, r28
     64c:	48 5f       	subi	r20, 0xF8	; 248
     64e:	5f 4f       	sbci	r21, 0xFF	; 255
     650:	61 e0       	ldi	r22, 0x01	; 1
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <adcch_write_configuration>
     65a:	18 87       	std	Y+8, r17	; 0x08
     65c:	88 e0       	ldi	r24, 0x08	; 8
     65e:	89 87       	std	Y+9, r24	; 0x09
     660:	ae 01       	movw	r20, r28
     662:	48 5f       	subi	r20, 0xF8	; 248
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	62 e0       	ldi	r22, 0x02	; 2
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <adcch_write_configuration>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	0e 94 84 0c 	call	0x1908	; 0x1908 <adc_enable>
     678:	2b 96       	adiw	r28, 0x0b	; 11
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	08 95       	ret

00000686 <ntc_get_temperature>:
 * \note The result is inaccurate for temperatures outside 5-45 degrees.
 *
 * \retval the temperature in Celsius
 */
int8_t ntc_get_temperature(void)
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
	int8_t retval = 0;
	float ntc_sample = ntc_sensor_sample;
     68a:	c0 91 3c 20 	lds	r28, 0x203C	; 0x80203c <ntc_sensor_sample>
     68e:	d0 91 3d 20 	lds	r29, 0x203D	; 0x80203d <ntc_sensor_sample+0x1>
     692:	be 01       	movw	r22, r28
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__floatunsisf>
	if (ntc_sensor_sample > 697) {
		retval = (int8_t)((-0.0295 * ntc_sample) + 40.5);
	} if (ntc_sensor_sample > 420) {
     69c:	c5 3a       	cpi	r28, 0xA5	; 165
     69e:	d1 40       	sbci	r29, 0x01	; 1
     6a0:	80 f0       	brcs	.+32     	; 0x6c2 <ntc_get_temperature+0x3c>
		retval = (int8_t)((-0.0474 * ntc_sample) + 53.3);
     6a2:	21 e8       	ldi	r18, 0x81	; 129
     6a4:	36 e2       	ldi	r19, 0x26	; 38
     6a6:	42 e4       	ldi	r20, 0x42	; 66
     6a8:	5d eb       	ldi	r21, 0xBD	; 189
     6aa:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__mulsf3>
     6ae:	23 e3       	ldi	r18, 0x33	; 51
     6b0:	33 e3       	ldi	r19, 0x33	; 51
     6b2:	45 e5       	ldi	r20, 0x55	; 85
     6b4:	52 e4       	ldi	r21, 0x42	; 66
     6b6:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__addsf3>
     6ba:	0e 94 39 12 	call	0x2472	; 0x2472 <__fixsfsi>
     6be:	86 2f       	mov	r24, r22
     6c0:	0f c0       	rjmp	.+30     	; 0x6e0 <ntc_get_temperature+0x5a>
	} else {
		retval = (int8_t)((-0.0777 * ntc_sample) + 65.1);
     6c2:	2d e2       	ldi	r18, 0x2D	; 45
     6c4:	31 e2       	ldi	r19, 0x21	; 33
     6c6:	4f e9       	ldi	r20, 0x9F	; 159
     6c8:	5d eb       	ldi	r21, 0xBD	; 189
     6ca:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__mulsf3>
     6ce:	23 e3       	ldi	r18, 0x33	; 51
     6d0:	33 e3       	ldi	r19, 0x33	; 51
     6d2:	42 e8       	ldi	r20, 0x82	; 130
     6d4:	52 e4       	ldi	r21, 0x42	; 66
     6d6:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__addsf3>
     6da:	0e 94 39 12 	call	0x2472	; 0x2472 <__fixsfsi>
     6de:	86 2f       	mov	r24, r22
	}
	return retval;
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     6e8:	61 50       	subi	r22, 0x01	; 1
     6ea:	71 09       	sbc	r23, r1
     6ec:	81 09       	sbc	r24, r1
     6ee:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     6f0:	61 15       	cp	r22, r1
     6f2:	71 05       	cpc	r23, r1
     6f4:	81 05       	cpc	r24, r1
     6f6:	91 05       	cpc	r25, r1
     6f8:	b9 f7       	brne	.-18     	; 0x6e8 <__portable_avr_delay_cycles+0x2>
     6fa:	08 95       	ret

000006fc <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	1f 92       	push	r1
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     714:	00 e0       	ldi	r16, 0x00	; 0
     716:	16 e0       	ldi	r17, 0x06	; 6
     718:	68 94       	set
     71a:	ff 24       	eor	r15, r15
     71c:	f3 f8       	bld	r15, 3
     71e:	f8 01       	movw	r30, r16
     720:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     722:	64 e0       	ldi	r22, 0x04	; 4
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	dd df       	rcall	.-70     	; 0x6e6 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     72c:	f8 01       	movw	r30, r16
     72e:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     730:	64 e0       	ldi	r22, 0x04	; 4
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	d6 df       	rcall	.-84     	; 0x6e6 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     73a:	0f 2e       	mov	r0, r31
     73c:	fb e2       	ldi	r31, 0x2B	; 43
     73e:	bf 2e       	mov	r11, r31
     740:	f0 2d       	mov	r31, r0
     742:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     744:	80 ea       	ldi	r24, 0xA0	; 160
     746:	99 e0       	ldi	r25, 0x09	; 9
     748:	c6 d5       	rcall	.+2956   	; 0x12d6 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     74a:	c1 2c       	mov	r12, r1
     74c:	d1 2c       	mov	r13, r1
     74e:	76 01       	movw	r14, r12
     750:	00 e4       	ldi	r16, 0x40	; 64
     752:	12 e4       	ldi	r17, 0x42	; 66
     754:	2f e0       	ldi	r18, 0x0F	; 15
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	43 e0       	ldi	r20, 0x03	; 3
     75a:	be 01       	movw	r22, r28
     75c:	6f 5f       	subi	r22, 0xFF	; 255
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	80 ea       	ldi	r24, 0xA0	; 160
     762:	99 e0       	ldi	r25, 0x09	; 9
     764:	e7 d5       	rcall	.+3022   	; 0x1334 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     766:	00 e6       	ldi	r16, 0x60	; 96
     768:	16 e0       	ldi	r17, 0x06	; 6
     76a:	ff 24       	eor	r15, r15
     76c:	f3 94       	inc	r15
     76e:	f8 01       	movw	r30, r16
     770:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     772:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     774:	be 01       	movw	r22, r28
     776:	6f 5f       	subi	r22, 0xFF	; 255
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	80 ea       	ldi	r24, 0xA0	; 160
     77c:	99 e0       	ldi	r25, 0x09	; 9
     77e:	f4 d5       	rcall	.+3048   	; 0x1368 <usart_spi_select_device>
     780:	f8 01       	movw	r30, r16
     782:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     784:	e0 ea       	ldi	r30, 0xA0	; 160
     786:	f9 e0       	ldi	r31, 0x09	; 9
     788:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     78a:	85 ff       	sbrs	r24, 5
     78c:	fd cf       	rjmp	.-6      	; 0x788 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     78e:	80 ea       	ldi	r24, 0xA0	; 160
     790:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     794:	e0 ea       	ldi	r30, 0xA0	; 160
     796:	f9 e0       	ldi	r31, 0x09	; 9
     798:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     79a:	86 ff       	sbrs	r24, 6
     79c:	fd cf       	rjmp	.-6      	; 0x798 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     79e:	e0 ea       	ldi	r30, 0xA0	; 160
     7a0:	f9 e0       	ldi	r31, 0x09	; 9
     7a2:	80 e4       	ldi	r24, 0x40	; 64
     7a4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7a6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7a8:	be 01       	movw	r22, r28
     7aa:	6f 5f       	subi	r22, 0xFF	; 255
     7ac:	7f 4f       	sbci	r23, 0xFF	; 255
     7ae:	80 ea       	ldi	r24, 0xA0	; 160
     7b0:	99 e0       	ldi	r25, 0x09	; 9
     7b2:	f0 d5       	rcall	.+3040   	; 0x1394 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7b4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	be 01       	movw	r22, r28
     7ba:	6f 5f       	subi	r22, 0xFF	; 255
     7bc:	7f 4f       	sbci	r23, 0xFF	; 255
     7be:	80 ea       	ldi	r24, 0xA0	; 160
     7c0:	99 e0       	ldi	r25, 0x09	; 9
     7c2:	d2 d5       	rcall	.+2980   	; 0x1368 <usart_spi_select_device>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7ca:	e0 ea       	ldi	r30, 0xA0	; 160
     7cc:	f9 e0       	ldi	r31, 0x09	; 9
     7ce:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7d0:	85 ff       	sbrs	r24, 5
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7d4:	86 ea       	ldi	r24, 0xA6	; 166
     7d6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7da:	e0 ea       	ldi	r30, 0xA0	; 160
     7dc:	f9 e0       	ldi	r31, 0x09	; 9
     7de:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7e0:	86 ff       	sbrs	r24, 6
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7e4:	e0 ea       	ldi	r30, 0xA0	; 160
     7e6:	f9 e0       	ldi	r31, 0x09	; 9
     7e8:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7ea:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7ec:	80 81       	ld	r24, Z
     7ee:	be 01       	movw	r22, r28
     7f0:	6f 5f       	subi	r22, 0xFF	; 255
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	80 ea       	ldi	r24, 0xA0	; 160
     7f6:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7f8:	cd d5       	rcall	.+2970   	; 0x1394 <usart_spi_deselect_device>
     7fa:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	be 01       	movw	r22, r28
     800:	6f 5f       	subi	r22, 0xFF	; 255
     802:	7f 4f       	sbci	r23, 0xFF	; 255
     804:	80 ea       	ldi	r24, 0xA0	; 160
     806:	99 e0       	ldi	r25, 0x09	; 9
     808:	af d5       	rcall	.+2910   	; 0x1368 <usart_spi_select_device>
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     810:	e0 ea       	ldi	r30, 0xA0	; 160
     812:	f9 e0       	ldi	r31, 0x09	; 9
     814:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     816:	85 ff       	sbrs	r24, 5
     818:	fd cf       	rjmp	.-6      	; 0x814 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     81a:	88 ec       	ldi	r24, 0xC8	; 200
     81c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     820:	e0 ea       	ldi	r30, 0xA0	; 160
     822:	f9 e0       	ldi	r31, 0x09	; 9
     824:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     826:	86 ff       	sbrs	r24, 6
     828:	fd cf       	rjmp	.-6      	; 0x824 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     82a:	e0 ea       	ldi	r30, 0xA0	; 160
     82c:	f9 e0       	ldi	r31, 0x09	; 9
     82e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     830:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     832:	80 81       	ld	r24, Z
     834:	be 01       	movw	r22, r28
     836:	6f 5f       	subi	r22, 0xFF	; 255
     838:	7f 4f       	sbci	r23, 0xFF	; 255
     83a:	80 ea       	ldi	r24, 0xA0	; 160
     83c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     83e:	aa d5       	rcall	.+2900   	; 0x1394 <usart_spi_deselect_device>
     840:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     842:	89 83       	std	Y+1, r24	; 0x01
     844:	be 01       	movw	r22, r28
     846:	6f 5f       	subi	r22, 0xFF	; 255
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	80 ea       	ldi	r24, 0xA0	; 160
     84c:	99 e0       	ldi	r25, 0x09	; 9
     84e:	8c d5       	rcall	.+2840   	; 0x1368 <usart_spi_select_device>
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     856:	e0 ea       	ldi	r30, 0xA0	; 160
     858:	f9 e0       	ldi	r31, 0x09	; 9
     85a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     85c:	85 ff       	sbrs	r24, 5
     85e:	fd cf       	rjmp	.-6      	; 0x85a <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     860:	82 ea       	ldi	r24, 0xA2	; 162
     862:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     866:	e0 ea       	ldi	r30, 0xA0	; 160
     868:	f9 e0       	ldi	r31, 0x09	; 9
     86a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     86c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     86e:	fd cf       	rjmp	.-6      	; 0x86a <st7565r_init+0x16e>
     870:	e0 ea       	ldi	r30, 0xA0	; 160
     872:	f9 e0       	ldi	r31, 0x09	; 9
     874:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     876:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     878:	80 81       	ld	r24, Z
     87a:	be 01       	movw	r22, r28
     87c:	6f 5f       	subi	r22, 0xFF	; 255
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	80 ea       	ldi	r24, 0xA0	; 160
     882:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     884:	87 d5       	rcall	.+2830   	; 0x1394 <usart_spi_deselect_device>
     886:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     888:	89 83       	std	Y+1, r24	; 0x01
     88a:	be 01       	movw	r22, r28
     88c:	6f 5f       	subi	r22, 0xFF	; 255
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	80 ea       	ldi	r24, 0xA0	; 160
     892:	99 e0       	ldi	r25, 0x09	; 9
     894:	69 d5       	rcall	.+2770   	; 0x1368 <usart_spi_select_device>
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     89c:	e0 ea       	ldi	r30, 0xA0	; 160
     89e:	f9 e0       	ldi	r31, 0x09	; 9
     8a0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8a2:	85 ff       	sbrs	r24, 5
     8a4:	fd cf       	rjmp	.-6      	; 0x8a0 <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8a6:	8f e2       	ldi	r24, 0x2F	; 47
     8a8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8ac:	e0 ea       	ldi	r30, 0xA0	; 160
     8ae:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8b0:	81 81       	ldd	r24, Z+1	; 0x01
     8b2:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8b4:	fd cf       	rjmp	.-6      	; 0x8b0 <st7565r_init+0x1b4>
     8b6:	e0 ea       	ldi	r30, 0xA0	; 160
     8b8:	f9 e0       	ldi	r31, 0x09	; 9
     8ba:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8bc:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8be:	80 81       	ld	r24, Z
     8c0:	be 01       	movw	r22, r28
     8c2:	6f 5f       	subi	r22, 0xFF	; 255
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	80 ea       	ldi	r24, 0xA0	; 160
     8c8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8ca:	64 d5       	rcall	.+2760   	; 0x1394 <usart_spi_deselect_device>
     8cc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8ce:	89 83       	std	Y+1, r24	; 0x01
     8d0:	be 01       	movw	r22, r28
     8d2:	6f 5f       	subi	r22, 0xFF	; 255
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	80 ea       	ldi	r24, 0xA0	; 160
     8d8:	99 e0       	ldi	r25, 0x09	; 9
     8da:	46 d5       	rcall	.+2700   	; 0x1368 <usart_spi_select_device>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8e2:	e0 ea       	ldi	r30, 0xA0	; 160
     8e4:	f9 e0       	ldi	r31, 0x09	; 9
     8e6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8e8:	85 ff       	sbrs	r24, 5
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8ec:	88 ef       	ldi	r24, 0xF8	; 248
     8ee:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8f2:	e0 ea       	ldi	r30, 0xA0	; 160
     8f4:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8f6:	81 81       	ldd	r24, Z+1	; 0x01
     8f8:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <st7565r_init+0x1fa>
     8fc:	e0 ea       	ldi	r30, 0xA0	; 160
     8fe:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     900:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     902:	81 83       	std	Z+1, r24	; 0x01
     904:	80 81       	ld	r24, Z
     906:	be 01       	movw	r22, r28
     908:	6f 5f       	subi	r22, 0xFF	; 255
     90a:	7f 4f       	sbci	r23, 0xFF	; 255
     90c:	80 ea       	ldi	r24, 0xA0	; 160
     90e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     910:	41 d5       	rcall	.+2690   	; 0x1394 <usart_spi_deselect_device>
     912:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	be 01       	movw	r22, r28
     918:	6f 5f       	subi	r22, 0xFF	; 255
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	80 ea       	ldi	r24, 0xA0	; 160
     91e:	99 e0       	ldi	r25, 0x09	; 9
     920:	23 d5       	rcall	.+2630   	; 0x1368 <usart_spi_select_device>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     928:	e0 ea       	ldi	r30, 0xA0	; 160
     92a:	f9 e0       	ldi	r31, 0x09	; 9
     92c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     92e:	85 ff       	sbrs	r24, 5
     930:	fd cf       	rjmp	.-6      	; 0x92c <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     932:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     936:	e0 ea       	ldi	r30, 0xA0	; 160
     938:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     93a:	81 81       	ldd	r24, Z+1	; 0x01
     93c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     93e:	fd cf       	rjmp	.-6      	; 0x93a <st7565r_init+0x23e>
     940:	e0 ea       	ldi	r30, 0xA0	; 160
     942:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     944:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     946:	81 83       	std	Z+1, r24	; 0x01
     948:	80 81       	ld	r24, Z
     94a:	be 01       	movw	r22, r28
     94c:	6f 5f       	subi	r22, 0xFF	; 255
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	80 ea       	ldi	r24, 0xA0	; 160
     952:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     954:	1f d5       	rcall	.+2622   	; 0x1394 <usart_spi_deselect_device>
     956:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     958:	89 83       	std	Y+1, r24	; 0x01
     95a:	be 01       	movw	r22, r28
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	80 ea       	ldi	r24, 0xA0	; 160
     962:	99 e0       	ldi	r25, 0x09	; 9
     964:	01 d5       	rcall	.+2562   	; 0x1368 <usart_spi_select_device>
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     96c:	e0 ea       	ldi	r30, 0xA0	; 160
     96e:	f9 e0       	ldi	r31, 0x09	; 9
     970:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     972:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     974:	fd cf       	rjmp	.-6      	; 0x970 <st7565r_init+0x274>
     976:	81 e2       	ldi	r24, 0x21	; 33
     978:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     97c:	e0 ea       	ldi	r30, 0xA0	; 160
     97e:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     980:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     982:	86 ff       	sbrs	r24, 6
     984:	fd cf       	rjmp	.-6      	; 0x980 <st7565r_init+0x284>
     986:	e0 ea       	ldi	r30, 0xA0	; 160
     988:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     98a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     98c:	81 83       	std	Z+1, r24	; 0x01
     98e:	80 81       	ld	r24, Z
     990:	be 01       	movw	r22, r28
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	80 ea       	ldi	r24, 0xA0	; 160
     998:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     99a:	fc d4       	rcall	.+2552   	; 0x1394 <usart_spi_deselect_device>
     99c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	be 01       	movw	r22, r28
     9a2:	6f 5f       	subi	r22, 0xFF	; 255
     9a4:	7f 4f       	sbci	r23, 0xFF	; 255
     9a6:	80 ea       	ldi	r24, 0xA0	; 160
     9a8:	99 e0       	ldi	r25, 0x09	; 9
     9aa:	de d4       	rcall	.+2492   	; 0x1368 <usart_spi_select_device>
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9b2:	e0 ea       	ldi	r30, 0xA0	; 160
     9b4:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9b6:	81 81       	ldd	r24, Z+1	; 0x01
     9b8:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <st7565r_init+0x2ba>
     9bc:	81 e8       	ldi	r24, 0x81	; 129
     9be:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9c2:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9c4:	f9 e0       	ldi	r31, 0x09	; 9
     9c6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9c8:	86 ff       	sbrs	r24, 6
     9ca:	fd cf       	rjmp	.-6      	; 0x9c6 <st7565r_init+0x2ca>
     9cc:	e0 ea       	ldi	r30, 0xA0	; 160
     9ce:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9d0:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9d2:	81 83       	std	Z+1, r24	; 0x01
     9d4:	80 81       	ld	r24, Z
     9d6:	be 01       	movw	r22, r28
     9d8:	6f 5f       	subi	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	80 ea       	ldi	r24, 0xA0	; 160
     9de:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9e0:	d9 d4       	rcall	.+2482   	; 0x1394 <usart_spi_deselect_device>
     9e2:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9e4:	89 83       	std	Y+1, r24	; 0x01
     9e6:	be 01       	movw	r22, r28
     9e8:	6f 5f       	subi	r22, 0xFF	; 255
     9ea:	7f 4f       	sbci	r23, 0xFF	; 255
     9ec:	80 ea       	ldi	r24, 0xA0	; 160
     9ee:	99 e0       	ldi	r25, 0x09	; 9
     9f0:	bb d4       	rcall	.+2422   	; 0x1368 <usart_spi_select_device>
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9f8:	e0 ea       	ldi	r30, 0xA0	; 160
     9fa:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9fc:	81 81       	ldd	r24, Z+1	; 0x01
     9fe:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <st7565r_init+0x300>
     a02:	81 e2       	ldi	r24, 0x21	; 33
     a04:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a08:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a0a:	f9 e0       	ldi	r31, 0x09	; 9
     a0c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a0e:	86 ff       	sbrs	r24, 6
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <st7565r_init+0x310>
     a12:	e0 ea       	ldi	r30, 0xA0	; 160
     a14:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a16:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a18:	81 83       	std	Z+1, r24	; 0x01
     a1a:	80 81       	ld	r24, Z
     a1c:	be 01       	movw	r22, r28
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	80 ea       	ldi	r24, 0xA0	; 160
     a24:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a26:	b6 d4       	rcall	.+2412   	; 0x1394 <usart_spi_deselect_device>
     a28:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	be 01       	movw	r22, r28
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	80 ea       	ldi	r24, 0xA0	; 160
     a34:	99 e0       	ldi	r25, 0x09	; 9
     a36:	98 d4       	rcall	.+2352   	; 0x1368 <usart_spi_select_device>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a3e:	e0 ea       	ldi	r30, 0xA0	; 160
     a40:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a42:	81 81       	ldd	r24, Z+1	; 0x01
     a44:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a46:	fd cf       	rjmp	.-6      	; 0xa42 <st7565r_init+0x346>
     a48:	8f ea       	ldi	r24, 0xAF	; 175
     a4a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a4e:	e0 ea       	ldi	r30, 0xA0	; 160
     a50:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a52:	81 81       	ldd	r24, Z+1	; 0x01
     a54:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a56:	fd cf       	rjmp	.-6      	; 0xa52 <st7565r_init+0x356>
     a58:	e0 ea       	ldi	r30, 0xA0	; 160
     a5a:	f9 e0       	ldi	r31, 0x09	; 9
     a5c:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a5e:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a60:	80 81       	ld	r24, Z
     a62:	be 01       	movw	r22, r28
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	80 ea       	ldi	r24, 0xA0	; 160
     a6a:	99 e0       	ldi	r25, 0x09	; 9
     a6c:	93 d4       	rcall	.+2342   	; 0x1394 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	08 95       	ret

00000a84 <gfx_mono_st7565r_put_page>:
 */
void gfx_mono_st7565r_get_page(gfx_mono_color_t *data, gfx_coord_t page,
		gfx_coord_t column, gfx_coord_t width)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_get_page(data, page, column, width);
     a84:	6f 92       	push	r6
     a86:	7f 92       	push	r7
     a88:	8f 92       	push	r8
     a8a:	9f 92       	push	r9
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	1f 92       	push	r1
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	8c 01       	movw	r16, r24
     aa8:	e6 2e       	mov	r14, r22
     aaa:	f4 2e       	mov	r15, r20
     aac:	d2 2e       	mov	r13, r18
     aae:	8d d4       	rcall	.+2330   	; 0x13ca <gfx_mono_framebuffer_put_page>
     ab0:	8e 2d       	mov	r24, r14
     ab2:	8f 70       	andi	r24, 0x0F	; 15
     ab4:	80 6b       	ori	r24, 0xB0	; 176
     ab6:	e8 2e       	mov	r14, r24
     ab8:	8b e2       	ldi	r24, 0x2B	; 43
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	be 01       	movw	r22, r28
     abe:	6f 5f       	subi	r22, 0xFF	; 255
     ac0:	7f 4f       	sbci	r23, 0xFF	; 255
     ac2:	80 ea       	ldi	r24, 0xA0	; 160
     ac4:	99 e0       	ldi	r25, 0x09	; 9
     ac6:	50 d4       	rcall	.+2208   	; 0x1368 <usart_spi_select_device>
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     ace:	e0 ea       	ldi	r30, 0xA0	; 160
     ad0:	f9 e0       	ldi	r31, 0x09	; 9
     ad2:	81 81       	ldd	r24, Z+1	; 0x01
     ad4:	85 ff       	sbrs	r24, 5
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <gfx_mono_st7565r_put_page+0x4e>
     ad8:	e0 92 a0 09 	sts	0x09A0, r14	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     adc:	e0 ea       	ldi	r30, 0xA0	; 160
     ade:	f9 e0       	ldi	r31, 0x09	; 9
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	86 ff       	sbrs	r24, 6
     ae4:	fd cf       	rjmp	.-6      	; 0xae0 <gfx_mono_st7565r_put_page+0x5c>
     ae6:	e0 ea       	ldi	r30, 0xA0	; 160
     ae8:	f9 e0       	ldi	r31, 0x09	; 9
     aea:	80 e4       	ldi	r24, 0x40	; 64
     aec:	81 83       	std	Z+1, r24	; 0x01
     aee:	80 81       	ld	r24, Z
     af0:	be 01       	movw	r22, r28
     af2:	6f 5f       	subi	r22, 0xFF	; 255
     af4:	7f 4f       	sbci	r23, 0xFF	; 255
     af6:	80 ea       	ldi	r24, 0xA0	; 160
     af8:	99 e0       	ldi	r25, 0x09	; 9
     afa:	4c d4       	rcall	.+2200   	; 0x1394 <usart_spi_deselect_device>
     afc:	8f 2d       	mov	r24, r15
     afe:	8f 77       	andi	r24, 0x7F	; 127
     b00:	82 95       	swap	r24
     b02:	8f 70       	andi	r24, 0x0F	; 15
     b04:	80 61       	ori	r24, 0x10	; 16
     b06:	e8 2e       	mov	r14, r24
     b08:	8b e2       	ldi	r24, 0x2B	; 43
     b0a:	89 83       	std	Y+1, r24	; 0x01
     b0c:	be 01       	movw	r22, r28
     b0e:	6f 5f       	subi	r22, 0xFF	; 255
     b10:	7f 4f       	sbci	r23, 0xFF	; 255
     b12:	80 ea       	ldi	r24, 0xA0	; 160
     b14:	99 e0       	ldi	r25, 0x09	; 9
     b16:	28 d4       	rcall	.+2128   	; 0x1368 <usart_spi_select_device>
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     b1e:	e0 ea       	ldi	r30, 0xA0	; 160
     b20:	f9 e0       	ldi	r31, 0x09	; 9
     b22:	81 81       	ldd	r24, Z+1	; 0x01
     b24:	85 ff       	sbrs	r24, 5
     b26:	fd cf       	rjmp	.-6      	; 0xb22 <gfx_mono_st7565r_put_page+0x9e>
     b28:	e0 92 a0 09 	sts	0x09A0, r14	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     b2c:	e0 ea       	ldi	r30, 0xA0	; 160
     b2e:	f9 e0       	ldi	r31, 0x09	; 9
     b30:	81 81       	ldd	r24, Z+1	; 0x01
     b32:	86 ff       	sbrs	r24, 6
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <gfx_mono_st7565r_put_page+0xac>
     b36:	e0 ea       	ldi	r30, 0xA0	; 160
     b38:	f9 e0       	ldi	r31, 0x09	; 9
     b3a:	80 e4       	ldi	r24, 0x40	; 64
     b3c:	81 83       	std	Z+1, r24	; 0x01
     b3e:	80 81       	ld	r24, Z
     b40:	be 01       	movw	r22, r28
     b42:	6f 5f       	subi	r22, 0xFF	; 255
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	80 ea       	ldi	r24, 0xA0	; 160
     b48:	99 e0       	ldi	r25, 0x09	; 9
     b4a:	24 d4       	rcall	.+2120   	; 0x1394 <usart_spi_deselect_device>
     b4c:	8f 2d       	mov	r24, r15
     b4e:	8f 70       	andi	r24, 0x0F	; 15
     b50:	f8 2e       	mov	r15, r24
     b52:	8b e2       	ldi	r24, 0x2B	; 43
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	be 01       	movw	r22, r28
     b58:	6f 5f       	subi	r22, 0xFF	; 255
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	80 ea       	ldi	r24, 0xA0	; 160
     b5e:	99 e0       	ldi	r25, 0x09	; 9
     b60:	03 d4       	rcall	.+2054   	; 0x1368 <usart_spi_select_device>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     b68:	e0 ea       	ldi	r30, 0xA0	; 160
     b6a:	f9 e0       	ldi	r31, 0x09	; 9
     b6c:	81 81       	ldd	r24, Z+1	; 0x01
     b6e:	85 ff       	sbrs	r24, 5
     b70:	fd cf       	rjmp	.-6      	; 0xb6c <gfx_mono_st7565r_put_page+0xe8>
     b72:	f0 92 a0 09 	sts	0x09A0, r15	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     b76:	e0 ea       	ldi	r30, 0xA0	; 160
     b78:	f9 e0       	ldi	r31, 0x09	; 9
     b7a:	81 81       	ldd	r24, Z+1	; 0x01
     b7c:	86 ff       	sbrs	r24, 6
     b7e:	fd cf       	rjmp	.-6      	; 0xb7a <gfx_mono_st7565r_put_page+0xf6>
     b80:	e0 ea       	ldi	r30, 0xA0	; 160
     b82:	f9 e0       	ldi	r31, 0x09	; 9
     b84:	80 e4       	ldi	r24, 0x40	; 64
     b86:	81 83       	std	Z+1, r24	; 0x01
     b88:	80 81       	ld	r24, Z
     b8a:	be 01       	movw	r22, r28
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	80 ea       	ldi	r24, 0xA0	; 160
     b92:	99 e0       	ldi	r25, 0x09	; 9
     b94:	ff d3       	rcall	.+2046   	; 0x1394 <usart_spi_deselect_device>
     b96:	78 01       	movw	r14, r16
     b98:	da 94       	dec	r13
     b9a:	ad 2c       	mov	r10, r13
     b9c:	b1 2c       	mov	r11, r1
     b9e:	ef ef       	ldi	r30, 0xFF	; 255
     ba0:	ae 1a       	sub	r10, r30
     ba2:	be 0a       	sbc	r11, r30
     ba4:	a0 0e       	add	r10, r16
     ba6:	b1 1e       	adc	r11, r17
     ba8:	0f 2e       	mov	r0, r31
     baa:	fb e2       	ldi	r31, 0x2B	; 43
     bac:	6f 2e       	mov	r6, r31
     bae:	f0 2d       	mov	r31, r0
     bb0:	00 ea       	ldi	r16, 0xA0	; 160
     bb2:	19 e0       	ldi	r17, 0x09	; 9
     bb4:	0f 2e       	mov	r0, r31
     bb6:	f0 e6       	ldi	r31, 0x60	; 96
     bb8:	cf 2e       	mov	r12, r31
     bba:	f6 e0       	ldi	r31, 0x06	; 6
     bbc:	df 2e       	mov	r13, r31
     bbe:	f0 2d       	mov	r31, r0
     bc0:	99 24       	eor	r9, r9
     bc2:	93 94       	inc	r9
     bc4:	68 94       	set
     bc6:	77 24       	eor	r7, r7
     bc8:	76 f8       	bld	r7, 6
     bca:	f7 01       	movw	r30, r14
     bcc:	81 90       	ld	r8, Z+
     bce:	7f 01       	movw	r14, r30
     bd0:	69 82       	std	Y+1, r6	; 0x01
     bd2:	be 01       	movw	r22, r28
     bd4:	6f 5f       	subi	r22, 0xFF	; 255
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	c8 01       	movw	r24, r16
     bda:	c6 d3       	rcall	.+1932   	; 0x1368 <usart_spi_select_device>
     bdc:	f6 01       	movw	r30, r12
     bde:	95 82       	std	Z+5, r9	; 0x05
     be0:	f8 01       	movw	r30, r16
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	95 ff       	sbrs	r25, 5
     be6:	fc cf       	rjmp	.-8      	; 0xbe0 <gfx_mono_st7565r_put_page+0x15c>
     be8:	80 82       	st	Z, r8
     bea:	f8 01       	movw	r30, r16
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	96 ff       	sbrs	r25, 6
     bf0:	fc cf       	rjmp	.-8      	; 0xbea <gfx_mono_st7565r_put_page+0x166>
     bf2:	71 82       	std	Z+1, r7	; 0x01
     bf4:	80 81       	ld	r24, Z
     bf6:	f6 01       	movw	r30, r12
     bf8:	96 82       	std	Z+6, r9	; 0x06
     bfa:	be 01       	movw	r22, r28
     bfc:	6f 5f       	subi	r22, 0xFF	; 255
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	c8 01       	movw	r24, r16
     c02:	c8 d3       	rcall	.+1936   	; 0x1394 <usart_spi_deselect_device>
     c04:	ea 14       	cp	r14, r10
     c06:	fb 04       	cpc	r15, r11
     c08:	01 f7       	brne	.-64     	; 0xbca <gfx_mono_st7565r_put_page+0x146>
     c0a:	0f 90       	pop	r0
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	df 90       	pop	r13
     c1a:	cf 90       	pop	r12
     c1c:	bf 90       	pop	r11
     c1e:	af 90       	pop	r10
     c20:	9f 90       	pop	r9
     c22:	8f 90       	pop	r8
     c24:	7f 90       	pop	r7
     c26:	6f 90       	pop	r6
     c28:	08 95       	ret

00000c2a <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	1f 92       	push	r1
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	08 2f       	mov	r16, r24
     c3c:	f6 2e       	mov	r15, r22
     c3e:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     c40:	d8 d3       	rcall	.+1968   	; 0x13f2 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     c42:	0f 70       	andi	r16, 0x0F	; 15
     c44:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c46:	8b e2       	ldi	r24, 0x2B	; 43
     c48:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c4a:	be 01       	movw	r22, r28
     c4c:	6f 5f       	subi	r22, 0xFF	; 255
     c4e:	7f 4f       	sbci	r23, 0xFF	; 255
     c50:	80 ea       	ldi	r24, 0xA0	; 160
     c52:	99 e0       	ldi	r25, 0x09	; 9
     c54:	89 d3       	rcall	.+1810   	; 0x1368 <usart_spi_select_device>
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c5c:	e0 ea       	ldi	r30, 0xA0	; 160
     c5e:	f9 e0       	ldi	r31, 0x09	; 9
     c60:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c62:	95 ff       	sbrs	r25, 5
     c64:	fd cf       	rjmp	.-6      	; 0xc60 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c66:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c6a:	e0 ea       	ldi	r30, 0xA0	; 160
     c6c:	f9 e0       	ldi	r31, 0x09	; 9
     c6e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c70:	86 ff       	sbrs	r24, 6
     c72:	fd cf       	rjmp	.-6      	; 0xc6e <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c74:	e0 ea       	ldi	r30, 0xA0	; 160
     c76:	f9 e0       	ldi	r31, 0x09	; 9
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c7c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c7e:	be 01       	movw	r22, r28
     c80:	6f 5f       	subi	r22, 0xFF	; 255
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	80 ea       	ldi	r24, 0xA0	; 160
     c86:	99 e0       	ldi	r25, 0x09	; 9
     c88:	85 d3       	rcall	.+1802   	; 0x1394 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     c8a:	0f 2d       	mov	r16, r15
     c8c:	0f 77       	andi	r16, 0x7F	; 127
     c8e:	02 95       	swap	r16
     c90:	0f 70       	andi	r16, 0x0F	; 15
     c92:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c94:	8b e2       	ldi	r24, 0x2B	; 43
     c96:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c98:	be 01       	movw	r22, r28
     c9a:	6f 5f       	subi	r22, 0xFF	; 255
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	80 ea       	ldi	r24, 0xA0	; 160
     ca0:	99 e0       	ldi	r25, 0x09	; 9
     ca2:	62 d3       	rcall	.+1732   	; 0x1368 <usart_spi_select_device>
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     caa:	e0 ea       	ldi	r30, 0xA0	; 160
     cac:	f9 e0       	ldi	r31, 0x09	; 9
     cae:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     cb0:	85 ff       	sbrs	r24, 5
     cb2:	fd cf       	rjmp	.-6      	; 0xcae <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     cb4:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     cb8:	e0 ea       	ldi	r30, 0xA0	; 160
     cba:	f9 e0       	ldi	r31, 0x09	; 9
     cbc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     cbe:	86 ff       	sbrs	r24, 6
     cc0:	fd cf       	rjmp	.-6      	; 0xcbc <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     cc2:	e0 ea       	ldi	r30, 0xA0	; 160
     cc4:	f9 e0       	ldi	r31, 0x09	; 9
     cc6:	80 e4       	ldi	r24, 0x40	; 64
     cc8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     cca:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     ccc:	be 01       	movw	r22, r28
     cce:	6f 5f       	subi	r22, 0xFF	; 255
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	80 ea       	ldi	r24, 0xA0	; 160
     cd4:	99 e0       	ldi	r25, 0x09	; 9
     cd6:	5e d3       	rcall	.+1724   	; 0x1394 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     cd8:	0f 2d       	mov	r16, r15
     cda:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     cdc:	8b e2       	ldi	r24, 0x2B	; 43
     cde:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     ce0:	be 01       	movw	r22, r28
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	80 ea       	ldi	r24, 0xA0	; 160
     ce8:	99 e0       	ldi	r25, 0x09	; 9
     cea:	3e d3       	rcall	.+1660   	; 0x1368 <usart_spi_select_device>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     cf2:	e0 ea       	ldi	r30, 0xA0	; 160
     cf4:	f9 e0       	ldi	r31, 0x09	; 9
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     cf8:	85 ff       	sbrs	r24, 5
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     cfc:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     d00:	e0 ea       	ldi	r30, 0xA0	; 160
     d02:	f9 e0       	ldi	r31, 0x09	; 9
     d04:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     d06:	86 ff       	sbrs	r24, 6
     d08:	fd cf       	rjmp	.-6      	; 0xd04 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     d0a:	e0 ea       	ldi	r30, 0xA0	; 160
     d0c:	f9 e0       	ldi	r31, 0x09	; 9
     d0e:	80 e4       	ldi	r24, 0x40	; 64
     d10:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     d12:	80 81       	ld	r24, Z
     d14:	be 01       	movw	r22, r28
     d16:	6f 5f       	subi	r22, 0xFF	; 255
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	80 ea       	ldi	r24, 0xA0	; 160
     d1c:	99 e0       	ldi	r25, 0x09	; 9
     d1e:	3a d3       	rcall	.+1652   	; 0x1394 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     d20:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	be 01       	movw	r22, r28
     d26:	6f 5f       	subi	r22, 0xFF	; 255
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	80 ea       	ldi	r24, 0xA0	; 160
     d2c:	99 e0       	ldi	r25, 0x09	; 9
     d2e:	1c d3       	rcall	.+1592   	; 0x1368 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     d36:	e0 ea       	ldi	r30, 0xA0	; 160
     d38:	f9 e0       	ldi	r31, 0x09	; 9
     d3a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     d3c:	85 ff       	sbrs	r24, 5
     d3e:	fd cf       	rjmp	.-6      	; 0xd3a <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     d40:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     d44:	e0 ea       	ldi	r30, 0xA0	; 160
     d46:	f9 e0       	ldi	r31, 0x09	; 9
     d48:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     d4a:	86 ff       	sbrs	r24, 6
     d4c:	fd cf       	rjmp	.-6      	; 0xd48 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     d4e:	e0 ea       	ldi	r30, 0xA0	; 160
     d50:	f9 e0       	ldi	r31, 0x09	; 9
     d52:	80 e4       	ldi	r24, 0x40	; 64
     d54:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     d56:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     d5e:	be 01       	movw	r22, r28
     d60:	6f 5f       	subi	r22, 0xFF	; 255
     d62:	7f 4f       	sbci	r23, 0xFF	; 255
     d64:	80 ea       	ldi	r24, 0xA0	; 160
     d66:	99 e0       	ldi	r25, 0x09	; 9
     d68:	15 d3       	rcall	.+1578   	; 0x1394 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     d6a:	0f 90       	pop	r0
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	08 95       	ret

00000d78 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	1f 92       	push	r1
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     d86:	80 e4       	ldi	r24, 0x40	; 64
     d88:	90 e2       	ldi	r25, 0x20	; 32
     d8a:	1a d3       	rcall	.+1588   	; 0x13c0 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     d8c:	b7 dc       	rcall	.-1682   	; 0x6fc <st7565r_init>
     d8e:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	80 ea       	ldi	r24, 0xA0	; 160
     d9a:	99 e0       	ldi	r25, 0x09	; 9
     d9c:	e5 d2       	rcall	.+1482   	; 0x1368 <usart_spi_select_device>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     da4:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     da6:	f9 e0       	ldi	r31, 0x09	; 9
     da8:	81 81       	ldd	r24, Z+1	; 0x01
     daa:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     dac:	fd cf       	rjmp	.-6      	; 0xda8 <gfx_mono_st7565r_init+0x30>
     dae:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     db0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     db4:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     db6:	f9 e0       	ldi	r31, 0x09	; 9
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     dbc:	fd cf       	rjmp	.-6      	; 0xdb8 <gfx_mono_st7565r_init+0x40>
     dbe:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     dc0:	f9 e0       	ldi	r31, 0x09	; 9
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	81 83       	std	Z+1, r24	; 0x01
     dc6:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     dc8:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     dca:	6f 5f       	subi	r22, 0xFF	; 255
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	80 ea       	ldi	r24, 0xA0	; 160
     dd0:	99 e0       	ldi	r25, 0x09	; 9
     dd2:	e0 d2       	rcall	.+1472   	; 0x1394 <usart_spi_deselect_device>
     dd4:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     dd6:	0a c0       	rjmp	.+20     	; 0xdec <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	61 2f       	mov	r22, r17
     ddc:	80 2f       	mov	r24, r16
     dde:	25 df       	rcall	.-438    	; 0xc2a <gfx_mono_st7565r_put_byte>
     de0:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     de2:	10 38       	cpi	r17, 0x80	; 128
     de4:	c9 f7       	brne	.-14     	; 0xdd8 <gfx_mono_st7565r_init+0x60>
     de6:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     de8:	04 30       	cpi	r16, 0x04	; 4
     dea:	11 f0       	breq	.+4      	; 0xdf0 <gfx_mono_st7565r_init+0x78>
     dec:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     dee:	f4 cf       	rjmp	.-24     	; 0xdd8 <gfx_mono_st7565r_init+0x60>
     df0:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <gfx_mono_st7565r_draw_pixel>:
     dfc:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     e06:	88 23       	and	r24, r24
     e08:	4c f1       	brlt	.+82     	; 0xe5c <gfx_mono_st7565r_draw_pixel+0x60>
     e0a:	60 32       	cpi	r22, 0x20	; 32
     e0c:	38 f5       	brcc	.+78     	; 0xe5c <gfx_mono_st7565r_draw_pixel+0x60>
     e0e:	d4 2f       	mov	r29, r20
     e10:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     e12:	f6 2e       	mov	r15, r22
     e14:	f6 94       	lsr	r15
     e16:	f6 94       	lsr	r15
     e18:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	f8 9e       	mul	r15, r24
     e20:	60 19       	sub	r22, r0
     e22:	71 09       	sbc	r23, r1
     e24:	11 24       	eor	r1, r1
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	8c 01       	movw	r16, r24
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <gfx_mono_st7565r_draw_pixel+0x36>
     e2e:	00 0f       	add	r16, r16
     e30:	11 1f       	adc	r17, r17
     e32:	6a 95       	dec	r22
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     e36:	6c 2f       	mov	r22, r28
     e38:	8f 2d       	mov	r24, r15
     e3a:	e9 d2       	rcall	.+1490   	; 0x140e <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     e3c:	d1 30       	cpi	r29, 0x01	; 1
     e3e:	21 f0       	breq	.+8      	; 0xe48 <gfx_mono_st7565r_draw_pixel+0x4c>
     e40:	28 f0       	brcs	.+10     	; 0xe4c <gfx_mono_st7565r_draw_pixel+0x50>
     e42:	d2 30       	cpi	r29, 0x02	; 2
     e44:	31 f0       	breq	.+12     	; 0xe52 <gfx_mono_st7565r_draw_pixel+0x56>
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     e48:	80 2b       	or	r24, r16
		break;
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     e4c:	00 95       	com	r16
     e4e:	80 23       	and	r24, r16
		break;
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     e52:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     e54:	48 2f       	mov	r20, r24
     e56:	6c 2f       	mov	r22, r28
     e58:	8f 2d       	mov	r24, r15
     e5a:	e7 de       	rcall	.-562    	; 0xc2a <gfx_mono_st7565r_put_byte>
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	08 95       	ret

00000e68 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     e68:	d2 c2       	rjmp	.+1444   	; 0x140e <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     e6a:	08 95       	ret

00000e6c <gfx_mono_st7565r_mask_byte>:
	gfx_mono_st7565r_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	d8 2f       	mov	r29, r24
     e76:	16 2f       	mov	r17, r22
     e78:	04 2f       	mov	r16, r20
     e7a:	c2 2f       	mov	r28, r18
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     e7c:	c8 d2       	rcall	.+1424   	; 0x140e <gfx_mono_framebuffer_get_byte>
void gfx_mono_st7565r_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
     e7e:	c1 30       	cpi	r28, 0x01	; 1
     e80:	21 f0       	breq	.+8      	; 0xe8a <gfx_mono_st7565r_mask_byte+0x1e>
     e82:	28 f0       	brcs	.+10     	; 0xe8e <gfx_mono_st7565r_mask_byte+0x22>
     e84:	c2 30       	cpi	r28, 0x02	; 2
     e86:	31 f0       	breq	.+12     	; 0xe94 <gfx_mono_st7565r_mask_byte+0x28>
     e88:	06 c0       	rjmp	.+12     	; 0xe96 <gfx_mono_st7565r_mask_byte+0x2a>
	case GFX_PIXEL_SET:
		temp |= pixel_mask;
     e8a:	80 2b       	or	r24, r16
		break;
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_CLR:
		temp &= ~pixel_mask;
     e8e:	00 95       	com	r16
     e90:	80 23       	and	r24, r16
		break;
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <gfx_mono_st7565r_mask_byte+0x2a>

	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
     e94:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
     e96:	48 2f       	mov	r20, r24
     e98:	61 2f       	mov	r22, r17
     e9a:	8d 2f       	mov	r24, r29
     e9c:	c6 de       	rcall	.-628    	; 0xc2a <gfx_mono_st7565r_put_byte>
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ea8:	cf 92       	push	r12
     eaa:	df 92       	push	r13
     eac:	ef 92       	push	r14
     eae:	ff 92       	push	r15
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     eba:	d9 01       	movw	r26, r18
     ebc:	c8 01       	movw	r24, r16
     ebe:	b6 95       	lsr	r27
     ec0:	a7 95       	ror	r26
     ec2:	97 95       	ror	r25
     ec4:	87 95       	ror	r24
     ec6:	48 17       	cp	r20, r24
     ec8:	59 07       	cpc	r21, r25
     eca:	6a 07       	cpc	r22, r26
     ecc:	7b 07       	cpc	r23, r27
     ece:	78 f4       	brcc	.+30     	; 0xeee <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     ed0:	6a 01       	movw	r12, r20
     ed2:	7b 01       	movw	r14, r22
     ed4:	cc 0c       	add	r12, r12
     ed6:	dd 1c       	adc	r13, r13
     ed8:	ee 1c       	adc	r14, r14
     eda:	ff 1c       	adc	r15, r15
     edc:	c9 01       	movw	r24, r18
     ede:	b8 01       	movw	r22, r16
     ee0:	a7 01       	movw	r20, r14
     ee2:	96 01       	movw	r18, r12
     ee4:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__udivmodsi4>
     ee8:	21 50       	subi	r18, 0x01	; 1
     eea:	31 09       	sbc	r19, r1
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     ef2:	83 2f       	mov	r24, r19
     ef4:	8f 70       	andi	r24, 0x0F	; 15
     ef6:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     ef8:	2e 83       	std	Y+6, r18	; 0x06
}
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	df 90       	pop	r13
     f08:	cf 90       	pop	r12
     f0a:	08 95       	ret

00000f0c <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	1f 92       	push	r1
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	7c 01       	movw	r14, r24
     f22:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	09 f4       	brne	.+2      	; 0xf2a <usart_init_spi+0x1e>
     f28:	b3 c1       	rjmp	.+870    	; 0x1290 <usart_init_spi+0x384>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     f2a:	80 3c       	cpi	r24, 0xC0	; 192
     f2c:	91 05       	cpc	r25, r1
     f2e:	29 f4       	brne	.+10     	; 0xf3a <usart_init_spi+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     f30:	60 e1       	ldi	r22, 0x10	; 16
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <sysclk_enable_module>
     f38:	ab c1       	rjmp	.+854    	; 0x1290 <usart_init_spi+0x384>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	e8 16       	cp	r14, r24
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	f8 06       	cpc	r15, r24
     f42:	21 f4       	brne	.+8      	; 0xf4c <usart_init_spi+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     f44:	62 e0       	ldi	r22, 0x02	; 2
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	fc d7       	rcall	.+4088   	; 0x1f42 <sysclk_enable_module>
     f4a:	a2 c1       	rjmp	.+836    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     f4c:	e1 14       	cp	r14, r1
     f4e:	e1 e0       	ldi	r30, 0x01	; 1
     f50:	fe 06       	cpc	r15, r30
     f52:	21 f4       	brne	.+8      	; 0xf5c <usart_init_spi+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	f4 d7       	rcall	.+4072   	; 0x1f42 <sysclk_enable_module>
     f5a:	9a c1       	rjmp	.+820    	; 0x1290 <usart_init_spi+0x384>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     f5c:	f0 e8       	ldi	r31, 0x80	; 128
     f5e:	ef 16       	cp	r14, r31
     f60:	f3 e0       	ldi	r31, 0x03	; 3
     f62:	ff 06       	cpc	r15, r31
     f64:	21 f4       	brne	.+8      	; 0xf6e <usart_init_spi+0x62>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	eb d7       	rcall	.+4054   	; 0x1f42 <sysclk_enable_module>
     f6c:	91 c1       	rjmp	.+802    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     f6e:	30 e9       	ldi	r19, 0x90	; 144
     f70:	e3 16       	cp	r14, r19
     f72:	33 e0       	ldi	r19, 0x03	; 3
     f74:	f3 06       	cpc	r15, r19
     f76:	21 f4       	brne	.+8      	; 0xf80 <usart_init_spi+0x74>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	e2 d7       	rcall	.+4036   	; 0x1f42 <sysclk_enable_module>
     f7e:	88 c1       	rjmp	.+784    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     f80:	e1 14       	cp	r14, r1
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     f86:	21 f4       	brne	.+8      	; 0xf90 <usart_init_spi+0x84>
     f88:	62 e0       	ldi	r22, 0x02	; 2
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	da d7       	rcall	.+4020   	; 0x1f42 <sysclk_enable_module>
     f8e:	80 c1       	rjmp	.+768    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     f90:	e0 e4       	ldi	r30, 0x40	; 64
     f92:	ee 16       	cp	r14, r30
     f94:	e2 e0       	ldi	r30, 0x02	; 2
     f96:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     f98:	21 f4       	brne	.+8      	; 0xfa2 <usart_init_spi+0x96>
     f9a:	62 e0       	ldi	r22, 0x02	; 2
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	d1 d7       	rcall	.+4002   	; 0x1f42 <sysclk_enable_module>
     fa0:	77 c1       	rjmp	.+750    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     fa2:	f0 e2       	ldi	r31, 0x20	; 32
     fa4:	ef 16       	cp	r14, r31
     fa6:	f3 e0       	ldi	r31, 0x03	; 3
     fa8:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     faa:	21 f4       	brne	.+8      	; 0xfb4 <usart_init_spi+0xa8>
     fac:	64 e0       	ldi	r22, 0x04	; 4
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	c8 d7       	rcall	.+3984   	; 0x1f42 <sysclk_enable_module>
     fb2:	6e c1       	rjmp	.+732    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     fb4:	e1 14       	cp	r14, r1
     fb6:	38 e0       	ldi	r19, 0x08	; 8
     fb8:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     fba:	21 f4       	brne	.+8      	; 0xfc4 <usart_init_spi+0xb8>
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	c0 d7       	rcall	.+3968   	; 0x1f42 <sysclk_enable_module>
     fc2:	66 c1       	rjmp	.+716    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     fc4:	e1 14       	cp	r14, r1
     fc6:	89 e0       	ldi	r24, 0x09	; 9
     fc8:	f8 06       	cpc	r15, r24
     fca:	21 f4       	brne	.+8      	; 0xfd4 <usart_init_spi+0xc8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	84 e0       	ldi	r24, 0x04	; 4
     fd0:	b8 d7       	rcall	.+3952   	; 0x1f42 <sysclk_enable_module>
     fd2:	5e c1       	rjmp	.+700    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     fd4:	e1 14       	cp	r14, r1
     fd6:	ea e0       	ldi	r30, 0x0A	; 10
     fd8:	fe 06       	cpc	r15, r30
     fda:	21 f4       	brne	.+8      	; 0xfe4 <usart_init_spi+0xd8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	85 e0       	ldi	r24, 0x05	; 5
     fe0:	b0 d7       	rcall	.+3936   	; 0x1f42 <sysclk_enable_module>
     fe2:	56 c1       	rjmp	.+684    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     fe4:	e1 14       	cp	r14, r1
     fe6:	fb e0       	ldi	r31, 0x0B	; 11
     fe8:	ff 06       	cpc	r15, r31
     fea:	21 f4       	brne	.+8      	; 0xff4 <usart_init_spi+0xe8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	86 e0       	ldi	r24, 0x06	; 6
     ff0:	a8 d7       	rcall	.+3920   	; 0x1f42 <sysclk_enable_module>
     ff2:	4e c1       	rjmp	.+668    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     ff4:	30 e4       	ldi	r19, 0x40	; 64
     ff6:	e3 16       	cp	r14, r19
     ff8:	38 e0       	ldi	r19, 0x08	; 8
     ffa:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     ffc:	21 f4       	brne	.+8      	; 0x1006 <usart_init_spi+0xfa>
     ffe:	62 e0       	ldi	r22, 0x02	; 2
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	9f d7       	rcall	.+3902   	; 0x1f42 <sysclk_enable_module>
    1004:	45 c1       	rjmp	.+650    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1006:	80 e4       	ldi	r24, 0x40	; 64
    1008:	e8 16       	cp	r14, r24
    100a:	89 e0       	ldi	r24, 0x09	; 9
    100c:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    100e:	21 f4       	brne	.+8      	; 0x1018 <usart_init_spi+0x10c>
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	84 e0       	ldi	r24, 0x04	; 4
    1014:	96 d7       	rcall	.+3884   	; 0x1f42 <sysclk_enable_module>
    1016:	3c c1       	rjmp	.+632    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1018:	e0 e4       	ldi	r30, 0x40	; 64
    101a:	ee 16       	cp	r14, r30
    101c:	ea e0       	ldi	r30, 0x0A	; 10
    101e:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1020:	21 f4       	brne	.+8      	; 0x102a <usart_init_spi+0x11e>
    1022:	62 e0       	ldi	r22, 0x02	; 2
    1024:	85 e0       	ldi	r24, 0x05	; 5
    1026:	8d d7       	rcall	.+3866   	; 0x1f42 <sysclk_enable_module>
    1028:	33 c1       	rjmp	.+614    	; 0x1290 <usart_init_spi+0x384>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    102a:	f0 e9       	ldi	r31, 0x90	; 144
    102c:	ef 16       	cp	r14, r31
    102e:	f8 e0       	ldi	r31, 0x08	; 8
    1030:	ff 06       	cpc	r15, r31
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1032:	21 f4       	brne	.+8      	; 0x103c <usart_init_spi+0x130>
    1034:	64 e0       	ldi	r22, 0x04	; 4
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	84 d7       	rcall	.+3848   	; 0x1f42 <sysclk_enable_module>
    103a:	2a c1       	rjmp	.+596    	; 0x1290 <usart_init_spi+0x384>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    103c:	30 e9       	ldi	r19, 0x90	; 144
    103e:	e3 16       	cp	r14, r19
    1040:	39 e0       	ldi	r19, 0x09	; 9
    1042:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1044:	21 f4       	brne	.+8      	; 0x104e <usart_init_spi+0x142>
    1046:	64 e0       	ldi	r22, 0x04	; 4
    1048:	84 e0       	ldi	r24, 0x04	; 4
    104a:	7b d7       	rcall	.+3830   	; 0x1f42 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    104c:	21 c1       	rjmp	.+578    	; 0x1290 <usart_init_spi+0x384>
    104e:	80 e9       	ldi	r24, 0x90	; 144
    1050:	e8 16       	cp	r14, r24
    1052:	8a e0       	ldi	r24, 0x0A	; 10
    1054:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1056:	21 f4       	brne	.+8      	; 0x1060 <usart_init_spi+0x154>
    1058:	64 e0       	ldi	r22, 0x04	; 4
    105a:	85 e0       	ldi	r24, 0x05	; 5
    105c:	72 d7       	rcall	.+3812   	; 0x1f42 <sysclk_enable_module>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    105e:	18 c1       	rjmp	.+560    	; 0x1290 <usart_init_spi+0x384>
    1060:	e0 e9       	ldi	r30, 0x90	; 144
    1062:	ee 16       	cp	r14, r30
    1064:	eb e0       	ldi	r30, 0x0B	; 11
    1066:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1068:	21 f4       	brne	.+8      	; 0x1072 <usart_init_spi+0x166>
    106a:	64 e0       	ldi	r22, 0x04	; 4
    106c:	86 e0       	ldi	r24, 0x06	; 6
    106e:	69 d7       	rcall	.+3794   	; 0x1f42 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1070:	0f c1       	rjmp	.+542    	; 0x1290 <usart_init_spi+0x384>
    1072:	f0 ec       	ldi	r31, 0xC0	; 192
    1074:	ef 16       	cp	r14, r31
    1076:	f8 e0       	ldi	r31, 0x08	; 8
    1078:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    107a:	21 f4       	brne	.+8      	; 0x1084 <usart_init_spi+0x178>
    107c:	68 e0       	ldi	r22, 0x08	; 8
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	60 d7       	rcall	.+3776   	; 0x1f42 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1082:	06 c1       	rjmp	.+524    	; 0x1290 <usart_init_spi+0x384>
    1084:	30 ec       	ldi	r19, 0xC0	; 192
    1086:	e3 16       	cp	r14, r19
    1088:	39 e0       	ldi	r19, 0x09	; 9
    108a:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    108c:	21 f4       	brne	.+8      	; 0x1096 <usart_init_spi+0x18a>
    108e:	68 e0       	ldi	r22, 0x08	; 8
    1090:	84 e0       	ldi	r24, 0x04	; 4
    1092:	57 d7       	rcall	.+3758   	; 0x1f42 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1094:	fd c0       	rjmp	.+506    	; 0x1290 <usart_init_spi+0x384>
    1096:	80 ea       	ldi	r24, 0xA0	; 160
    1098:	e8 16       	cp	r14, r24
    109a:	88 e0       	ldi	r24, 0x08	; 8
    109c:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    109e:	61 f4       	brne	.+24     	; 0x10b8 <usart_init_spi+0x1ac>
    10a0:	60 e1       	ldi	r22, 0x10	; 16
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	4e d7       	rcall	.+3740   	; 0x1f42 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    10a6:	e0 ea       	ldi	r30, 0xA0	; 160
    10a8:	f8 e0       	ldi	r31, 0x08	; 8
    10aa:	84 81       	ldd	r24, Z+4	; 0x04
    10ac:	8f 7e       	andi	r24, 0xEF	; 239
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    10ae:	84 83       	std	Z+4, r24	; 0x04
    10b0:	f8 01       	movw	r30, r16
    10b2:	24 81       	ldd	r18, Z+4	; 0x04
    10b4:	22 50       	subi	r18, 0x02	; 2
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    10b6:	4c c0       	rjmp	.+152    	; 0x1150 <usart_init_spi+0x244>
    10b8:	f0 ea       	ldi	r31, 0xA0	; 160
    10ba:	ef 16       	cp	r14, r31
    10bc:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    10be:	ff 06       	cpc	r15, r31
    10c0:	21 f4       	brne	.+8      	; 0x10ca <usart_init_spi+0x1be>
    10c2:	60 e1       	ldi	r22, 0x10	; 16
    10c4:	84 e0       	ldi	r24, 0x04	; 4
    10c6:	3d d7       	rcall	.+3706   	; 0x1f42 <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    10c8:	e3 c0       	rjmp	.+454    	; 0x1290 <usart_init_spi+0x384>
    10ca:	30 ea       	ldi	r19, 0xA0	; 160
    10cc:	e3 16       	cp	r14, r19
    10ce:	3a e0       	ldi	r19, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    10d0:	f3 06       	cpc	r15, r19
    10d2:	21 f4       	brne	.+8      	; 0x10dc <usart_init_spi+0x1d0>
    10d4:	60 e1       	ldi	r22, 0x10	; 16
    10d6:	85 e0       	ldi	r24, 0x05	; 5
    10d8:	34 d7       	rcall	.+3688   	; 0x1f42 <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    10da:	da c0       	rjmp	.+436    	; 0x1290 <usart_init_spi+0x384>
    10dc:	80 ea       	ldi	r24, 0xA0	; 160
    10de:	e8 16       	cp	r14, r24
    10e0:	8b e0       	ldi	r24, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    10e2:	f8 06       	cpc	r15, r24
    10e4:	21 f4       	brne	.+8      	; 0x10ee <usart_init_spi+0x1e2>
    10e6:	60 e1       	ldi	r22, 0x10	; 16
    10e8:	86 e0       	ldi	r24, 0x06	; 6
    10ea:	2b d7       	rcall	.+3670   	; 0x1f42 <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    10ec:	d1 c0       	rjmp	.+418    	; 0x1290 <usart_init_spi+0x384>
    10ee:	e0 eb       	ldi	r30, 0xB0	; 176
    10f0:	ee 16       	cp	r14, r30
    10f2:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    10f4:	fe 06       	cpc	r15, r30
    10f6:	21 f4       	brne	.+8      	; 0x1100 <usart_init_spi+0x1f4>
    10f8:	60 e2       	ldi	r22, 0x20	; 32
    10fa:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    10fc:	22 d7       	rcall	.+3652   	; 0x1f42 <sysclk_enable_module>
    10fe:	c8 c0       	rjmp	.+400    	; 0x1290 <usart_init_spi+0x384>
    1100:	f0 eb       	ldi	r31, 0xB0	; 176
    1102:	ef 16       	cp	r14, r31
    1104:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1106:	ff 06       	cpc	r15, r31
    1108:	21 f4       	brne	.+8      	; 0x1112 <usart_init_spi+0x206>
    110a:	60 e2       	ldi	r22, 0x20	; 32
    110c:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    110e:	19 d7       	rcall	.+3634   	; 0x1f42 <sysclk_enable_module>
    1110:	bf c0       	rjmp	.+382    	; 0x1290 <usart_init_spi+0x384>
    1112:	30 e8       	ldi	r19, 0x80	; 128
    1114:	e3 16       	cp	r14, r19
    1116:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1118:	f3 06       	cpc	r15, r19
    111a:	21 f4       	brne	.+8      	; 0x1124 <usart_init_spi+0x218>
    111c:	60 e4       	ldi	r22, 0x40	; 64
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	10 d7       	rcall	.+3616   	; 0x1f42 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1122:	b6 c0       	rjmp	.+364    	; 0x1290 <usart_init_spi+0x384>
    1124:	80 ea       	ldi	r24, 0xA0	; 160
    1126:	e8 16       	cp	r14, r24
    1128:	84 e0       	ldi	r24, 0x04	; 4
    112a:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    112c:	21 f4       	brne	.+8      	; 0x1136 <usart_init_spi+0x22a>
    112e:	60 e4       	ldi	r22, 0x40	; 64
    1130:	85 e0       	ldi	r24, 0x05	; 5
    1132:	07 d7       	rcall	.+3598   	; 0x1f42 <sysclk_enable_module>
    1134:	ad c0       	rjmp	.+346    	; 0x1290 <usart_init_spi+0x384>
    1136:	f7 01       	movw	r30, r14
    1138:	84 81       	ldd	r24, Z+4	; 0x04
    113a:	8f 7e       	andi	r24, 0xEF	; 239
    113c:	84 83       	std	Z+4, r24	; 0x04
    113e:	fb 01       	movw	r30, r22
    1140:	24 81       	ldd	r18, Z+4	; 0x04
    1142:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1144:	c7 01       	movw	r24, r14
    1146:	f0 ea       	ldi	r31, 0xA0	; 160
    1148:	ef 16       	cp	r14, r31
    114a:	f8 e0       	ldi	r31, 0x08	; 8
    114c:	ff 06       	cpc	r15, r31
    114e:	49 f4       	brne	.+18     	; 0x1162 <usart_init_spi+0x256>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1150:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1154:	84 fd       	sbrc	r24, 4
    1156:	a5 c0       	rjmp	.+330    	; 0x12a2 <usart_init_spi+0x396>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1158:	0f 2e       	mov	r0, r31
    115a:	f1 e1       	ldi	r31, 0x11	; 17
    115c:	df 2e       	mov	r13, r31
    115e:	f0 2d       	mov	r31, r0
    1160:	a4 c0       	rjmp	.+328    	; 0x12aa <usart_init_spi+0x39e>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1162:	80 3b       	cpi	r24, 0xB0	; 176
    1164:	38 e0       	ldi	r19, 0x08	; 8
    1166:	93 07       	cpc	r25, r19
    1168:	91 f0       	breq	.+36     	; 0x118e <usart_init_spi+0x282>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    116a:	80 3a       	cpi	r24, 0xA0	; 160
    116c:	e9 e0       	ldi	r30, 0x09	; 9
    116e:	9e 07       	cpc	r25, r30
    1170:	49 f4       	brne	.+18     	; 0x1184 <usart_init_spi+0x278>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1172:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1176:	34 fd       	sbrc	r19, 4
    1178:	9b c0       	rjmp	.+310    	; 0x12b0 <usart_init_spi+0x3a4>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    117a:	0f 2e       	mov	r0, r31
    117c:	f9 e1       	ldi	r31, 0x19	; 25
    117e:	df 2e       	mov	r13, r31
    1180:	f0 2d       	mov	r31, r0
    1182:	16 c0       	rjmp	.+44     	; 0x11b0 <usart_init_spi+0x2a4>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1184:	80 3b       	cpi	r24, 0xB0	; 176
    1186:	f9 e0       	ldi	r31, 0x09	; 9
    1188:	9f 07       	cpc	r25, r31
    118a:	f1 f0       	breq	.+60     	; 0x11c8 <usart_init_spi+0x2bc>
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <usart_init_spi+0x28a>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    118e:	0f 2e       	mov	r0, r31
    1190:	f5 e1       	ldi	r31, 0x15	; 21
    1192:	df 2e       	mov	r13, r31
    1194:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1196:	80 3a       	cpi	r24, 0xA0	; 160
    1198:	3a e0       	ldi	r19, 0x0A	; 10
    119a:	93 07       	cpc	r25, r19
    119c:	49 f4       	brne	.+18     	; 0x11b0 <usart_init_spi+0x2a4>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    119e:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    11a2:	84 fd       	sbrc	r24, 4
    11a4:	8a c0       	rjmp	.+276    	; 0x12ba <usart_init_spi+0x3ae>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    11a6:	0f 2e       	mov	r0, r31
    11a8:	f1 e2       	ldi	r31, 0x21	; 33
    11aa:	df 2e       	mov	r13, r31
    11ac:	f0 2d       	mov	r31, r0
    11ae:	15 c0       	rjmp	.+42     	; 0x11da <usart_init_spi+0x2ce>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    11b0:	80 3a       	cpi	r24, 0xA0	; 160
    11b2:	9b 40       	sbci	r25, 0x0B	; 11
    11b4:	91 f4       	brne	.+36     	; 0x11da <usart_init_spi+0x2ce>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    11b6:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    11ba:	84 fd       	sbrc	r24, 4
    11bc:	0a c0       	rjmp	.+20     	; 0x11d2 <usart_init_spi+0x2c6>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    11be:	0f 2e       	mov	r0, r31
    11c0:	f9 e2       	ldi	r31, 0x29	; 41
    11c2:	df 2e       	mov	r13, r31
    11c4:	f0 2d       	mov	r31, r0
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <usart_init_spi+0x2ce>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    11c8:	0f 2e       	mov	r0, r31
    11ca:	fd e1       	ldi	r31, 0x1D	; 29
    11cc:	df 2e       	mov	r13, r31
    11ce:	f0 2d       	mov	r31, r0
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <usart_init_spi+0x2ce>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    11d2:	0f 2e       	mov	r0, r31
    11d4:	fd e2       	ldi	r31, 0x2D	; 45
    11d6:	df 2e       	mov	r13, r31
    11d8:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    11da:	ed 2d       	mov	r30, r13
    11dc:	e6 95       	lsr	r30
    11de:	e6 95       	lsr	r30
    11e0:	e6 95       	lsr	r30
    11e2:	30 e2       	ldi	r19, 0x20	; 32
    11e4:	e3 9f       	mul	r30, r19
    11e6:	f0 01       	movw	r30, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	fa 5f       	subi	r31, 0xFA	; 250
    11ec:	3d 2d       	mov	r19, r13
    11ee:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	03 2e       	mov	r0, r19
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <usart_init_spi+0x2f0>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <usart_init_spi+0x2ec>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1200:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	10 f0       	brcs	.+4      	; 0x120a <usart_init_spi+0x2fe>
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	01 c0       	rjmp	.+2      	; 0x120c <usart_init_spi+0x300>
    120a:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    120c:	df 01       	movw	r26, r30
    120e:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1210:	a3 0f       	add	r26, r19
    1212:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1214:	9f b7       	in	r25, 0x3f	; 63
    1216:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1218:	f8 94       	cli
	return flags;
    121a:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    121c:	2c 91       	ld	r18, X
    121e:	27 70       	andi	r18, 0x07	; 7
    1220:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1222:	9c 91       	ld	r25, X
    1224:	94 2b       	or	r25, r20
    1226:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1228:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    122a:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    122c:	f7 01       	movw	r30, r14
    122e:	85 81       	ldd	r24, Z+5	; 0x05
    1230:	80 6c       	ori	r24, 0xC0	; 192
    1232:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1234:	f8 01       	movw	r30, r16
    1236:	84 81       	ldd	r24, Z+4	; 0x04
    1238:	8d 7f       	andi	r24, 0xFD	; 253
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	29 f4       	brne	.+10     	; 0x1248 <usart_init_spi+0x33c>
		usart->CTRLC |= USART_UCPHA_bm;
    123e:	f7 01       	movw	r30, r14
    1240:	85 81       	ldd	r24, Z+5	; 0x05
    1242:	82 60       	ori	r24, 0x02	; 2
    1244:	85 83       	std	Z+5, r24	; 0x05
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <usart_init_spi+0x344>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1248:	f7 01       	movw	r30, r14
    124a:	85 81       	ldd	r24, Z+5	; 0x05
    124c:	8d 7f       	andi	r24, 0xFD	; 253
    124e:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
    1250:	f8 01       	movw	r30, r16
    1252:	85 81       	ldd	r24, Z+5	; 0x05
    1254:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    1256:	29 f0       	breq	.+10     	; 0x1262 <usart_init_spi+0x356>
    1258:	f7 01       	movw	r30, r14
    125a:	85 81       	ldd	r24, Z+5	; 0x05
    125c:	84 60       	ori	r24, 0x04	; 4
    125e:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1260:	04 c0       	rjmp	.+8      	; 0x126a <usart_init_spi+0x35e>
    1262:	f7 01       	movw	r30, r14
    1264:	85 81       	ldd	r24, Z+5	; 0x05
    1266:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1268:	85 83       	std	Z+5, r24	; 0x05
    126a:	f8 01       	movw	r30, r16
    126c:	40 81       	ld	r20, Z
    126e:	51 81       	ldd	r21, Z+1	; 0x01
    1270:	62 81       	ldd	r22, Z+2	; 0x02
    1272:	73 81       	ldd	r23, Z+3	; 0x03
    1274:	00 e8       	ldi	r16, 0x80	; 128
    1276:	14 e8       	ldi	r17, 0x84	; 132
    1278:	2e e1       	ldi	r18, 0x1E	; 30
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	c7 01       	movw	r24, r14
    127e:	14 de       	rcall	.-984    	; 0xea8 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1280:	f7 01       	movw	r30, r14
    1282:	84 81       	ldd	r24, Z+4	; 0x04
    1284:	88 60       	ori	r24, 0x08	; 8
    1286:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1288:	84 81       	ldd	r24, Z+4	; 0x04
    128a:	80 61       	ori	r24, 0x10	; 16
    128c:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    128e:	1a c0       	rjmp	.+52     	; 0x12c4 <usart_init_spi+0x3b8>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1290:	f7 01       	movw	r30, r14
    1292:	84 81       	ldd	r24, Z+4	; 0x04
    1294:	8f 7e       	andi	r24, 0xEF	; 239
    1296:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1298:	f8 01       	movw	r30, r16
    129a:	24 81       	ldd	r18, Z+4	; 0x04
    129c:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    129e:	c7 01       	movw	r24, r14
    12a0:	60 cf       	rjmp	.-320    	; 0x1162 <usart_init_spi+0x256>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    12a2:	0f 2e       	mov	r0, r31
    12a4:	f5 e1       	ldi	r31, 0x15	; 21
    12a6:	df 2e       	mov	r13, r31
    12a8:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    12aa:	80 ea       	ldi	r24, 0xA0	; 160
    12ac:	98 e0       	ldi	r25, 0x08	; 8
    12ae:	6a cf       	rjmp	.-300    	; 0x1184 <usart_init_spi+0x278>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    12b0:	0f 2e       	mov	r0, r31
    12b2:	fd e1       	ldi	r31, 0x1D	; 29
    12b4:	df 2e       	mov	r13, r31
    12b6:	f0 2d       	mov	r31, r0
    12b8:	7b cf       	rjmp	.-266    	; 0x11b0 <usart_init_spi+0x2a4>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    12ba:	0f 2e       	mov	r0, r31
    12bc:	f5 e2       	ldi	r31, 0x25	; 37
    12be:	df 2e       	mov	r13, r31
    12c0:	f0 2d       	mov	r31, r0
    12c2:	8b cf       	rjmp	.-234    	; 0x11da <usart_init_spi+0x2ce>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    12c4:	0f 90       	pop	r0
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	08 95       	ret

000012d6 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    12d6:	80 3a       	cpi	r24, 0xA0	; 160
    12d8:	28 e0       	ldi	r18, 0x08	; 8
    12da:	92 07       	cpc	r25, r18
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <usart_spi_init+0x10>
    12de:	60 e1       	ldi	r22, 0x10	; 16
    12e0:	83 e0       	ldi	r24, 0x03	; 3
    12e2:	2f c6       	rjmp	.+3166   	; 0x1f42 <sysclk_enable_module>
    12e4:	08 95       	ret
    12e6:	80 3b       	cpi	r24, 0xB0	; 176
    12e8:	28 e0       	ldi	r18, 0x08	; 8
    12ea:	92 07       	cpc	r25, r18
    12ec:	21 f4       	brne	.+8      	; 0x12f6 <usart_spi_init+0x20>
    12ee:	60 e2       	ldi	r22, 0x20	; 32
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	27 c6       	rjmp	.+3150   	; 0x1f42 <sysclk_enable_module>
    12f4:	08 95       	ret
    12f6:	80 3a       	cpi	r24, 0xA0	; 160
    12f8:	29 e0       	ldi	r18, 0x09	; 9
    12fa:	92 07       	cpc	r25, r18
    12fc:	21 f4       	brne	.+8      	; 0x1306 <usart_spi_init+0x30>
    12fe:	60 e1       	ldi	r22, 0x10	; 16
    1300:	84 e0       	ldi	r24, 0x04	; 4
    1302:	1f c6       	rjmp	.+3134   	; 0x1f42 <sysclk_enable_module>
    1304:	08 95       	ret
    1306:	80 3b       	cpi	r24, 0xB0	; 176
    1308:	29 e0       	ldi	r18, 0x09	; 9
    130a:	92 07       	cpc	r25, r18
    130c:	21 f4       	brne	.+8      	; 0x1316 <usart_spi_init+0x40>
    130e:	60 e2       	ldi	r22, 0x20	; 32
    1310:	84 e0       	ldi	r24, 0x04	; 4
    1312:	17 c6       	rjmp	.+3118   	; 0x1f42 <sysclk_enable_module>
    1314:	08 95       	ret
    1316:	80 3a       	cpi	r24, 0xA0	; 160
    1318:	2a e0       	ldi	r18, 0x0A	; 10
    131a:	92 07       	cpc	r25, r18
    131c:	21 f4       	brne	.+8      	; 0x1326 <usart_spi_init+0x50>
    131e:	60 e1       	ldi	r22, 0x10	; 16
    1320:	85 e0       	ldi	r24, 0x05	; 5
    1322:	0f c6       	rjmp	.+3102   	; 0x1f42 <sysclk_enable_module>
    1324:	08 95       	ret
    1326:	80 3a       	cpi	r24, 0xA0	; 160
    1328:	9b 40       	sbci	r25, 0x0B	; 11
    132a:	19 f4       	brne	.+6      	; 0x1332 <usart_spi_init+0x5c>
    132c:	60 e1       	ldi	r22, 0x10	; 16
    132e:	86 e0       	ldi	r24, 0x06	; 6
    1330:	08 c6       	rjmp	.+3088   	; 0x1f42 <sysclk_enable_module>
    1332:	08 95       	ret

00001334 <usart_spi_setup_device>:
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	00 d0       	rcall	.+0      	; 0x133e <usart_spi_setup_device+0xa>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <usart_spi_setup_device+0xc>
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	09 83       	std	Y+1, r16	; 0x01
    1346:	1a 83       	std	Y+2, r17	; 0x02
    1348:	2b 83       	std	Y+3, r18	; 0x03
    134a:	3c 83       	std	Y+4, r19	; 0x04
    134c:	4d 83       	std	Y+5, r20	; 0x05
    134e:	1e 82       	std	Y+6, r1	; 0x06
    1350:	be 01       	movw	r22, r28
    1352:	6f 5f       	subi	r22, 0xFF	; 255
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	da dd       	rcall	.-1100   	; 0xf0c <usart_init_spi>
    1358:	26 96       	adiw	r28, 0x06	; 6
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	08 95       	ret

00001368 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    1368:	fb 01       	movw	r30, r22
    136a:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    136c:	e8 2f       	mov	r30, r24
    136e:	e6 95       	lsr	r30
    1370:	e6 95       	lsr	r30
    1372:	e6 95       	lsr	r30
    1374:	40 e2       	ldi	r20, 0x20	; 32
    1376:	e4 9f       	mul	r30, r20
    1378:	f0 01       	movw	r30, r0
    137a:	11 24       	eor	r1, r1
    137c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    137e:	87 70       	andi	r24, 0x07	; 7
    1380:	21 e0       	ldi	r18, 0x01	; 1
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	a9 01       	movw	r20, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <usart_spi_select_device+0x24>
    1388:	44 0f       	add	r20, r20
    138a:	55 1f       	adc	r21, r21
    138c:	8a 95       	dec	r24
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1390:	46 83       	std	Z+6, r20	; 0x06
    1392:	08 95       	ret

00001394 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    1394:	fb 01       	movw	r30, r22
    1396:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1398:	e8 2f       	mov	r30, r24
    139a:	e6 95       	lsr	r30
    139c:	e6 95       	lsr	r30
    139e:	e6 95       	lsr	r30
    13a0:	40 e2       	ldi	r20, 0x20	; 32
    13a2:	e4 9f       	mul	r30, r20
    13a4:	f0 01       	movw	r30, r0
    13a6:	11 24       	eor	r1, r1
    13a8:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    13aa:	87 70       	andi	r24, 0x07	; 7
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	a9 01       	movw	r20, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <usart_spi_deselect_device+0x24>
    13b4:	44 0f       	add	r20, r20
    13b6:	55 1f       	adc	r21, r21
    13b8:	8a 95       	dec	r24
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    13bc:	45 83       	std	Z+5, r20	; 0x05
    13be:	08 95       	ret

000013c0 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    13c0:	80 93 40 22 	sts	0x2240, r24	; 0x802240 <fbpointer>
    13c4:	90 93 41 22 	sts	0x2241, r25	; 0x802241 <fbpointer+0x1>
    13c8:	08 95       	ret

000013ca <gfx_mono_framebuffer_put_page>:
    13ca:	dc 01       	movw	r26, r24
    13cc:	e4 2f       	mov	r30, r20
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	af 01       	movw	r20, r30
    13d2:	80 e8       	ldi	r24, 0x80	; 128
    13d4:	68 9f       	mul	r22, r24
    13d6:	40 0d       	add	r20, r0
    13d8:	51 1d       	adc	r21, r1
    13da:	11 24       	eor	r1, r1
    13dc:	e0 91 40 22 	lds	r30, 0x2240	; 0x802240 <fbpointer>
    13e0:	f0 91 41 22 	lds	r31, 0x2241	; 0x802241 <fbpointer+0x1>
    13e4:	e4 0f       	add	r30, r20
    13e6:	f5 1f       	adc	r31, r21
    13e8:	8d 91       	ld	r24, X+
    13ea:	81 93       	st	Z+, r24
    13ec:	21 50       	subi	r18, 0x01	; 1
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <gfx_mono_framebuffer_put_page+0x1e>
    13f0:	08 95       	ret

000013f2 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    13f2:	20 91 40 22 	lds	r18, 0x2240	; 0x802240 <fbpointer>
    13f6:	30 91 41 22 	lds	r19, 0x2241	; 0x802241 <fbpointer+0x1>
    13fa:	90 e8       	ldi	r25, 0x80	; 128
    13fc:	89 9f       	mul	r24, r25
    13fe:	20 0d       	add	r18, r0
    1400:	31 1d       	adc	r19, r1
    1402:	11 24       	eor	r1, r1
    1404:	f9 01       	movw	r30, r18
    1406:	e6 0f       	add	r30, r22
    1408:	f1 1d       	adc	r31, r1
    140a:	40 83       	st	Z, r20
    140c:	08 95       	ret

0000140e <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    140e:	20 91 40 22 	lds	r18, 0x2240	; 0x802240 <fbpointer>
    1412:	30 91 41 22 	lds	r19, 0x2241	; 0x802241 <fbpointer+0x1>
    1416:	90 e8       	ldi	r25, 0x80	; 128
    1418:	89 9f       	mul	r24, r25
    141a:	20 0d       	add	r18, r0
    141c:	31 1d       	adc	r19, r1
    141e:	11 24       	eor	r1, r1
    1420:	f9 01       	movw	r30, r18
    1422:	e6 0f       	add	r30, r22
    1424:	f1 1d       	adc	r31, r1
}
    1426:	80 81       	ld	r24, Z
    1428:	08 95       	ret

0000142a <gfx_mono_generic_draw_horizontal_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	e4 2f       	mov	r30, r20
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	e8 0f       	add	r30, r24
    143a:	f1 1d       	adc	r31, r1
    143c:	e1 38       	cpi	r30, 0x81	; 129
    143e:	f1 05       	cpc	r31, r1
    1440:	1c f0       	brlt	.+6      	; 0x1448 <gfx_mono_generic_draw_horizontal_line+0x1e>
    1442:	c0 e8       	ldi	r28, 0x80	; 128
    1444:	4c 2f       	mov	r20, r28
    1446:	48 1b       	sub	r20, r24
    1448:	44 23       	and	r20, r20
    144a:	09 f4       	brne	.+2      	; 0x144e <gfx_mono_generic_draw_horizontal_line+0x24>
    144c:	4a c0       	rjmp	.+148    	; 0x14e2 <gfx_mono_generic_draw_horizontal_line+0xb8>
    144e:	d6 2f       	mov	r29, r22
    1450:	d6 95       	lsr	r29
    1452:	d6 95       	lsr	r29
    1454:	d6 95       	lsr	r29
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	98 e0       	ldi	r25, 0x08	; 8
    145a:	d9 9f       	mul	r29, r25
    145c:	60 19       	sub	r22, r0
    145e:	71 09       	sbc	r23, r1
    1460:	11 24       	eor	r1, r1
    1462:	e1 e0       	ldi	r30, 0x01	; 1
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	df 01       	movw	r26, r30
    1468:	02 c0       	rjmp	.+4      	; 0x146e <gfx_mono_generic_draw_horizontal_line+0x44>
    146a:	aa 0f       	add	r26, r26
    146c:	bb 1f       	adc	r27, r27
    146e:	6a 95       	dec	r22
    1470:	e2 f7       	brpl	.-8      	; 0x146a <gfx_mono_generic_draw_horizontal_line+0x40>
    1472:	fa 2e       	mov	r15, r26
    1474:	21 30       	cpi	r18, 0x01	; 1
    1476:	21 f0       	breq	.+8      	; 0x1480 <gfx_mono_generic_draw_horizontal_line+0x56>
    1478:	98 f0       	brcs	.+38     	; 0x14a0 <gfx_mono_generic_draw_horizontal_line+0x76>
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	19 f1       	breq	.+70     	; 0x14c4 <gfx_mono_generic_draw_horizontal_line+0x9a>
    147e:	31 c0       	rjmp	.+98     	; 0x14e2 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1480:	c4 2f       	mov	r28, r20
    1482:	1f ef       	ldi	r17, 0xFF	; 255
    1484:	18 0f       	add	r17, r24
    1486:	01 2f       	mov	r16, r17
    1488:	0c 0f       	add	r16, r28
    148a:	60 2f       	mov	r22, r16
    148c:	8d 2f       	mov	r24, r29
    148e:	ec dc       	rcall	.-1576   	; 0xe68 <gfx_mono_st7565r_get_byte>
    1490:	4f 2d       	mov	r20, r15
    1492:	48 2b       	or	r20, r24
    1494:	60 2f       	mov	r22, r16
    1496:	8d 2f       	mov	r24, r29
    1498:	c8 db       	rcall	.-2160   	; 0xc2a <gfx_mono_st7565r_put_byte>
    149a:	c1 50       	subi	r28, 0x01	; 1
    149c:	a1 f7       	brne	.-24     	; 0x1486 <gfx_mono_generic_draw_horizontal_line+0x5c>
    149e:	21 c0       	rjmp	.+66     	; 0x14e2 <gfx_mono_generic_draw_horizontal_line+0xb8>
    14a0:	c4 2f       	mov	r28, r20
    14a2:	1f ef       	ldi	r17, 0xFF	; 255
    14a4:	18 0f       	add	r17, r24
    14a6:	fa 2e       	mov	r15, r26
    14a8:	f0 94       	com	r15
    14aa:	01 2f       	mov	r16, r17
    14ac:	0c 0f       	add	r16, r28
    14ae:	60 2f       	mov	r22, r16
    14b0:	8d 2f       	mov	r24, r29
    14b2:	da dc       	rcall	.-1612   	; 0xe68 <gfx_mono_st7565r_get_byte>
    14b4:	4f 2d       	mov	r20, r15
    14b6:	48 23       	and	r20, r24
    14b8:	60 2f       	mov	r22, r16
    14ba:	8d 2f       	mov	r24, r29
    14bc:	b6 db       	rcall	.-2196   	; 0xc2a <gfx_mono_st7565r_put_byte>
    14be:	c1 50       	subi	r28, 0x01	; 1
    14c0:	a1 f7       	brne	.-24     	; 0x14aa <gfx_mono_generic_draw_horizontal_line+0x80>
    14c2:	0f c0       	rjmp	.+30     	; 0x14e2 <gfx_mono_generic_draw_horizontal_line+0xb8>
    14c4:	c4 2f       	mov	r28, r20
    14c6:	1f ef       	ldi	r17, 0xFF	; 255
    14c8:	18 0f       	add	r17, r24
    14ca:	01 2f       	mov	r16, r17
    14cc:	0c 0f       	add	r16, r28
    14ce:	60 2f       	mov	r22, r16
    14d0:	8d 2f       	mov	r24, r29
    14d2:	ca dc       	rcall	.-1644   	; 0xe68 <gfx_mono_st7565r_get_byte>
    14d4:	4f 2d       	mov	r20, r15
    14d6:	48 27       	eor	r20, r24
    14d8:	60 2f       	mov	r22, r16
    14da:	8d 2f       	mov	r24, r29
    14dc:	a6 db       	rcall	.-2228   	; 0xc2a <gfx_mono_st7565r_put_byte>
    14de:	c1 50       	subi	r28, 0x01	; 1
    14e0:	a1 f7       	brne	.-24     	; 0x14ca <gfx_mono_generic_draw_horizontal_line+0xa0>
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	08 95       	ret

000014ee <gfx_mono_generic_draw_vertical_line>:
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	44 23       	and	r20, r20
    14fc:	09 f4       	brne	.+2      	; 0x1500 <gfx_mono_generic_draw_vertical_line+0x12>
    14fe:	46 c0       	rjmp	.+140    	; 0x158c <gfx_mono_generic_draw_vertical_line+0x9e>
    1500:	12 2f       	mov	r17, r18
    1502:	d8 2f       	mov	r29, r24
    1504:	9f ef       	ldi	r25, 0xFF	; 255
    1506:	96 0f       	add	r25, r22
    1508:	94 0f       	add	r25, r20
    150a:	69 13       	cpse	r22, r25
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <gfx_mono_generic_draw_vertical_line+0x26>
    150e:	42 2f       	mov	r20, r18
    1510:	75 dc       	rcall	.-1814   	; 0xdfc <gfx_mono_st7565r_draw_pixel>
    1512:	3c c0       	rjmp	.+120    	; 0x158c <gfx_mono_generic_draw_vertical_line+0x9e>
    1514:	9f 31       	cpi	r25, 0x1F	; 31
    1516:	08 f0       	brcs	.+2      	; 0x151a <gfx_mono_generic_draw_vertical_line+0x2c>
    1518:	9f e1       	ldi	r25, 0x1F	; 31
    151a:	c6 2f       	mov	r28, r22
    151c:	c6 95       	lsr	r28
    151e:	c6 95       	lsr	r28
    1520:	c6 95       	lsr	r28
    1522:	09 2f       	mov	r16, r25
    1524:	06 95       	lsr	r16
    1526:	06 95       	lsr	r16
    1528:	06 95       	lsr	r16
    152a:	67 70       	andi	r22, 0x07	; 7
    152c:	2f ef       	ldi	r18, 0xFF	; 255
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	a9 01       	movw	r20, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <gfx_mono_generic_draw_vertical_line+0x4a>
    1534:	44 0f       	add	r20, r20
    1536:	55 1f       	adc	r21, r21
    1538:	6a 95       	dec	r22
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <gfx_mono_generic_draw_vertical_line+0x46>
    153c:	97 70       	andi	r25, 0x07	; 7
    153e:	67 e0       	ldi	r22, 0x07	; 7
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	fb 01       	movw	r30, r22
    1544:	e9 1b       	sub	r30, r25
    1546:	f1 09       	sbc	r31, r1
    1548:	79 01       	movw	r14, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <gfx_mono_generic_draw_vertical_line+0x62>
    154c:	f5 94       	asr	r15
    154e:	e7 94       	ror	r14
    1550:	ea 95       	dec	r30
    1552:	e2 f7       	brpl	.-8      	; 0x154c <gfx_mono_generic_draw_vertical_line+0x5e>
    1554:	c0 13       	cpse	r28, r16
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <gfx_mono_generic_draw_vertical_line+0x76>
    1558:	4e 21       	and	r20, r14
    155a:	21 2f       	mov	r18, r17
    155c:	6d 2f       	mov	r22, r29
    155e:	8c 2f       	mov	r24, r28
    1560:	85 dc       	rcall	.-1782   	; 0xe6c <gfx_mono_st7565r_mask_byte>
    1562:	14 c0       	rjmp	.+40     	; 0x158c <gfx_mono_generic_draw_vertical_line+0x9e>
    1564:	21 2f       	mov	r18, r17
    1566:	6d 2f       	mov	r22, r29
    1568:	8c 2f       	mov	r24, r28
    156a:	80 dc       	rcall	.-1792   	; 0xe6c <gfx_mono_st7565r_mask_byte>
    156c:	cf 5f       	subi	r28, 0xFF	; 255
    156e:	c0 17       	cp	r28, r16
    1570:	40 f4       	brcc	.+16     	; 0x1582 <gfx_mono_generic_draw_vertical_line+0x94>
    1572:	21 2f       	mov	r18, r17
    1574:	4f ef       	ldi	r20, 0xFF	; 255
    1576:	6d 2f       	mov	r22, r29
    1578:	8c 2f       	mov	r24, r28
    157a:	78 dc       	rcall	.-1808   	; 0xe6c <gfx_mono_st7565r_mask_byte>
    157c:	cf 5f       	subi	r28, 0xFF	; 255
    157e:	c0 17       	cp	r28, r16
    1580:	c0 f3       	brcs	.-16     	; 0x1572 <gfx_mono_generic_draw_vertical_line+0x84>
    1582:	21 2f       	mov	r18, r17
    1584:	4e 2d       	mov	r20, r14
    1586:	6d 2f       	mov	r22, r29
    1588:	80 2f       	mov	r24, r16
    158a:	70 dc       	rcall	.-1824   	; 0xe6c <gfx_mono_st7565r_mask_byte>
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	08 95       	ret

0000159a <gfx_mono_generic_draw_rect>:
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	d8 2f       	mov	r29, r24
    15a6:	16 2f       	mov	r17, r22
    15a8:	c4 2f       	mov	r28, r20
    15aa:	f2 2e       	mov	r15, r18
    15ac:	20 2f       	mov	r18, r16
    15ae:	3d df       	rcall	.-390    	; 0x142a <gfx_mono_generic_draw_horizontal_line>
    15b0:	6f ef       	ldi	r22, 0xFF	; 255
    15b2:	6f 0d       	add	r22, r15
    15b4:	61 0f       	add	r22, r17
    15b6:	20 2f       	mov	r18, r16
    15b8:	4c 2f       	mov	r20, r28
    15ba:	8d 2f       	mov	r24, r29
    15bc:	36 df       	rcall	.-404    	; 0x142a <gfx_mono_generic_draw_horizontal_line>
    15be:	20 2f       	mov	r18, r16
    15c0:	4f 2d       	mov	r20, r15
    15c2:	61 2f       	mov	r22, r17
    15c4:	8d 2f       	mov	r24, r29
    15c6:	93 df       	rcall	.-218    	; 0x14ee <gfx_mono_generic_draw_vertical_line>
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	8c 0f       	add	r24, r28
    15cc:	20 2f       	mov	r18, r16
    15ce:	4f 2d       	mov	r20, r15
    15d0:	61 2f       	mov	r22, r17
    15d2:	8d 0f       	add	r24, r29
    15d4:	8c df       	rcall	.-232    	; 0x14ee <gfx_mono_generic_draw_vertical_line>
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	08 95       	ret

000015e2 <gfx_mono_generic_draw_filled_rect>:
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	22 23       	and	r18, r18
    15ee:	69 f0       	breq	.+26     	; 0x160a <gfx_mono_generic_draw_filled_rect+0x28>
    15f0:	f4 2e       	mov	r15, r20
    15f2:	18 2f       	mov	r17, r24
    15f4:	c2 2f       	mov	r28, r18
    15f6:	df ef       	ldi	r29, 0xFF	; 255
    15f8:	d6 0f       	add	r29, r22
    15fa:	6d 2f       	mov	r22, r29
    15fc:	6c 0f       	add	r22, r28
    15fe:	20 2f       	mov	r18, r16
    1600:	4f 2d       	mov	r20, r15
    1602:	81 2f       	mov	r24, r17
    1604:	12 df       	rcall	.-476    	; 0x142a <gfx_mono_generic_draw_horizontal_line>
    1606:	c1 50       	subi	r28, 0x01	; 1
    1608:	c1 f7       	brne	.-16     	; 0x15fa <gfx_mono_generic_draw_filled_rect+0x18>
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	08 95       	ret

00001616 <gfx_mono_generic_put_bitmap>:
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	7c 01       	movw	r14, r24
    1628:	d6 2e       	mov	r13, r22
	gfx_coord_t num_pages = bitmap->height / 8;
    162a:	dc 01       	movw	r26, r24
    162c:	11 96       	adiw	r26, 0x01	; 1
    162e:	cc 90       	ld	r12, X
    1630:	11 97       	sbiw	r26, 0x01	; 1
    1632:	c6 94       	lsr	r12
    1634:	c6 94       	lsr	r12
    1636:	c6 94       	lsr	r12
	gfx_coord_t page = y / 8;
    1638:	46 95       	lsr	r20
    163a:	46 95       	lsr	r20
    163c:	46 95       	lsr	r20
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
    163e:	12 96       	adiw	r26, 0x02	; 2
    1640:	8c 91       	ld	r24, X
    1642:	88 23       	and	r24, r24
    1644:	31 f0       	breq	.+12     	; 0x1652 <gfx_mono_generic_put_bitmap+0x3c>
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	09 f0       	breq	.+2      	; 0x164c <gfx_mono_generic_put_bitmap+0x36>
    164a:	45 c0       	rjmp	.+138    	; 0x16d6 <gfx_mono_generic_put_bitmap+0xc0>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    164c:	c1 10       	cpse	r12, r1
    164e:	23 c0       	rjmp	.+70     	; 0x1696 <gfx_mono_generic_put_bitmap+0x80>
    1650:	42 c0       	rjmp	.+132    	; 0x16d6 <gfx_mono_generic_put_bitmap+0xc0>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1652:	c1 10       	cpse	r12, r1
    1654:	28 c0       	rjmp	.+80     	; 0x16a6 <gfx_mono_generic_put_bitmap+0x90>
    1656:	3f c0       	rjmp	.+126    	; 0x16d6 <gfx_mono_generic_put_bitmap+0xc0>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    1658:	c0 e0       	ldi	r28, 0x00	; 0
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
    165a:	80 9f       	mul	r24, r16
    165c:	f0 01       	movw	r30, r0
    165e:	81 9f       	mul	r24, r17
    1660:	f0 0d       	add	r31, r0
    1662:	11 24       	eor	r1, r1
    1664:	ec 0f       	add	r30, r28
    1666:	f1 1d       	adc	r31, r1
    1668:	d7 01       	movw	r26, r14
    166a:	13 96       	adiw	r26, 0x03	; 3
    166c:	4d 91       	ld	r20, X+
    166e:	5c 91       	ld	r21, X
    1670:	14 97       	sbiw	r26, 0x04	; 4
    1672:	e4 0f       	add	r30, r20
    1674:	f5 1f       	adc	r31, r21
    1676:	44 91       	lpm	r20, Z
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
    1678:	6d 2d       	mov	r22, r13
    167a:	6c 0f       	add	r22, r28
    167c:	8d 2f       	mov	r24, r29
    167e:	d5 da       	rcall	.-2646   	; 0xc2a <gfx_mono_st7565r_put_byte>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    1680:	cf 5f       	subi	r28, 0xFF	; 255
    1682:	f7 01       	movw	r30, r14
    1684:	80 81       	ld	r24, Z
    1686:	c8 17       	cp	r28, r24
    1688:	40 f3       	brcs	.-48     	; 0x165a <gfx_mono_generic_put_bitmap+0x44>
    168a:	0f 5f       	subi	r16, 0xFF	; 255
    168c:	1f 4f       	sbci	r17, 0xFF	; 255
    168e:	df 5f       	subi	r29, 0xFF	; 255
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    1690:	0c 15       	cp	r16, r12
    1692:	20 f0       	brcs	.+8      	; 0x169c <gfx_mono_generic_put_bitmap+0x86>
    1694:	20 c0       	rjmp	.+64     	; 0x16d6 <gfx_mono_generic_put_bitmap+0xc0>
    1696:	d4 2f       	mov	r29, r20
    1698:	00 e0       	ldi	r16, 0x00	; 0
    169a:	10 e0       	ldi	r17, 0x00	; 0
			for (column = 0; column < bitmap->width; column++) {
    169c:	d7 01       	movw	r26, r14
    169e:	8c 91       	ld	r24, X
    16a0:	81 11       	cpse	r24, r1
    16a2:	da cf       	rjmp	.-76     	; 0x1658 <gfx_mono_generic_put_bitmap+0x42>
    16a4:	f2 cf       	rjmp	.-28     	; 0x168a <gfx_mono_generic_put_bitmap+0x74>
    16a6:	c4 0e       	add	r12, r20
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    16a8:	d4 2f       	mov	r29, r20
    16aa:	00 e0       	ldi	r16, 0x00	; 0
    16ac:	10 e0       	ldi	r17, 0x00	; 0
			gfx_mono_put_page(bitmap->data.pixmap
    16ae:	f7 01       	movw	r30, r14
    16b0:	20 81       	ld	r18, Z
    16b2:	20 9f       	mul	r18, r16
    16b4:	c0 01       	movw	r24, r0
    16b6:	21 9f       	mul	r18, r17
    16b8:	90 0d       	add	r25, r0
    16ba:	11 24       	eor	r1, r1
    16bc:	03 80       	ldd	r0, Z+3	; 0x03
    16be:	f4 81       	ldd	r31, Z+4	; 0x04
    16c0:	e0 2d       	mov	r30, r0
    16c2:	4d 2d       	mov	r20, r13
    16c4:	6d 2f       	mov	r22, r29
    16c6:	8e 0f       	add	r24, r30
    16c8:	9f 1f       	adc	r25, r31
    16ca:	dc d9       	rcall	.-3144   	; 0xa84 <gfx_mono_st7565r_put_page>
    16cc:	0f 5f       	subi	r16, 0xFF	; 255
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	df 5f       	subi	r29, 0xFF	; 255
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    16d2:	cd 12       	cpse	r12, r29
    16d4:	ec cf       	rjmp	.-40     	; 0x16ae <gfx_mono_generic_put_bitmap+0x98>
		break;

	default:
		break;
	}
}
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	08 95       	ret

000016e8 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	c8 2f       	mov	r28, r24
    16fe:	e6 2e       	mov	r14, r22
    1700:	b4 2e       	mov	r11, r20
    1702:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1704:	00 e0       	ldi	r16, 0x00	; 0
    1706:	f9 01       	movw	r30, r18
    1708:	24 81       	ldd	r18, Z+4	; 0x04
    170a:	43 81       	ldd	r20, Z+3	; 0x03
    170c:	6b 2d       	mov	r22, r11
    170e:	8e 2d       	mov	r24, r14
    1710:	68 df       	rcall	.-304    	; 0x15e2 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1712:	f6 01       	movw	r30, r12
    1714:	80 81       	ld	r24, Z
    1716:	81 11       	cpse	r24, r1
    1718:	39 c0       	rjmp	.+114    	; 0x178c <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    171a:	83 81       	ldd	r24, Z+3	; 0x03
    171c:	28 2f       	mov	r18, r24
    171e:	26 95       	lsr	r18
    1720:	26 95       	lsr	r18
    1722:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1724:	87 70       	andi	r24, 0x07	; 7
    1726:	09 f0       	breq	.+2      	; 0x172a <gfx_mono_draw_char+0x42>
		char_row_size++;
    1728:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    172a:	f6 01       	movw	r30, r12
    172c:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    172e:	8c 2f       	mov	r24, r28
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	35 81       	ldd	r19, Z+5	; 0x05
    1734:	83 1b       	sub	r24, r19
    1736:	91 09       	sbc	r25, r1
    1738:	2a 9d       	mul	r18, r10
    173a:	90 01       	movw	r18, r0
    173c:	11 24       	eor	r1, r1
    173e:	82 9f       	mul	r24, r18
    1740:	a0 01       	movw	r20, r0
    1742:	83 9f       	mul	r24, r19
    1744:	50 0d       	add	r21, r0
    1746:	92 9f       	mul	r25, r18
    1748:	50 0d       	add	r21, r0
    174a:	11 24       	eor	r1, r1
    174c:	01 81       	ldd	r16, Z+1	; 0x01
    174e:	12 81       	ldd	r17, Z+2	; 0x02
    1750:	04 0f       	add	r16, r20
    1752:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1754:	f6 01       	movw	r30, r12
    1756:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    1758:	ff 20       	and	r15, r15
    175a:	a1 f0       	breq	.+40     	; 0x1784 <gfx_mono_draw_char+0x9c>
    175c:	d0 e0       	ldi	r29, 0x00	; 0
    175e:	c0 e0       	ldi	r28, 0x00	; 0
    1760:	8e 2d       	mov	r24, r14
    1762:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1764:	9c 2f       	mov	r25, r28
    1766:	97 70       	andi	r25, 0x07	; 7
    1768:	21 f4       	brne	.+8      	; 0x1772 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    176a:	f8 01       	movw	r30, r16
    176c:	d4 91       	lpm	r29, Z
				glyph_data++;
    176e:	0f 5f       	subi	r16, 0xFF	; 255
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    1772:	dd 23       	and	r29, r29
    1774:	1c f4       	brge	.+6      	; 0x177c <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	6b 2d       	mov	r22, r11
    177a:	40 db       	rcall	.-2432   	; 0xdfc <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    177c:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    177e:	cf 5f       	subi	r28, 0xFF	; 255
    1780:	fc 12       	cpse	r15, r28
    1782:	ee cf       	rjmp	.-36     	; 0x1760 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1784:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    1786:	aa 94       	dec	r10
	} while (rows_left > 0);
    1788:	a1 10       	cpse	r10, r1
    178a:	e4 cf       	rjmp	.-56     	; 0x1754 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	08 95       	ret

000017a2 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	d6 2e       	mov	r13, r22
    17b2:	04 2f       	mov	r16, r20
    17b4:	79 01       	movw	r14, r18
    17b6:	ec 01       	movw	r28, r24
    17b8:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    17ba:	89 91       	ld	r24, Y+
    17bc:	8a 30       	cpi	r24, 0x0A	; 10
    17be:	31 f4       	brne	.+12     	; 0x17cc <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    17c0:	f7 01       	movw	r30, r14
    17c2:	84 81       	ldd	r24, Z+4	; 0x04
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    17c8:	1d 2d       	mov	r17, r13
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    17cc:	8d 30       	cpi	r24, 0x0D	; 13
    17ce:	39 f0       	breq	.+14     	; 0x17de <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    17d0:	97 01       	movw	r18, r14
    17d2:	40 2f       	mov	r20, r16
    17d4:	61 2f       	mov	r22, r17
    17d6:	88 df       	rcall	.-240    	; 0x16e8 <gfx_mono_draw_char>
			x += font->width;
    17d8:	f7 01       	movw	r30, r14
    17da:	83 81       	ldd	r24, Z+3	; 0x03
    17dc:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    17de:	88 81       	ld	r24, Y
    17e0:	81 11       	cpse	r24, r1
    17e2:	eb cf       	rjmp	.-42     	; 0x17ba <gfx_mono_draw_string+0x18>
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	08 95       	ret

000017f4 <gfx_mono_draw_progmem_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_progmem_string(char PROGMEM_PTR_T str, gfx_coord_t x,
		gfx_coord_t y, const struct font *font)
{
    17f4:	df 92       	push	r13
    17f6:	ef 92       	push	r14
    17f8:	ff 92       	push	r15
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	ec 01       	movw	r28, r24
    1804:	d6 2e       	mov	r13, r22
    1806:	04 2f       	mov	r16, r20
    1808:	79 01       	movw	r14, r18

	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
    180a:	fc 01       	movw	r30, r24
    180c:	84 91       	lpm	r24, Z

	while (temp_char) {
    180e:	88 23       	and	r24, r24
    1810:	b9 f0       	breq	.+46     	; 0x1840 <gfx_mono_draw_progmem_string+0x4c>
    1812:	16 2f       	mov	r17, r22
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
    1814:	8a 30       	cpi	r24, 0x0A	; 10
    1816:	31 f4       	brne	.+12     	; 0x1824 <gfx_mono_draw_progmem_string+0x30>
			x = start_of_string_position_x;
			y += font->height + 1;
    1818:	f7 01       	movw	r30, r14
    181a:	84 81       	ldd	r24, Z+4	; 0x04
    181c:	8f 5f       	subi	r24, 0xFF	; 255
    181e:	08 0f       	add	r16, r24
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
			x = start_of_string_position_x;
    1820:	1d 2d       	mov	r17, r13
    1822:	09 c0       	rjmp	.+18     	; 0x1836 <gfx_mono_draw_progmem_string+0x42>
			y += font->height + 1;
		} else if (temp_char == '\r') {
    1824:	8d 30       	cpi	r24, 0x0D	; 13
    1826:	39 f0       	breq	.+14     	; 0x1836 <gfx_mono_draw_progmem_string+0x42>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(temp_char, x, y, font);
    1828:	97 01       	movw	r18, r14
    182a:	40 2f       	mov	r20, r16
    182c:	61 2f       	mov	r22, r17
    182e:	5c df       	rcall	.-328    	; 0x16e8 <gfx_mono_draw_char>
			x += font->width;
    1830:	f7 01       	movw	r30, r14
    1832:	83 81       	ldd	r24, Z+3	; 0x03
    1834:	18 0f       	add	r17, r24
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
    1836:	21 96       	adiw	r28, 0x01	; 1
    1838:	fe 01       	movw	r30, r28
    183a:	84 91       	lpm	r24, Z
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
    183c:	81 11       	cpse	r24, r1
    183e:	ea cf       	rjmp	.-44     	; 0x1814 <gfx_mono_draw_progmem_string+0x20>
			x += font->width;
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
	}
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	ff 90       	pop	r15
    184a:	ef 90       	pop	r14
    184c:	df 90       	pop	r13
    184e:	08 95       	ret

00001850 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	1f 92       	push	r1
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    185a:	2f b7       	in	r18, 0x3f	; 63
    185c:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    185e:	f8 94       	cli
	return flags;
    1860:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1862:	28 2f       	mov	r18, r24
    1864:	39 2f       	mov	r19, r25
    1866:	21 15       	cp	r18, r1
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	38 07       	cpc	r19, r24
    186c:	29 f4       	brne	.+10     	; 0x1878 <adc_set_callback+0x28>
		adca_callback = callback;
    186e:	60 93 46 22 	sts	0x2246, r22	; 0x802246 <adca_callback>
    1872:	70 93 47 22 	sts	0x2247, r23	; 0x802247 <adca_callback+0x1>
    1876:	07 c0       	rjmp	.+14     	; 0x1886 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1878:	20 34       	cpi	r18, 0x40	; 64
    187a:	32 40       	sbci	r19, 0x02	; 2
    187c:	21 f4       	brne	.+8      	; 0x1886 <adc_set_callback+0x36>
		adcb_callback = callback;
    187e:	60 93 44 22 	sts	0x2244, r22	; 0x802244 <adcb_callback>
    1882:	70 93 45 22 	sts	0x2245, r23	; 0x802245 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1886:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    1888:	0f 90       	pop	r0
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	08 95       	ret

00001890 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1890:	81 15       	cp	r24, r1
    1892:	22 e0       	ldi	r18, 0x02	; 2
    1894:	92 07       	cpc	r25, r18
    1896:	61 f4       	brne	.+24     	; 0x18b0 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    1898:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <adca_enable_count>
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	98 0f       	add	r25, r24
    18a0:	90 93 43 22 	sts	0x2243, r25	; 0x802243 <adca_enable_count>
    18a4:	81 11       	cpse	r24, r1
    18a6:	12 c0       	rjmp	.+36     	; 0x18cc <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    18a8:	62 e0       	ldi	r22, 0x02	; 2
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	4a c3       	rjmp	.+1684   	; 0x1f42 <sysclk_enable_module>
    18ae:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    18b0:	80 34       	cpi	r24, 0x40	; 64
    18b2:	92 40       	sbci	r25, 0x02	; 2
    18b4:	59 f4       	brne	.+22     	; 0x18cc <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    18b6:	80 91 42 22 	lds	r24, 0x2242	; 0x802242 <adcb_enable_count>
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	98 0f       	add	r25, r24
    18be:	90 93 42 22 	sts	0x2242, r25	; 0x802242 <adcb_enable_count>
    18c2:	81 11       	cpse	r24, r1
    18c4:	03 c0       	rjmp	.+6      	; 0x18cc <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    18c6:	62 e0       	ldi	r22, 0x02	; 2
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	3b c3       	rjmp	.+1654   	; 0x1f42 <sysclk_enable_module>
    18cc:	08 95       	ret

000018ce <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    18ce:	81 15       	cp	r24, r1
    18d0:	22 e0       	ldi	r18, 0x02	; 2
    18d2:	92 07       	cpc	r25, r18
    18d4:	59 f4       	brne	.+22     	; 0x18ec <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    18d6:	80 91 43 22 	lds	r24, 0x2243	; 0x802243 <adca_enable_count>
    18da:	81 50       	subi	r24, 0x01	; 1
    18dc:	80 93 43 22 	sts	0x2243, r24	; 0x802243 <adca_enable_count>
    18e0:	81 11       	cpse	r24, r1
    18e2:	11 c0       	rjmp	.+34     	; 0x1906 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    18e4:	62 e0       	ldi	r22, 0x02	; 2
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	42 c3       	rjmp	.+1668   	; 0x1f6e <sysclk_disable_module>
    18ea:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    18ec:	80 34       	cpi	r24, 0x40	; 64
    18ee:	92 40       	sbci	r25, 0x02	; 2
    18f0:	51 f4       	brne	.+20     	; 0x1906 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    18f2:	80 91 42 22 	lds	r24, 0x2242	; 0x802242 <adcb_enable_count>
    18f6:	81 50       	subi	r24, 0x01	; 1
    18f8:	80 93 42 22 	sts	0x2242, r24	; 0x802242 <adcb_enable_count>
    18fc:	81 11       	cpse	r24, r1
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1900:	62 e0       	ldi	r22, 0x02	; 2
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	34 c3       	rjmp	.+1640   	; 0x1f6e <sysclk_disable_module>
    1906:	08 95       	ret

00001908 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	1f 92       	push	r1
    1914:	1f 92       	push	r1
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    191c:	8f b7       	in	r24, 0x3f	; 63
    191e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1920:	f8 94       	cli
	return flags;
    1922:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    1924:	c7 01       	movw	r24, r14
    1926:	b4 df       	rcall	.-152    	; 0x1890 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    1928:	f7 01       	movw	r30, r14
    192a:	80 81       	ld	r24, Z
    192c:	81 60       	ori	r24, 0x01	; 1
    192e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1930:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1932:	80 91 49 22 	lds	r24, 0x2249	; 0x802249 <sleepmgr_locks+0x1>
    1936:	8f 3f       	cpi	r24, 0xFF	; 255
    1938:	09 f4       	brne	.+2      	; 0x193c <adc_enable+0x34>
    193a:	ff cf       	rjmp	.-2      	; 0x193a <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    193c:	8f b7       	in	r24, 0x3f	; 63
    193e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1940:	f8 94       	cli
	return flags;
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1944:	e8 e4       	ldi	r30, 0x48	; 72
    1946:	f2 e2       	ldi	r31, 0x22	; 34
    1948:	81 81       	ldd	r24, Z+1	; 0x01
    194a:	8f 5f       	subi	r24, 0xFF	; 255
    194c:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    194e:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	08 95       	ret

00001960 <read_temperature>:

/**
 * \brief The NTC Temperature application
 */
int16_t read_temperature(void)
{
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	1f 92       	push	r1
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    196a:	8f b7       	in	r24, 0x3f	; 63
    196c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    196e:	f8 94       	cli
	return flags;
    1970:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    1972:	e0 e0       	ldi	r30, 0x00	; 0
    1974:	f2 e0       	ldi	r31, 0x02	; 2
    1976:	80 81       	ld	r24, Z
    1978:	88 60       	ori	r24, 0x08	; 8
    197a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    197c:	9f bf       	out	0x3f, r25	; 63
	
	// Initiate a temperature sensor reading
	ntc_measure();

	// wait for NTC data to ready
	while (!ntc_data_is_ready());
    197e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <ntc_data_is_ready>
    1982:	88 23       	and	r24, r24
    1984:	e1 f3       	breq	.-8      	; 0x197e <read_temperature+0x1e>
	
	// Read the temperature once the ADC reading is done
	temperature = ntc_get_temperature();
    1986:	0e 94 43 03 	call	0x686	; 0x686 <ntc_get_temperature>
	
	return(temperature); 
}
    198a:	08 2e       	mov	r0, r24
    198c:	00 0c       	add	r0, r0
    198e:	99 0b       	sbc	r25, r25
    1990:	0f 90       	pop	r0
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    1998:	1f 92       	push	r1
    199a:	0f 92       	push	r0
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	0f 92       	push	r0
    19a0:	11 24       	eor	r1, r1
    19a2:	0b b6       	in	r0, 0x3b	; 59
    19a4:	0f 92       	push	r0
    19a6:	2f 93       	push	r18
    19a8:	3f 93       	push	r19
    19aa:	4f 93       	push	r20
    19ac:	5f 93       	push	r21
    19ae:	6f 93       	push	r22
    19b0:	7f 93       	push	r23
    19b2:	8f 93       	push	r24
    19b4:	9f 93       	push	r25
    19b6:	af 93       	push	r26
    19b8:	bf 93       	push	r27
    19ba:	ef 93       	push	r30
    19bc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    19be:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    19c2:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    19c6:	e0 91 46 22 	lds	r30, 0x2246	; 0x802246 <adca_callback>
    19ca:	f0 91 47 22 	lds	r31, 0x2247	; 0x802247 <adca_callback+0x1>
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	92 e0       	ldi	r25, 0x02	; 2
    19d4:	19 95       	eicall
}
    19d6:	ff 91       	pop	r31
    19d8:	ef 91       	pop	r30
    19da:	bf 91       	pop	r27
    19dc:	af 91       	pop	r26
    19de:	9f 91       	pop	r25
    19e0:	8f 91       	pop	r24
    19e2:	7f 91       	pop	r23
    19e4:	6f 91       	pop	r22
    19e6:	5f 91       	pop	r21
    19e8:	4f 91       	pop	r20
    19ea:	3f 91       	pop	r19
    19ec:	2f 91       	pop	r18
    19ee:	0f 90       	pop	r0
    19f0:	0b be       	out	0x3b, r0	; 59
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	0f 90       	pop	r0
    19f8:	1f 90       	pop	r1
    19fa:	18 95       	reti

000019fc <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    19fc:	1f 92       	push	r1
    19fe:	0f 92       	push	r0
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	0f 92       	push	r0
    1a04:	11 24       	eor	r1, r1
    1a06:	0b b6       	in	r0, 0x3b	; 59
    1a08:	0f 92       	push	r0
    1a0a:	2f 93       	push	r18
    1a0c:	3f 93       	push	r19
    1a0e:	4f 93       	push	r20
    1a10:	5f 93       	push	r21
    1a12:	6f 93       	push	r22
    1a14:	7f 93       	push	r23
    1a16:	8f 93       	push	r24
    1a18:	9f 93       	push	r25
    1a1a:	af 93       	push	r26
    1a1c:	bf 93       	push	r27
    1a1e:	ef 93       	push	r30
    1a20:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    1a22:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    1a26:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    1a2a:	e0 91 46 22 	lds	r30, 0x2246	; 0x802246 <adca_callback>
    1a2e:	f0 91 47 22 	lds	r31, 0x2247	; 0x802247 <adca_callback+0x1>
    1a32:	62 e0       	ldi	r22, 0x02	; 2
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	92 e0       	ldi	r25, 0x02	; 2
    1a38:	19 95       	eicall
}
    1a3a:	ff 91       	pop	r31
    1a3c:	ef 91       	pop	r30
    1a3e:	bf 91       	pop	r27
    1a40:	af 91       	pop	r26
    1a42:	9f 91       	pop	r25
    1a44:	8f 91       	pop	r24
    1a46:	7f 91       	pop	r23
    1a48:	6f 91       	pop	r22
    1a4a:	5f 91       	pop	r21
    1a4c:	4f 91       	pop	r20
    1a4e:	3f 91       	pop	r19
    1a50:	2f 91       	pop	r18
    1a52:	0f 90       	pop	r0
    1a54:	0b be       	out	0x3b, r0	; 59
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	0f 90       	pop	r0
    1a5c:	1f 90       	pop	r1
    1a5e:	18 95       	reti

00001a60 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1a60:	1f 92       	push	r1
    1a62:	0f 92       	push	r0
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	0f 92       	push	r0
    1a68:	11 24       	eor	r1, r1
    1a6a:	0b b6       	in	r0, 0x3b	; 59
    1a6c:	0f 92       	push	r0
    1a6e:	2f 93       	push	r18
    1a70:	3f 93       	push	r19
    1a72:	4f 93       	push	r20
    1a74:	5f 93       	push	r21
    1a76:	6f 93       	push	r22
    1a78:	7f 93       	push	r23
    1a7a:	8f 93       	push	r24
    1a7c:	9f 93       	push	r25
    1a7e:	af 93       	push	r26
    1a80:	bf 93       	push	r27
    1a82:	ef 93       	push	r30
    1a84:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1a86:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    1a8a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    1a8e:	e0 91 46 22 	lds	r30, 0x2246	; 0x802246 <adca_callback>
    1a92:	f0 91 47 22 	lds	r31, 0x2247	; 0x802247 <adca_callback+0x1>
    1a96:	64 e0       	ldi	r22, 0x04	; 4
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	92 e0       	ldi	r25, 0x02	; 2
    1a9c:	19 95       	eicall
}
    1a9e:	ff 91       	pop	r31
    1aa0:	ef 91       	pop	r30
    1aa2:	bf 91       	pop	r27
    1aa4:	af 91       	pop	r26
    1aa6:	9f 91       	pop	r25
    1aa8:	8f 91       	pop	r24
    1aaa:	7f 91       	pop	r23
    1aac:	6f 91       	pop	r22
    1aae:	5f 91       	pop	r21
    1ab0:	4f 91       	pop	r20
    1ab2:	3f 91       	pop	r19
    1ab4:	2f 91       	pop	r18
    1ab6:	0f 90       	pop	r0
    1ab8:	0b be       	out	0x3b, r0	; 59
    1aba:	0f 90       	pop	r0
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	0f 90       	pop	r0
    1ac0:	1f 90       	pop	r1
    1ac2:	18 95       	reti

00001ac4 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    1ac4:	1f 92       	push	r1
    1ac6:	0f 92       	push	r0
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	0f 92       	push	r0
    1acc:	11 24       	eor	r1, r1
    1ace:	0b b6       	in	r0, 0x3b	; 59
    1ad0:	0f 92       	push	r0
    1ad2:	2f 93       	push	r18
    1ad4:	3f 93       	push	r19
    1ad6:	4f 93       	push	r20
    1ad8:	5f 93       	push	r21
    1ada:	6f 93       	push	r22
    1adc:	7f 93       	push	r23
    1ade:	8f 93       	push	r24
    1ae0:	9f 93       	push	r25
    1ae2:	af 93       	push	r26
    1ae4:	bf 93       	push	r27
    1ae6:	ef 93       	push	r30
    1ae8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1aea:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    1aee:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    1af2:	e0 91 46 22 	lds	r30, 0x2246	; 0x802246 <adca_callback>
    1af6:	f0 91 47 22 	lds	r31, 0x2247	; 0x802247 <adca_callback+0x1>
    1afa:	68 e0       	ldi	r22, 0x08	; 8
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	92 e0       	ldi	r25, 0x02	; 2
    1b00:	19 95       	eicall
}
    1b02:	ff 91       	pop	r31
    1b04:	ef 91       	pop	r30
    1b06:	bf 91       	pop	r27
    1b08:	af 91       	pop	r26
    1b0a:	9f 91       	pop	r25
    1b0c:	8f 91       	pop	r24
    1b0e:	7f 91       	pop	r23
    1b10:	6f 91       	pop	r22
    1b12:	5f 91       	pop	r21
    1b14:	4f 91       	pop	r20
    1b16:	3f 91       	pop	r19
    1b18:	2f 91       	pop	r18
    1b1a:	0f 90       	pop	r0
    1b1c:	0b be       	out	0x3b, r0	; 59
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	0f 90       	pop	r0
    1b24:	1f 90       	pop	r1
    1b26:	18 95       	reti

00001b28 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1b28:	1f 92       	push	r1
    1b2a:	0f 92       	push	r0
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	0f 92       	push	r0
    1b30:	11 24       	eor	r1, r1
    1b32:	0b b6       	in	r0, 0x3b	; 59
    1b34:	0f 92       	push	r0
    1b36:	2f 93       	push	r18
    1b38:	3f 93       	push	r19
    1b3a:	4f 93       	push	r20
    1b3c:	5f 93       	push	r21
    1b3e:	6f 93       	push	r22
    1b40:	7f 93       	push	r23
    1b42:	8f 93       	push	r24
    1b44:	9f 93       	push	r25
    1b46:	af 93       	push	r26
    1b48:	bf 93       	push	r27
    1b4a:	ef 93       	push	r30
    1b4c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1b4e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    1b52:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    1b56:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <adcb_callback>
    1b5a:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <adcb_callback+0x1>
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	80 e4       	ldi	r24, 0x40	; 64
    1b62:	92 e0       	ldi	r25, 0x02	; 2
    1b64:	19 95       	eicall
}
    1b66:	ff 91       	pop	r31
    1b68:	ef 91       	pop	r30
    1b6a:	bf 91       	pop	r27
    1b6c:	af 91       	pop	r26
    1b6e:	9f 91       	pop	r25
    1b70:	8f 91       	pop	r24
    1b72:	7f 91       	pop	r23
    1b74:	6f 91       	pop	r22
    1b76:	5f 91       	pop	r21
    1b78:	4f 91       	pop	r20
    1b7a:	3f 91       	pop	r19
    1b7c:	2f 91       	pop	r18
    1b7e:	0f 90       	pop	r0
    1b80:	0b be       	out	0x3b, r0	; 59
    1b82:	0f 90       	pop	r0
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	0f 90       	pop	r0
    1b88:	1f 90       	pop	r1
    1b8a:	18 95       	reti

00001b8c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1b8c:	1f 92       	push	r1
    1b8e:	0f 92       	push	r0
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	0f 92       	push	r0
    1b94:	11 24       	eor	r1, r1
    1b96:	0b b6       	in	r0, 0x3b	; 59
    1b98:	0f 92       	push	r0
    1b9a:	2f 93       	push	r18
    1b9c:	3f 93       	push	r19
    1b9e:	4f 93       	push	r20
    1ba0:	5f 93       	push	r21
    1ba2:	6f 93       	push	r22
    1ba4:	7f 93       	push	r23
    1ba6:	8f 93       	push	r24
    1ba8:	9f 93       	push	r25
    1baa:	af 93       	push	r26
    1bac:	bf 93       	push	r27
    1bae:	ef 93       	push	r30
    1bb0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1bb2:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    1bb6:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    1bba:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <adcb_callback>
    1bbe:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <adcb_callback+0x1>
    1bc2:	62 e0       	ldi	r22, 0x02	; 2
    1bc4:	80 e4       	ldi	r24, 0x40	; 64
    1bc6:	92 e0       	ldi	r25, 0x02	; 2
    1bc8:	19 95       	eicall
}
    1bca:	ff 91       	pop	r31
    1bcc:	ef 91       	pop	r30
    1bce:	bf 91       	pop	r27
    1bd0:	af 91       	pop	r26
    1bd2:	9f 91       	pop	r25
    1bd4:	8f 91       	pop	r24
    1bd6:	7f 91       	pop	r23
    1bd8:	6f 91       	pop	r22
    1bda:	5f 91       	pop	r21
    1bdc:	4f 91       	pop	r20
    1bde:	3f 91       	pop	r19
    1be0:	2f 91       	pop	r18
    1be2:	0f 90       	pop	r0
    1be4:	0b be       	out	0x3b, r0	; 59
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	0f 90       	pop	r0
    1bec:	1f 90       	pop	r1
    1bee:	18 95       	reti

00001bf0 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1bf0:	1f 92       	push	r1
    1bf2:	0f 92       	push	r0
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	0f 92       	push	r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	0b b6       	in	r0, 0x3b	; 59
    1bfc:	0f 92       	push	r0
    1bfe:	2f 93       	push	r18
    1c00:	3f 93       	push	r19
    1c02:	4f 93       	push	r20
    1c04:	5f 93       	push	r21
    1c06:	6f 93       	push	r22
    1c08:	7f 93       	push	r23
    1c0a:	8f 93       	push	r24
    1c0c:	9f 93       	push	r25
    1c0e:	af 93       	push	r26
    1c10:	bf 93       	push	r27
    1c12:	ef 93       	push	r30
    1c14:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1c16:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    1c1a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    1c1e:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <adcb_callback>
    1c22:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <adcb_callback+0x1>
    1c26:	64 e0       	ldi	r22, 0x04	; 4
    1c28:	80 e4       	ldi	r24, 0x40	; 64
    1c2a:	92 e0       	ldi	r25, 0x02	; 2
    1c2c:	19 95       	eicall
}
    1c2e:	ff 91       	pop	r31
    1c30:	ef 91       	pop	r30
    1c32:	bf 91       	pop	r27
    1c34:	af 91       	pop	r26
    1c36:	9f 91       	pop	r25
    1c38:	8f 91       	pop	r24
    1c3a:	7f 91       	pop	r23
    1c3c:	6f 91       	pop	r22
    1c3e:	5f 91       	pop	r21
    1c40:	4f 91       	pop	r20
    1c42:	3f 91       	pop	r19
    1c44:	2f 91       	pop	r18
    1c46:	0f 90       	pop	r0
    1c48:	0b be       	out	0x3b, r0	; 59
    1c4a:	0f 90       	pop	r0
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	0f 90       	pop	r0
    1c50:	1f 90       	pop	r1
    1c52:	18 95       	reti

00001c54 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1c54:	1f 92       	push	r1
    1c56:	0f 92       	push	r0
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	0f 92       	push	r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	0b b6       	in	r0, 0x3b	; 59
    1c60:	0f 92       	push	r0
    1c62:	2f 93       	push	r18
    1c64:	3f 93       	push	r19
    1c66:	4f 93       	push	r20
    1c68:	5f 93       	push	r21
    1c6a:	6f 93       	push	r22
    1c6c:	7f 93       	push	r23
    1c6e:	8f 93       	push	r24
    1c70:	9f 93       	push	r25
    1c72:	af 93       	push	r26
    1c74:	bf 93       	push	r27
    1c76:	ef 93       	push	r30
    1c78:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1c7a:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    1c7e:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    1c82:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <adcb_callback>
    1c86:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <adcb_callback+0x1>
    1c8a:	68 e0       	ldi	r22, 0x08	; 8
    1c8c:	80 e4       	ldi	r24, 0x40	; 64
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
    1c90:	19 95       	eicall
}
    1c92:	ff 91       	pop	r31
    1c94:	ef 91       	pop	r30
    1c96:	bf 91       	pop	r27
    1c98:	af 91       	pop	r26
    1c9a:	9f 91       	pop	r25
    1c9c:	8f 91       	pop	r24
    1c9e:	7f 91       	pop	r23
    1ca0:	6f 91       	pop	r22
    1ca2:	5f 91       	pop	r21
    1ca4:	4f 91       	pop	r20
    1ca6:	3f 91       	pop	r19
    1ca8:	2f 91       	pop	r18
    1caa:	0f 90       	pop	r0
    1cac:	0b be       	out	0x3b, r0	; 59
    1cae:	0f 90       	pop	r0
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	0f 90       	pop	r0
    1cb4:	1f 90       	pop	r1
    1cb6:	18 95       	reti

00001cb8 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1cb8:	bf 92       	push	r11
    1cba:	cf 92       	push	r12
    1cbc:	df 92       	push	r13
    1cbe:	ef 92       	push	r14
    1cc0:	ff 92       	push	r15
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	1f 92       	push	r1
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	8c 01       	movw	r16, r24
    1cd2:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1cd4:	81 15       	cp	r24, r1
    1cd6:	22 e0       	ldi	r18, 0x02	; 2
    1cd8:	92 07       	cpc	r25, r18
    1cda:	71 f4       	brne	.+28     	; 0x1cf8 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1cdc:	61 e2       	ldi	r22, 0x21	; 33
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	b3 d1       	rcall	.+870    	; 0x204a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1ce4:	c8 2e       	mov	r12, r24
    1ce6:	d1 2c       	mov	r13, r1
    1ce8:	60 e2       	ldi	r22, 0x20	; 32
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	ad d1       	rcall	.+858    	; 0x204a <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    1cf0:	dc 2c       	mov	r13, r12
    1cf2:	cc 24       	eor	r12, r12
    1cf4:	c8 2a       	or	r12, r24
    1cf6:	10 c0       	rjmp	.+32     	; 0x1d18 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1cf8:	80 34       	cpi	r24, 0x40	; 64
    1cfa:	92 40       	sbci	r25, 0x02	; 2
    1cfc:	c1 f5       	brne	.+112    	; 0x1d6e <adc_write_configuration+0xb6>
    1cfe:	65 e2       	ldi	r22, 0x25	; 37
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	a2 d1       	rcall	.+836    	; 0x204a <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1d06:	c8 2e       	mov	r12, r24
    1d08:	d1 2c       	mov	r13, r1
    1d0a:	64 e2       	ldi	r22, 0x24	; 36
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	9c d1       	rcall	.+824    	; 0x204a <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1d12:	dc 2c       	mov	r13, r12
    1d14:	cc 24       	eor	r12, r12
    1d16:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d18:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1d1a:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    1d1c:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1d1e:	b9 80       	ldd	r11, Y+1	; 0x01
    1d20:	c8 01       	movw	r24, r16
    1d22:	b6 dd       	rcall	.-1172   	; 0x1890 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1d24:	f8 01       	movw	r30, r16
    1d26:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    1d28:	92 e0       	ldi	r25, 0x02	; 2
    1d2a:	90 83       	st	Z, r25
	adc->CAL = cal;
    1d2c:	c4 86       	std	Z+12, r12	; 0x0c
    1d2e:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    1d30:	f7 01       	movw	r30, r14
    1d32:	25 81       	ldd	r18, Z+5	; 0x05
    1d34:	36 81       	ldd	r19, Z+6	; 0x06
    1d36:	f8 01       	movw	r30, r16
    1d38:	20 8f       	std	Z+24, r18	; 0x18
    1d3a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1d3c:	f7 01       	movw	r30, r14
    1d3e:	92 81       	ldd	r25, Z+2	; 0x02
    1d40:	f8 01       	movw	r30, r16
    1d42:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    1d44:	f7 01       	movw	r30, r14
    1d46:	94 81       	ldd	r25, Z+4	; 0x04
    1d48:	f8 01       	movw	r30, r16
    1d4a:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    1d4c:	f7 01       	movw	r30, r14
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	f8 01       	movw	r30, r16
    1d52:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1d54:	f7 01       	movw	r30, r14
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	f8 01       	movw	r30, r16
    1d5a:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    1d5c:	81 70       	andi	r24, 0x01	; 1
    1d5e:	f7 01       	movw	r30, r14
    1d60:	90 81       	ld	r25, Z
    1d62:	89 2b       	or	r24, r25
    1d64:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    1d66:	80 83       	st	Z, r24
    1d68:	c8 01       	movw	r24, r16
    1d6a:	b1 dd       	rcall	.-1182   	; 0x18ce <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d6c:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    1d6e:	0f 90       	pop	r0
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	ff 90       	pop	r15
    1d7a:	ef 90       	pop	r14
    1d7c:	df 90       	pop	r13
    1d7e:	cf 90       	pop	r12
    1d80:	bf 90       	pop	r11
    1d82:	08 95       	ret

00001d84 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1d84:	df 92       	push	r13
    1d86:	ef 92       	push	r14
    1d88:	ff 92       	push	r15
    1d8a:	0f 93       	push	r16
    1d8c:	1f 93       	push	r17
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	1f 92       	push	r1
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	8c 01       	movw	r16, r24
    1d9a:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d9c:	8f b7       	in	r24, 0x3f	; 63
    1d9e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1da0:	f8 94       	cli
	return flags;
    1da2:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1da4:	c8 01       	movw	r24, r16
    1da6:	74 dd       	rcall	.-1304   	; 0x1890 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1da8:	f8 01       	movw	r30, r16
    1daa:	80 81       	ld	r24, Z
    1dac:	80 7c       	andi	r24, 0xC0	; 192
    1dae:	f7 01       	movw	r30, r14
    1db0:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1db2:	f8 01       	movw	r30, r16
    1db4:	80 8d       	ldd	r24, Z+24	; 0x18
    1db6:	91 8d       	ldd	r25, Z+25	; 0x19
    1db8:	f7 01       	movw	r30, r14
    1dba:	85 83       	std	Z+5, r24	; 0x05
    1dbc:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	f7 01       	movw	r30, r14
    1dc4:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	84 81       	ldd	r24, Z+4	; 0x04
    1dca:	f7 01       	movw	r30, r14
    1dcc:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1dce:	f8 01       	movw	r30, r16
    1dd0:	83 81       	ldd	r24, Z+3	; 0x03
    1dd2:	f7 01       	movw	r30, r14
    1dd4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	81 81       	ldd	r24, Z+1	; 0x01
    1dda:	f7 01       	movw	r30, r14
    1ddc:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    1dde:	c8 01       	movw	r24, r16
    1de0:	76 dd       	rcall	.-1300   	; 0x18ce <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1de2:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1de4:	0f 90       	pop	r0
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	08 95       	ret

00001df6 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1df6:	af 92       	push	r10
    1df8:	bf 92       	push	r11
    1dfa:	cf 92       	push	r12
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	1f 92       	push	r1
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	6c 01       	movw	r12, r24
    1e12:	b6 2e       	mov	r11, r22
    1e14:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1e16:	86 2f       	mov	r24, r22
    1e18:	83 70       	andi	r24, 0x03	; 3
    1e1a:	29 f4       	brne	.+10     	; 0x1e26 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1e1c:	96 2f       	mov	r25, r22
    1e1e:	96 95       	lsr	r25
    1e20:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1e26:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1e28:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1e2a:	90 ff       	sbrs	r25, 0
		index++;
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1e2e:	86 01       	movw	r16, r12
    1e30:	00 5e       	subi	r16, 0xE0	; 224
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	98 e0       	ldi	r25, 0x08	; 8
    1e36:	89 9f       	mul	r24, r25
    1e38:	00 0d       	add	r16, r0
    1e3a:	11 1d       	adc	r17, r1
    1e3c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1e3e:	8f b7       	in	r24, 0x3f	; 63
    1e40:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1e42:	f8 94       	cli
	return flags;
    1e44:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1e46:	c6 01       	movw	r24, r12
    1e48:	23 dd       	rcall	.-1466   	; 0x1890 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1e4a:	f7 01       	movw	r30, r14
    1e4c:	80 81       	ld	r24, Z
    1e4e:	f8 01       	movw	r30, r16
    1e50:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1e52:	f7 01       	movw	r30, r14
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	f8 01       	movw	r30, r16
    1e58:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1e5a:	f7 01       	movw	r30, r14
    1e5c:	81 81       	ldd	r24, Z+1	; 0x01
    1e5e:	f8 01       	movw	r30, r16
    1e60:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1e62:	b0 fe       	sbrs	r11, 0
    1e64:	04 c0       	rjmp	.+8      	; 0x1e6e <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1e66:	f7 01       	movw	r30, r14
    1e68:	83 81       	ldd	r24, Z+3	; 0x03
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1e6e:	c6 01       	movw	r24, r12
    1e70:	2e dd       	rcall	.-1444   	; 0x18ce <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1e72:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1e74:	0f 90       	pop	r0
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	bf 90       	pop	r11
    1e88:	af 90       	pop	r10
    1e8a:	08 95       	ret

00001e8c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1e8c:	af 92       	push	r10
    1e8e:	bf 92       	push	r11
    1e90:	cf 92       	push	r12
    1e92:	df 92       	push	r13
    1e94:	ef 92       	push	r14
    1e96:	ff 92       	push	r15
    1e98:	0f 93       	push	r16
    1e9a:	1f 93       	push	r17
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	1f 92       	push	r1
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	6c 01       	movw	r12, r24
    1ea8:	b6 2e       	mov	r11, r22
    1eaa:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1eac:	86 2f       	mov	r24, r22
    1eae:	83 70       	andi	r24, 0x03	; 3
    1eb0:	29 f4       	brne	.+10     	; 0x1ebc <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1eb2:	96 2f       	mov	r25, r22
    1eb4:	96 95       	lsr	r25
    1eb6:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1ebc:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1ec0:	90 ff       	sbrs	r25, 0
		index++;
    1ec2:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1ec4:	86 01       	movw	r16, r12
    1ec6:	00 5e       	subi	r16, 0xE0	; 224
    1ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eca:	98 e0       	ldi	r25, 0x08	; 8
    1ecc:	89 9f       	mul	r24, r25
    1ece:	00 0d       	add	r16, r0
    1ed0:	11 1d       	adc	r17, r1
    1ed2:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ed4:	8f b7       	in	r24, 0x3f	; 63
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1ed8:	f8 94       	cli
	return flags;
    1eda:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1edc:	c6 01       	movw	r24, r12
    1ede:	d8 dc       	rcall	.-1616   	; 0x1890 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1ee0:	f8 01       	movw	r30, r16
    1ee2:	80 81       	ld	r24, Z
    1ee4:	f7 01       	movw	r30, r14
    1ee6:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1ee8:	f8 01       	movw	r30, r16
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	f7 01       	movw	r30, r14
    1eee:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	81 81       	ldd	r24, Z+1	; 0x01
    1ef4:	f7 01       	movw	r30, r14
    1ef6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1ef8:	b0 fe       	sbrs	r11, 0
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1efc:	f8 01       	movw	r30, r16
    1efe:	86 81       	ldd	r24, Z+6	; 0x06
    1f00:	f7 01       	movw	r30, r14
    1f02:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1f04:	c6 01       	movw	r24, r12
    1f06:	e3 dc       	rcall	.-1594   	; 0x18ce <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f08:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1f0a:	0f 90       	pop	r0
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	08 95       	ret

00001f22 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1f28:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1f2c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1f30:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1f34:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1f38:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1f3c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    1f40:	08 95       	ret

00001f42 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	1f 92       	push	r1
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f4c:	9f b7       	in	r25, 0x3f	; 63
    1f4e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1f50:	f8 94       	cli
	return flags;
    1f52:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1f54:	e8 2f       	mov	r30, r24
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	e0 59       	subi	r30, 0x90	; 144
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	60 95       	com	r22
    1f5e:	80 81       	ld	r24, Z
    1f60:	68 23       	and	r22, r24
    1f62:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f64:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1f66:	0f 90       	pop	r0
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	08 95       	ret

00001f6e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	1f 92       	push	r1
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f78:	9f b7       	in	r25, 0x3f	; 63
    1f7a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1f7c:	f8 94       	cli
	return flags;
    1f7e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1f80:	e8 2f       	mov	r30, r24
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	e0 59       	subi	r30, 0x90	; 144
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	68 2b       	or	r22, r24
    1f8c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f8e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1f90:	0f 90       	pop	r0
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	08 95       	ret

00001f98 <nvm_eeprom_read_byte>:
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
	eeprom_disable_mapping();
}
    1f98:	dc 01       	movw	r26, r24
    1f9a:	e0 ec       	ldi	r30, 0xC0	; 192
    1f9c:	f1 e0       	ldi	r31, 0x01	; 1
    1f9e:	97 85       	ldd	r25, Z+15	; 0x0f
    1fa0:	99 23       	and	r25, r25
    1fa2:	ec f3       	brlt	.-6      	; 0x1f9e <nvm_eeprom_read_byte+0x6>
    1fa4:	ec ec       	ldi	r30, 0xCC	; 204
    1fa6:	f1 e0       	ldi	r31, 0x01	; 1
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 60       	ori	r24, 0x08	; 8
    1fac:	80 83       	st	Z, r24
    1fae:	b0 5f       	subi	r27, 0xF0	; 240
    1fb0:	8c 91       	ld	r24, X
    1fb2:	90 81       	ld	r25, Z
    1fb4:	97 7f       	andi	r25, 0xF7	; 247
    1fb6:	90 83       	st	Z, r25
    1fb8:	08 95       	ret

00001fba <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1fba:	e0 ec       	ldi	r30, 0xC0	; 192
    1fbc:	f1 e0       	ldi	r31, 0x01	; 1
    1fbe:	87 85       	ldd	r24, Z+15	; 0x0f
    1fc0:	88 23       	and	r24, r24
    1fc2:	ec f3       	brlt	.-6      	; 0x1fbe <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    1fc4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    1fc8:	81 ff       	sbrs	r24, 1
    1fca:	07 c0       	rjmp	.+14     	; 0x1fda <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    1fcc:	86 e3       	ldi	r24, 0x36	; 54
    1fce:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	8b ec       	ldi	r24, 0xCB	; 203
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	42 c0       	rjmp	.+132    	; 0x205e <ccp_write_io>
    1fda:	08 95       	ret

00001fdc <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1fdc:	e0 ec       	ldi	r30, 0xC0	; 192
    1fde:	f1 e0       	ldi	r31, 0x01	; 1
    1fe0:	97 85       	ldd	r25, Z+15	; 0x0f
    1fe2:	99 23       	and	r25, r25
    1fe4:	ec f3       	brlt	.-6      	; 0x1fe0 <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    1fe6:	ac ec       	ldi	r26, 0xCC	; 204
    1fe8:	b1 e0       	ldi	r27, 0x01	; 1
    1fea:	9c 91       	ld	r25, X
    1fec:	98 60       	ori	r25, 0x08	; 8
    1fee:	9c 93       	st	X, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    1ff0:	e8 2f       	mov	r30, r24
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	f0 5f       	subi	r31, 0xF0	; 240
    1ff6:	60 83       	st	Z, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    1ff8:	8c 91       	ld	r24, X
    1ffa:	87 7f       	andi	r24, 0xF7	; 247
    1ffc:	8c 93       	st	X, r24
    1ffe:	08 95       	ret

00002000 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	18 2f       	mov	r17, r24
    200c:	f9 2e       	mov	r15, r25
    200e:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    2010:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	nvm_eeprom_flush_buffer();
    2014:	d2 df       	rcall	.-92     	; 0x1fba <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2016:	e0 ec       	ldi	r30, 0xC0	; 192
    2018:	f1 e0       	ldi	r31, 0x01	; 1
    201a:	87 85       	ldd	r24, Z+15	; 0x0f
    201c:	88 23       	and	r24, r24
    201e:	ec f3       	brlt	.-6      	; 0x201a <nvm_eeprom_write_byte+0x1a>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    2020:	6c 2f       	mov	r22, r28
    2022:	81 2f       	mov	r24, r17
    2024:	db df       	rcall	.-74     	; 0x1fdc <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    2026:	c0 ec       	ldi	r28, 0xC0	; 192
    2028:	d1 e0       	ldi	r29, 0x01	; 1
    202a:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    202c:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    202e:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2030:	85 e3       	ldi	r24, 0x35	; 53
    2032:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	8b ec       	ldi	r24, 0xCB	; 203
    2038:	91 e0       	ldi	r25, 0x01	; 1
    203a:	11 d0       	rcall	.+34     	; 0x205e <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    203c:	0a 87       	std	Y+10, r16	; 0x0a
}
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	08 95       	ret

0000204a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    204a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    204e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2050:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2052:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2056:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2058:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    205c:	08 95       	ret

0000205e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    205e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2060:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2062:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2064:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2066:	60 83       	st	Z, r22
	ret                             // Return to caller
    2068:	08 95       	ret

0000206a <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2074:	c6 2f       	mov	r28, r22
    2076:	d0 e0       	ldi	r29, 0x00	; 0
    2078:	de 01       	movw	r26, r28
    207a:	02 2e       	mov	r0, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <ioport_configure_port_pin+0x18>
    207e:	b5 95       	asr	r27
    2080:	a7 95       	ror	r26
    2082:	0a 94       	dec	r0
    2084:	e2 f7       	brpl	.-8      	; 0x207e <ioport_configure_port_pin+0x14>
    2086:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2088:	50 8b       	std	Z+16, r21	; 0x10
    208a:	2f 5f       	subi	r18, 0xFF	; 255
    208c:	3f 4f       	sbci	r19, 0xFF	; 255
    208e:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2090:	28 30       	cpi	r18, 0x08	; 8
    2092:	31 05       	cpc	r19, r1
    2094:	89 f7       	brne	.-30     	; 0x2078 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2096:	40 ff       	sbrs	r20, 0
    2098:	0a c0       	rjmp	.+20     	; 0x20ae <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    209a:	41 ff       	sbrs	r20, 1
    209c:	03 c0       	rjmp	.+6      	; 0x20a4 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    209e:	fc 01       	movw	r30, r24
    20a0:	65 83       	std	Z+5, r22	; 0x05
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    20a4:	fc 01       	movw	r30, r24
    20a6:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    20a8:	fc 01       	movw	r30, r24
    20aa:	61 83       	std	Z+1, r22	; 0x01
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    20ae:	fc 01       	movw	r30, r24
    20b0:	62 83       	std	Z+2, r22	; 0x02
	}
}
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	08 95       	ret

000020b8 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    20b8:	43 e0       	ldi	r20, 0x03	; 3
    20ba:	50 e0       	ldi	r21, 0x00	; 0
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	80 ee       	ldi	r24, 0xE0	; 224
    20c0:	97 e0       	ldi	r25, 0x07	; 7
    20c2:	d3 df       	rcall	.-90     	; 0x206a <ioport_configure_port_pin>
    20c4:	43 e0       	ldi	r20, 0x03	; 3
    20c6:	50 e0       	ldi	r21, 0x00	; 0
    20c8:	62 e0       	ldi	r22, 0x02	; 2
    20ca:	80 ee       	ldi	r24, 0xE0	; 224
    20cc:	97 e0       	ldi	r25, 0x07	; 7
    20ce:	cd df       	rcall	.-102    	; 0x206a <ioport_configure_port_pin>
    20d0:	43 e0       	ldi	r20, 0x03	; 3
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	60 e1       	ldi	r22, 0x10	; 16
    20d6:	80 e6       	ldi	r24, 0x60	; 96
    20d8:	96 e0       	ldi	r25, 0x06	; 6
    20da:	c7 df       	rcall	.-114    	; 0x206a <ioport_configure_port_pin>
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	50 e4       	ldi	r21, 0x40	; 64
    20e0:	60 e2       	ldi	r22, 0x20	; 32
    20e2:	80 e6       	ldi	r24, 0x60	; 96
    20e4:	96 e0       	ldi	r25, 0x06	; 6
    20e6:	c1 df       	rcall	.-126    	; 0x206a <ioport_configure_port_pin>
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	5b e1       	ldi	r21, 0x1B	; 27
    20ec:	60 e2       	ldi	r22, 0x20	; 32
    20ee:	80 e8       	ldi	r24, 0x80	; 128
    20f0:	96 e0       	ldi	r25, 0x06	; 6
    20f2:	bb df       	rcall	.-138    	; 0x206a <ioport_configure_port_pin>
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	5b e1       	ldi	r21, 0x1B	; 27
    20f8:	62 e0       	ldi	r22, 0x02	; 2
    20fa:	80 ea       	ldi	r24, 0xA0	; 160
    20fc:	96 e0       	ldi	r25, 0x06	; 6
    20fe:	b5 df       	rcall	.-150    	; 0x206a <ioport_configure_port_pin>
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	5b e1       	ldi	r21, 0x1B	; 27
    2104:	64 e0       	ldi	r22, 0x04	; 4
    2106:	80 ea       	ldi	r24, 0xA0	; 160
    2108:	96 e0       	ldi	r25, 0x06	; 6
    210a:	af df       	rcall	.-162    	; 0x206a <ioport_configure_port_pin>
    210c:	43 e0       	ldi	r20, 0x03	; 3
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	62 e0       	ldi	r22, 0x02	; 2
    2112:	80 e6       	ldi	r24, 0x60	; 96
    2114:	96 e0       	ldi	r25, 0x06	; 6
    2116:	a9 df       	rcall	.-174    	; 0x206a <ioport_configure_port_pin>
    2118:	43 e0       	ldi	r20, 0x03	; 3
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	68 e0       	ldi	r22, 0x08	; 8
    211e:	80 e6       	ldi	r24, 0x60	; 96
    2120:	96 e0       	ldi	r25, 0x06	; 6
    2122:	a3 df       	rcall	.-186    	; 0x206a <ioport_configure_port_pin>
    2124:	43 e0       	ldi	r20, 0x03	; 3
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	68 e0       	ldi	r22, 0x08	; 8
    212a:	80 ea       	ldi	r24, 0xA0	; 160
    212c:	96 e0       	ldi	r25, 0x06	; 6
    212e:	9d df       	rcall	.-198    	; 0x206a <ioport_configure_port_pin>
    2130:	43 e0       	ldi	r20, 0x03	; 3
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	61 e0       	ldi	r22, 0x01	; 1
    2136:	80 e6       	ldi	r24, 0x60	; 96
    2138:	96 e0       	ldi	r25, 0x06	; 6
    213a:	97 df       	rcall	.-210    	; 0x206a <ioport_configure_port_pin>
    213c:	43 e0       	ldi	r20, 0x03	; 3
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	68 e0       	ldi	r22, 0x08	; 8
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	96 e0       	ldi	r25, 0x06	; 6
    2146:	91 df       	rcall	.-222    	; 0x206a <ioport_configure_port_pin>
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	60 e1       	ldi	r22, 0x10	; 16
    214e:	80 e8       	ldi	r24, 0x80	; 128
    2150:	96 e0       	ldi	r25, 0x06	; 6
    2152:	8b df       	rcall	.-234    	; 0x206a <ioport_configure_port_pin>
    2154:	43 e0       	ldi	r20, 0x03	; 3
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	62 e0       	ldi	r22, 0x02	; 2
    215a:	80 e6       	ldi	r24, 0x60	; 96
    215c:	96 e0       	ldi	r25, 0x06	; 6
    215e:	85 df       	rcall	.-246    	; 0x206a <ioport_configure_port_pin>
    2160:	43 e0       	ldi	r20, 0x03	; 3
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	68 e0       	ldi	r22, 0x08	; 8
    2166:	80 e6       	ldi	r24, 0x60	; 96
    2168:	96 e0       	ldi	r25, 0x06	; 6
    216a:	7f df       	rcall	.-258    	; 0x206a <ioport_configure_port_pin>
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	50 e0       	ldi	r21, 0x00	; 0
    2170:	64 e0       	ldi	r22, 0x04	; 4
    2172:	80 e6       	ldi	r24, 0x60	; 96
    2174:	96 e0       	ldi	r25, 0x06	; 6
    2176:	79 df       	rcall	.-270    	; 0x206a <ioport_configure_port_pin>
    2178:	43 e0       	ldi	r20, 0x03	; 3
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	60 e1       	ldi	r22, 0x10	; 16
    217e:	80 ea       	ldi	r24, 0xA0	; 160
    2180:	96 e0       	ldi	r25, 0x06	; 6
    2182:	73 df       	rcall	.-282    	; 0x206a <ioport_configure_port_pin>
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	61 e0       	ldi	r22, 0x01	; 1
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	96 e0       	ldi	r25, 0x06	; 6
    218e:	6d df       	rcall	.-294    	; 0x206a <ioport_configure_port_pin>
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	50 e0       	ldi	r21, 0x00	; 0
    2194:	64 e0       	ldi	r22, 0x04	; 4
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	96 e0       	ldi	r25, 0x06	; 6
    219a:	67 df       	rcall	.-306    	; 0x206a <ioport_configure_port_pin>
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	62 e0       	ldi	r22, 0x02	; 2
    21a2:	80 e2       	ldi	r24, 0x20	; 32
    21a4:	96 e0       	ldi	r25, 0x06	; 6
    21a6:	61 df       	rcall	.-318    	; 0x206a <ioport_configure_port_pin>
    21a8:	43 e0       	ldi	r20, 0x03	; 3
    21aa:	50 e0       	ldi	r21, 0x00	; 0
    21ac:	68 e0       	ldi	r22, 0x08	; 8
    21ae:	80 e4       	ldi	r24, 0x40	; 64
    21b0:	96 e0       	ldi	r25, 0x06	; 6
    21b2:	5b df       	rcall	.-330    	; 0x206a <ioport_configure_port_pin>
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	64 e0       	ldi	r22, 0x04	; 4
    21ba:	80 e4       	ldi	r24, 0x40	; 64
    21bc:	96 e0       	ldi	r25, 0x06	; 6
    21be:	55 df       	rcall	.-342    	; 0x206a <ioport_configure_port_pin>
    21c0:	43 e0       	ldi	r20, 0x03	; 3
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	68 e0       	ldi	r22, 0x08	; 8
    21c6:	80 e6       	ldi	r24, 0x60	; 96
    21c8:	96 e0       	ldi	r25, 0x06	; 6
    21ca:	4f df       	rcall	.-354    	; 0x206a <ioport_configure_port_pin>
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	64 e0       	ldi	r22, 0x04	; 4
    21d2:	80 e6       	ldi	r24, 0x60	; 96
    21d4:	96 e0       	ldi	r25, 0x06	; 6
    21d6:	49 df       	rcall	.-366    	; 0x206a <ioport_configure_port_pin>
    21d8:	43 e0       	ldi	r20, 0x03	; 3
    21da:	50 e0       	ldi	r21, 0x00	; 0
    21dc:	68 e0       	ldi	r22, 0x08	; 8
    21de:	80 e8       	ldi	r24, 0x80	; 128
    21e0:	96 e0       	ldi	r25, 0x06	; 6
    21e2:	43 df       	rcall	.-378    	; 0x206a <ioport_configure_port_pin>
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	64 e0       	ldi	r22, 0x04	; 4
    21ea:	80 e8       	ldi	r24, 0x80	; 128
    21ec:	96 e0       	ldi	r25, 0x06	; 6
    21ee:	3d cf       	rjmp	.-390    	; 0x206a <ioport_configure_port_pin>
    21f0:	08 95       	ret

000021f2 <main>:
	0x9e, 0xbf, 0xbf, 0xbf, 0xbf, 0x9e
};

 
int main (void)
{
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	68 97       	sbiw	r28, 0x18	; 24
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	de bf       	out	0x3e, r29	; 62
   // Variables for holding the current and desired temperatures
   int16_t current_temperature;
   int16_t desired_temperature=0;
   
    // Intialize board here
	sysclk_init();
    2200:	90 de       	rcall	.-736    	; 0x1f22 <sysclk_init>
	board_init();
    2202:	5a df       	rcall	.-332    	; 0x20b8 <board_init>
    2204:	87 e0       	ldi	r24, 0x07	; 7
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2206:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    220a:	0e 94 bc 06 	call	0xd78	; 0xd78 <gfx_mono_st7565r_init>
	pmic_init();
	gfx_mono_init();
    220e:	0e 94 ef 02 	call	0x5de	; 0x5de <adc_sensors_init>
	adc_sensors_init();
    2212:	80 e1       	ldi	r24, 0x10	; 16
    2214:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2218:	78 94       	sei

	// Enable display backlight
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);
	cpu_irq_enable();
    221a:	1b 82       	std	Y+3, r1	; 0x03

	// Struct for holding the temperature scale background
	tempscale.type = GFX_MONO_BITMAP_RAM;
    221c:	86 e0       	ldi	r24, 0x06	; 6
	tempscale.width = 6;
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	80 e2       	ldi	r24, 0x20	; 32
	tempscale.height = 32;
    2222:	8a 83       	std	Y+2, r24	; 0x02
    2224:	87 e0       	ldi	r24, 0x07	; 7
	tempscale.data.pixmap = tempscale_data;
    2226:	90 e2       	ldi	r25, 0x20	; 32
    2228:	8c 83       	std	Y+4, r24	; 0x04
    222a:	9d 83       	std	Y+5, r25	; 0x05
    222c:	01 e0       	ldi	r16, 0x01	; 1

	// Screen border
	gfx_mono_draw_rect(0, 0, 128, 32, GFX_PIXEL_SET);
    222e:	20 e2       	ldi	r18, 0x20	; 32
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	60 e0       	ldi	r22, 0x00	; 0
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	b1 d9       	rcall	.-3230   	; 0x159a <gfx_mono_generic_draw_rect>
    2238:	00 e0       	ldi	r16, 0x00	; 0
	// Clear screen
	gfx_mono_draw_filled_rect(1, 1, 126, 30, GFX_PIXEL_CLR);
    223a:	2e e1       	ldi	r18, 0x1E	; 30
    223c:	4e e7       	ldi	r20, 0x7E	; 126
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	cf d9       	rcall	.-3170   	; 0x15e2 <gfx_mono_generic_draw_filled_rect>
    2244:	20 e0       	ldi	r18, 0x00	; 0

	// Draw the header
	gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)header, 27, 2, &sysfont);
    2246:	30 e2       	ldi	r19, 0x20	; 32
    2248:	42 e0       	ldi	r20, 0x02	; 2
    224a:	6b e1       	ldi	r22, 0x1B	; 27
    224c:	8e e8       	ldi	r24, 0x8E	; 142
    224e:	94 e0       	ldi	r25, 0x04	; 4
    2250:	d1 da       	rcall	.-2654   	; 0x17f4 <gfx_mono_draw_progmem_string>
    2252:	40 e0       	ldi	r20, 0x00	; 0
    // Draw the thermometer
    gfx_mono_put_bitmap(&tempscale, X_POS, 0);
    2254:	6a e0       	ldi	r22, 0x0A	; 10
    2256:	ce 01       	movw	r24, r28
    2258:	01 96       	adiw	r24, 0x01	; 1
    225a:	dd d9       	rcall	.-3142   	; 0x1616 <gfx_mono_generic_put_bitmap>
    225c:	0f 2e       	mov	r0, r31
    225e:	ff e1       	ldi	r31, 0x1F	; 31
		gfx_mono_draw_filled_rect(X_POS + 2, 3, 2, temp_scale,
		GFX_PIXEL_CLR);
	 
		// Convert the temperature to Fahrenheit
		current_temperature = current_temperature * 1.8 + 32;
		snprintf(temperature_string, sizeof(temperature_string),
    2260:	8f 2e       	mov	r8, r31
    2262:	f0 e2       	ldi	r31, 0x20	; 32
    2264:	9f 2e       	mov	r9, r31
    2266:	f0 2d       	mov	r31, r0
    2268:	0f 2e       	mov	r0, r31
    226a:	ff e0       	ldi	r31, 0x0F	; 15
    226c:	3f 2e       	mov	r3, r31
    226e:	f0 2d       	mov	r31, r0
    2270:	6e 01       	movw	r12, r28
    2272:	26 e0       	ldi	r18, 0x06	; 6
    2274:	c2 0e       	add	r12, r18
    2276:	d1 1c       	adc	r13, r1
    2278:	0f 2e       	mov	r0, r31
    227a:	fb e2       	ldi	r31, 0x2B	; 43
		{
			desired_temperature = current_temperature;
			nvm_eeprom_write_byte(TEMP_EEPROM_ADDR,(uint8_t)desired_temperature);
		}
		 
		snprintf(temperature_string, sizeof(temperature_string), "%3i Desired",
    227c:	af 2e       	mov	r10, r31
    227e:	f0 e2       	ldi	r31, 0x20	; 32
    2280:	bf 2e       	mov	r11, r31
    2282:	f0 2d       	mov	r31, r0
    2284:	0f 2e       	mov	r0, r31
    2286:	f0 ea       	ldi	r31, 0xA0	; 160

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2288:	6f 2e       	mov	r6, r31
    228a:	f6 e0       	ldi	r31, 0x06	; 6
    228c:	7f 2e       	mov	r7, r31
    228e:	f0 2d       	mov	r31, r0
    2290:	22 24       	eor	r2, r2
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2292:	23 94       	inc	r2
    gfx_mono_put_bitmap(&tempscale, X_POS, 0);
	
	while(1)
	{
		//get current temperature	
		current_temperature = read_temperature();	
    2294:	65 db       	rcall	.-2358   	; 0x1960 <read_temperature>
    2296:	bc 01       	movw	r22, r24
	
		// Convert the temperature into the thermometer scale
		temp_scale = -0.36 * current_temperature + 20.25;
    2298:	99 0f       	add	r25, r25
    229a:	88 0b       	sbc	r24, r24
    229c:	99 0b       	sbc	r25, r25
    229e:	1c d1       	rcall	.+568    	; 0x24d8 <__floatsisf>
    22a0:	6d 8b       	std	Y+21, r22	; 0x15
    22a2:	7e 8b       	std	Y+22, r23	; 0x16
    22a4:	8f 8b       	std	Y+23, r24	; 0x17
    22a6:	98 8f       	std	Y+24, r25	; 0x18
    22a8:	2c ee       	ldi	r18, 0xEC	; 236
		if (temp_scale <= 0) {
			temp_scale = 0;
		}

		// Draw the scale element on top of the background temperature image
		gfx_mono_draw_filled_rect(X_POS + 2, 3, 2, temp_scale,
    22aa:	31 e5       	ldi	r19, 0x51	; 81
    22ac:	48 eb       	ldi	r20, 0xB8	; 184
    22ae:	5e eb       	ldi	r21, 0xBE	; 190
    22b0:	9f d1       	rcall	.+830    	; 0x25f0 <__mulsf3>
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	42 ea       	ldi	r20, 0xA2	; 162
    22b8:	51 e4       	ldi	r21, 0x41	; 65
    22ba:	77 d0       	rcall	.+238    	; 0x23aa <__addsf3>
    22bc:	df d0       	rcall	.+446    	; 0x247c <__fixunssfsi>
    22be:	26 2f       	mov	r18, r22
    22c0:	00 e0       	ldi	r16, 0x00	; 0
    22c2:	42 e0       	ldi	r20, 0x02	; 2
    22c4:	63 e0       	ldi	r22, 0x03	; 3
    22c6:	8c e0       	ldi	r24, 0x0C	; 12
    22c8:	8c d9       	rcall	.-3304   	; 0x15e2 <gfx_mono_generic_draw_filled_rect>
    22ca:	26 e6       	ldi	r18, 0x66	; 102
		GFX_PIXEL_CLR);
	 
		// Convert the temperature to Fahrenheit
		current_temperature = current_temperature * 1.8 + 32;
    22cc:	36 e6       	ldi	r19, 0x66	; 102
    22ce:	46 ee       	ldi	r20, 0xE6	; 230
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	8a d1       	rcall	.+788    	; 0x25f0 <__mulsf3>
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	52 e4       	ldi	r21, 0x42	; 66
    22e4:	62 d0       	rcall	.+196    	; 0x23aa <__addsf3>
    22e6:	c5 d0       	rcall	.+394    	; 0x2472 <__fixsfsi>
    22e8:	56 2e       	mov	r5, r22
    22ea:	47 2e       	mov	r4, r23
    22ec:	e6 2e       	mov	r14, r22
    22ee:	f7 2e       	mov	r15, r23
    22f0:	7f 93       	push	r23
		snprintf(temperature_string, sizeof(temperature_string),
    22f2:	6f 93       	push	r22
    22f4:	9f 92       	push	r9
    22f6:	8f 92       	push	r8
    22f8:	1f 92       	push	r1
    22fa:	3f 92       	push	r3
    22fc:	df 92       	push	r13
    22fe:	cf 92       	push	r12
    2300:	fc d1       	rcall	.+1016   	; 0x26fa <snprintf>
    2302:	20 e0       	ldi	r18, 0x00	; 0
		"%3i Current", current_temperature);

		// Draw the Fahrenheit temperature string
		gfx_mono_draw_string(temperature_string, X_POS + 12, 21, &sysfont);
    2304:	30 e2       	ldi	r19, 0x20	; 32
    2306:	45 e1       	ldi	r20, 0x15	; 21
    2308:	66 e1       	ldi	r22, 0x16	; 22
    230a:	c6 01       	movw	r24, r12
    230c:	4a da       	rcall	.-2924   	; 0x17a2 <gfx_mono_draw_string>
    230e:	84 e0       	ldi	r24, 0x04	; 4
    
	    // Read temperature from EEPROM
        desired_temperature = nvm_eeprom_read_byte(TEMP_EEPROM_ADDR);
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	42 de       	rcall	.-892    	; 0x1f98 <nvm_eeprom_read_byte>
    2314:	08 2f       	mov	r16, r24
    2316:	10 e0       	ldi	r17, 0x00	; 0
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	de bf       	out	0x3e, r29	; 62
		
		if( desired_temperature == 0)
    231c:	01 15       	cp	r16, r1
    231e:	11 05       	cpc	r17, r1
    2320:	31 f4       	brne	.+12     	; 0x232e <main+0x13c>
    2322:	65 2d       	mov	r22, r5
		{
			desired_temperature = current_temperature;
			nvm_eeprom_write_byte(TEMP_EEPROM_ADDR,(uint8_t)desired_temperature);
    2324:	84 e0       	ldi	r24, 0x04	; 4
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	6b de       	rcall	.-810    	; 0x2000 <nvm_eeprom_write_byte>
    232a:	05 2d       	mov	r16, r5
	    // Read temperature from EEPROM
        desired_temperature = nvm_eeprom_read_byte(TEMP_EEPROM_ADDR);
		
		if( desired_temperature == 0)
		{
			desired_temperature = current_temperature;
    232c:	14 2d       	mov	r17, r4
    232e:	1f 93       	push	r17
			nvm_eeprom_write_byte(TEMP_EEPROM_ADDR,(uint8_t)desired_temperature);
		}
		 
		snprintf(temperature_string, sizeof(temperature_string), "%3i Desired",
    2330:	0f 93       	push	r16
    2332:	bf 92       	push	r11
    2334:	af 92       	push	r10
    2336:	1f 92       	push	r1
    2338:	3f 92       	push	r3
    233a:	df 92       	push	r13
    233c:	cf 92       	push	r12
    233e:	dd d1       	rcall	.+954    	; 0x26fa <snprintf>
    2340:	20 e0       	ldi	r18, 0x00	; 0
		desired_temperature);

		// Draw the Desired string
		gfx_mono_draw_string(temperature_string, X_POS + 12, 13, &sysfont);
    2342:	30 e2       	ldi	r19, 0x20	; 32
    2344:	4d e0       	ldi	r20, 0x0D	; 13
    2346:	66 e1       	ldi	r22, 0x16	; 22
    2348:	c6 01       	movw	r24, r12
    234a:	2b da       	rcall	.-2986   	; 0x17a2 <gfx_mono_draw_string>
    234c:	f3 01       	movw	r30, r6
    234e:	80 85       	ldd	r24, Z+8	; 0x08

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2350:	cd bf       	out	0x3d, r28	; 61

		//read LED switches
		if ( gpio_pin_is_low(GPIO_PUSH_BUTTON_1) )
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	81 fd       	sbrc	r24, 1
    2356:	06 c0       	rjmp	.+12     	; 0x2364 <main+0x172>
    2358:	0f 5f       	subi	r16, 0xFF	; 255
		{
			desired_temperature++;
    235a:	1f 4f       	sbci	r17, 0xFF	; 255
    235c:	60 2f       	mov	r22, r16
			nvm_eeprom_write_byte(TEMP_EEPROM_ADDR,(uint8_t)desired_temperature);
    235e:	84 e0       	ldi	r24, 0x04	; 4
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	4e de       	rcall	.-868    	; 0x2000 <nvm_eeprom_write_byte>
    2364:	f3 01       	movw	r30, r6
    2366:	80 85       	ldd	r24, Z+8	; 0x08
    2368:	82 fd       	sbrc	r24, 2
    236a:	06 c0       	rjmp	.+12     	; 0x2378 <main+0x186>
		}
		
		if ( gpio_pin_is_low(GPIO_PUSH_BUTTON_2) )
    236c:	01 50       	subi	r16, 0x01	; 1
    236e:	11 09       	sbc	r17, r1
		{
			desired_temperature--;
    2370:	60 2f       	mov	r22, r16
    2372:	84 e0       	ldi	r24, 0x04	; 4
			nvm_eeprom_write_byte(TEMP_EEPROM_ADDR,(uint8_t)desired_temperature);
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	44 de       	rcall	.-888    	; 0x2000 <nvm_eeprom_write_byte>
    2378:	0e 15       	cp	r16, r14
    237a:	1f 05       	cpc	r17, r15
    237c:	31 f4       	brne	.+12     	; 0x238a <main+0x198>
		}
		
		if ( desired_temperature == current_temperature)
    237e:	20 92 e5 07 	sts	0x07E5, r2	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    2382:	82 e0       	ldi	r24, 0x02	; 2
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2384:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    2388:	85 cf       	rjmp	.-246    	; 0x2294 <main+0xa2>
    238a:	0e 15       	cp	r16, r14
    238c:	1f 05       	cpc	r17, r15
    238e:	34 f4       	brge	.+12     	; 0x239c <main+0x1aa>
		{
			LED_Off(LED0);  // Turn AC and Heater off
			LED_Off(LED1);
		}
		else if ( desired_temperature < current_temperature)
    2390:	20 92 e6 07 	sts	0x07E6, r2	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    2394:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2396:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    239a:	7c cf       	rjmp	.-264    	; 0x2294 <main+0xa2>
    239c:	20 92 e5 07 	sts	0x07E5, r2	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    23a0:	82 e0       	ldi	r24, 0x02	; 2
    23a2:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    23a6:	76 cf       	rjmp	.-276    	; 0x2294 <main+0xa2>

000023a8 <__subsf3>:
    23a8:	50 58       	subi	r21, 0x80	; 128

000023aa <__addsf3>:
    23aa:	bb 27       	eor	r27, r27
    23ac:	aa 27       	eor	r26, r26
    23ae:	0e d0       	rcall	.+28     	; 0x23cc <__addsf3x>
    23b0:	e5 c0       	rjmp	.+458    	; 0x257c <__fp_round>
    23b2:	d6 d0       	rcall	.+428    	; 0x2560 <__fp_pscA>
    23b4:	30 f0       	brcs	.+12     	; 0x23c2 <__addsf3+0x18>
    23b6:	db d0       	rcall	.+438    	; 0x256e <__fp_pscB>
    23b8:	20 f0       	brcs	.+8      	; 0x23c2 <__addsf3+0x18>
    23ba:	31 f4       	brne	.+12     	; 0x23c8 <__addsf3+0x1e>
    23bc:	9f 3f       	cpi	r25, 0xFF	; 255
    23be:	11 f4       	brne	.+4      	; 0x23c4 <__addsf3+0x1a>
    23c0:	1e f4       	brtc	.+6      	; 0x23c8 <__addsf3+0x1e>
    23c2:	cb c0       	rjmp	.+406    	; 0x255a <__fp_nan>
    23c4:	0e f4       	brtc	.+2      	; 0x23c8 <__addsf3+0x1e>
    23c6:	e0 95       	com	r30
    23c8:	e7 fb       	bst	r30, 7
    23ca:	c1 c0       	rjmp	.+386    	; 0x254e <__fp_inf>

000023cc <__addsf3x>:
    23cc:	e9 2f       	mov	r30, r25
    23ce:	e7 d0       	rcall	.+462    	; 0x259e <__fp_split3>
    23d0:	80 f3       	brcs	.-32     	; 0x23b2 <__addsf3+0x8>
    23d2:	ba 17       	cp	r27, r26
    23d4:	62 07       	cpc	r22, r18
    23d6:	73 07       	cpc	r23, r19
    23d8:	84 07       	cpc	r24, r20
    23da:	95 07       	cpc	r25, r21
    23dc:	18 f0       	brcs	.+6      	; 0x23e4 <__addsf3x+0x18>
    23de:	71 f4       	brne	.+28     	; 0x23fc <__addsf3x+0x30>
    23e0:	9e f5       	brtc	.+102    	; 0x2448 <__addsf3x+0x7c>
    23e2:	ff c0       	rjmp	.+510    	; 0x25e2 <__fp_zero>
    23e4:	0e f4       	brtc	.+2      	; 0x23e8 <__addsf3x+0x1c>
    23e6:	e0 95       	com	r30
    23e8:	0b 2e       	mov	r0, r27
    23ea:	ba 2f       	mov	r27, r26
    23ec:	a0 2d       	mov	r26, r0
    23ee:	0b 01       	movw	r0, r22
    23f0:	b9 01       	movw	r22, r18
    23f2:	90 01       	movw	r18, r0
    23f4:	0c 01       	movw	r0, r24
    23f6:	ca 01       	movw	r24, r20
    23f8:	a0 01       	movw	r20, r0
    23fa:	11 24       	eor	r1, r1
    23fc:	ff 27       	eor	r31, r31
    23fe:	59 1b       	sub	r21, r25
    2400:	99 f0       	breq	.+38     	; 0x2428 <__addsf3x+0x5c>
    2402:	59 3f       	cpi	r21, 0xF9	; 249
    2404:	50 f4       	brcc	.+20     	; 0x241a <__addsf3x+0x4e>
    2406:	50 3e       	cpi	r21, 0xE0	; 224
    2408:	68 f1       	brcs	.+90     	; 0x2464 <__addsf3x+0x98>
    240a:	1a 16       	cp	r1, r26
    240c:	f0 40       	sbci	r31, 0x00	; 0
    240e:	a2 2f       	mov	r26, r18
    2410:	23 2f       	mov	r18, r19
    2412:	34 2f       	mov	r19, r20
    2414:	44 27       	eor	r20, r20
    2416:	58 5f       	subi	r21, 0xF8	; 248
    2418:	f3 cf       	rjmp	.-26     	; 0x2400 <__addsf3x+0x34>
    241a:	46 95       	lsr	r20
    241c:	37 95       	ror	r19
    241e:	27 95       	ror	r18
    2420:	a7 95       	ror	r26
    2422:	f0 40       	sbci	r31, 0x00	; 0
    2424:	53 95       	inc	r21
    2426:	c9 f7       	brne	.-14     	; 0x241a <__addsf3x+0x4e>
    2428:	7e f4       	brtc	.+30     	; 0x2448 <__addsf3x+0x7c>
    242a:	1f 16       	cp	r1, r31
    242c:	ba 0b       	sbc	r27, r26
    242e:	62 0b       	sbc	r22, r18
    2430:	73 0b       	sbc	r23, r19
    2432:	84 0b       	sbc	r24, r20
    2434:	ba f0       	brmi	.+46     	; 0x2464 <__addsf3x+0x98>
    2436:	91 50       	subi	r25, 0x01	; 1
    2438:	a1 f0       	breq	.+40     	; 0x2462 <__addsf3x+0x96>
    243a:	ff 0f       	add	r31, r31
    243c:	bb 1f       	adc	r27, r27
    243e:	66 1f       	adc	r22, r22
    2440:	77 1f       	adc	r23, r23
    2442:	88 1f       	adc	r24, r24
    2444:	c2 f7       	brpl	.-16     	; 0x2436 <__addsf3x+0x6a>
    2446:	0e c0       	rjmp	.+28     	; 0x2464 <__addsf3x+0x98>
    2448:	ba 0f       	add	r27, r26
    244a:	62 1f       	adc	r22, r18
    244c:	73 1f       	adc	r23, r19
    244e:	84 1f       	adc	r24, r20
    2450:	48 f4       	brcc	.+18     	; 0x2464 <__addsf3x+0x98>
    2452:	87 95       	ror	r24
    2454:	77 95       	ror	r23
    2456:	67 95       	ror	r22
    2458:	b7 95       	ror	r27
    245a:	f7 95       	ror	r31
    245c:	9e 3f       	cpi	r25, 0xFE	; 254
    245e:	08 f0       	brcs	.+2      	; 0x2462 <__addsf3x+0x96>
    2460:	b3 cf       	rjmp	.-154    	; 0x23c8 <__addsf3+0x1e>
    2462:	93 95       	inc	r25
    2464:	88 0f       	add	r24, r24
    2466:	08 f0       	brcs	.+2      	; 0x246a <__addsf3x+0x9e>
    2468:	99 27       	eor	r25, r25
    246a:	ee 0f       	add	r30, r30
    246c:	97 95       	ror	r25
    246e:	87 95       	ror	r24
    2470:	08 95       	ret

00002472 <__fixsfsi>:
    2472:	04 d0       	rcall	.+8      	; 0x247c <__fixunssfsi>
    2474:	68 94       	set
    2476:	b1 11       	cpse	r27, r1
    2478:	b5 c0       	rjmp	.+362    	; 0x25e4 <__fp_szero>
    247a:	08 95       	ret

0000247c <__fixunssfsi>:
    247c:	98 d0       	rcall	.+304    	; 0x25ae <__fp_splitA>
    247e:	88 f0       	brcs	.+34     	; 0x24a2 <__fixunssfsi+0x26>
    2480:	9f 57       	subi	r25, 0x7F	; 127
    2482:	90 f0       	brcs	.+36     	; 0x24a8 <__fixunssfsi+0x2c>
    2484:	b9 2f       	mov	r27, r25
    2486:	99 27       	eor	r25, r25
    2488:	b7 51       	subi	r27, 0x17	; 23
    248a:	a0 f0       	brcs	.+40     	; 0x24b4 <__fixunssfsi+0x38>
    248c:	d1 f0       	breq	.+52     	; 0x24c2 <__fixunssfsi+0x46>
    248e:	66 0f       	add	r22, r22
    2490:	77 1f       	adc	r23, r23
    2492:	88 1f       	adc	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	1a f0       	brmi	.+6      	; 0x249e <__fixunssfsi+0x22>
    2498:	ba 95       	dec	r27
    249a:	c9 f7       	brne	.-14     	; 0x248e <__fixunssfsi+0x12>
    249c:	12 c0       	rjmp	.+36     	; 0x24c2 <__fixunssfsi+0x46>
    249e:	b1 30       	cpi	r27, 0x01	; 1
    24a0:	81 f0       	breq	.+32     	; 0x24c2 <__fixunssfsi+0x46>
    24a2:	9f d0       	rcall	.+318    	; 0x25e2 <__fp_zero>
    24a4:	b1 e0       	ldi	r27, 0x01	; 1
    24a6:	08 95       	ret
    24a8:	9c c0       	rjmp	.+312    	; 0x25e2 <__fp_zero>
    24aa:	67 2f       	mov	r22, r23
    24ac:	78 2f       	mov	r23, r24
    24ae:	88 27       	eor	r24, r24
    24b0:	b8 5f       	subi	r27, 0xF8	; 248
    24b2:	39 f0       	breq	.+14     	; 0x24c2 <__fixunssfsi+0x46>
    24b4:	b9 3f       	cpi	r27, 0xF9	; 249
    24b6:	cc f3       	brlt	.-14     	; 0x24aa <__fixunssfsi+0x2e>
    24b8:	86 95       	lsr	r24
    24ba:	77 95       	ror	r23
    24bc:	67 95       	ror	r22
    24be:	b3 95       	inc	r27
    24c0:	d9 f7       	brne	.-10     	; 0x24b8 <__fixunssfsi+0x3c>
    24c2:	3e f4       	brtc	.+14     	; 0x24d2 <__fixunssfsi+0x56>
    24c4:	90 95       	com	r25
    24c6:	80 95       	com	r24
    24c8:	70 95       	com	r23
    24ca:	61 95       	neg	r22
    24cc:	7f 4f       	sbci	r23, 0xFF	; 255
    24ce:	8f 4f       	sbci	r24, 0xFF	; 255
    24d0:	9f 4f       	sbci	r25, 0xFF	; 255
    24d2:	08 95       	ret

000024d4 <__floatunsisf>:
    24d4:	e8 94       	clt
    24d6:	09 c0       	rjmp	.+18     	; 0x24ea <__floatsisf+0x12>

000024d8 <__floatsisf>:
    24d8:	97 fb       	bst	r25, 7
    24da:	3e f4       	brtc	.+14     	; 0x24ea <__floatsisf+0x12>
    24dc:	90 95       	com	r25
    24de:	80 95       	com	r24
    24e0:	70 95       	com	r23
    24e2:	61 95       	neg	r22
    24e4:	7f 4f       	sbci	r23, 0xFF	; 255
    24e6:	8f 4f       	sbci	r24, 0xFF	; 255
    24e8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ea:	99 23       	and	r25, r25
    24ec:	a9 f0       	breq	.+42     	; 0x2518 <__floatsisf+0x40>
    24ee:	f9 2f       	mov	r31, r25
    24f0:	96 e9       	ldi	r25, 0x96	; 150
    24f2:	bb 27       	eor	r27, r27
    24f4:	93 95       	inc	r25
    24f6:	f6 95       	lsr	r31
    24f8:	87 95       	ror	r24
    24fa:	77 95       	ror	r23
    24fc:	67 95       	ror	r22
    24fe:	b7 95       	ror	r27
    2500:	f1 11       	cpse	r31, r1
    2502:	f8 cf       	rjmp	.-16     	; 0x24f4 <__floatsisf+0x1c>
    2504:	fa f4       	brpl	.+62     	; 0x2544 <__floatsisf+0x6c>
    2506:	bb 0f       	add	r27, r27
    2508:	11 f4       	brne	.+4      	; 0x250e <__floatsisf+0x36>
    250a:	60 ff       	sbrs	r22, 0
    250c:	1b c0       	rjmp	.+54     	; 0x2544 <__floatsisf+0x6c>
    250e:	6f 5f       	subi	r22, 0xFF	; 255
    2510:	7f 4f       	sbci	r23, 0xFF	; 255
    2512:	8f 4f       	sbci	r24, 0xFF	; 255
    2514:	9f 4f       	sbci	r25, 0xFF	; 255
    2516:	16 c0       	rjmp	.+44     	; 0x2544 <__floatsisf+0x6c>
    2518:	88 23       	and	r24, r24
    251a:	11 f0       	breq	.+4      	; 0x2520 <__floatsisf+0x48>
    251c:	96 e9       	ldi	r25, 0x96	; 150
    251e:	11 c0       	rjmp	.+34     	; 0x2542 <__floatsisf+0x6a>
    2520:	77 23       	and	r23, r23
    2522:	21 f0       	breq	.+8      	; 0x252c <__floatsisf+0x54>
    2524:	9e e8       	ldi	r25, 0x8E	; 142
    2526:	87 2f       	mov	r24, r23
    2528:	76 2f       	mov	r23, r22
    252a:	05 c0       	rjmp	.+10     	; 0x2536 <__floatsisf+0x5e>
    252c:	66 23       	and	r22, r22
    252e:	71 f0       	breq	.+28     	; 0x254c <__floatsisf+0x74>
    2530:	96 e8       	ldi	r25, 0x86	; 134
    2532:	86 2f       	mov	r24, r22
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	2a f0       	brmi	.+10     	; 0x2544 <__floatsisf+0x6c>
    253a:	9a 95       	dec	r25
    253c:	66 0f       	add	r22, r22
    253e:	77 1f       	adc	r23, r23
    2540:	88 1f       	adc	r24, r24
    2542:	da f7       	brpl	.-10     	; 0x253a <__floatsisf+0x62>
    2544:	88 0f       	add	r24, r24
    2546:	96 95       	lsr	r25
    2548:	87 95       	ror	r24
    254a:	97 f9       	bld	r25, 7
    254c:	08 95       	ret

0000254e <__fp_inf>:
    254e:	97 f9       	bld	r25, 7
    2550:	9f 67       	ori	r25, 0x7F	; 127
    2552:	80 e8       	ldi	r24, 0x80	; 128
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	08 95       	ret

0000255a <__fp_nan>:
    255a:	9f ef       	ldi	r25, 0xFF	; 255
    255c:	80 ec       	ldi	r24, 0xC0	; 192
    255e:	08 95       	ret

00002560 <__fp_pscA>:
    2560:	00 24       	eor	r0, r0
    2562:	0a 94       	dec	r0
    2564:	16 16       	cp	r1, r22
    2566:	17 06       	cpc	r1, r23
    2568:	18 06       	cpc	r1, r24
    256a:	09 06       	cpc	r0, r25
    256c:	08 95       	ret

0000256e <__fp_pscB>:
    256e:	00 24       	eor	r0, r0
    2570:	0a 94       	dec	r0
    2572:	12 16       	cp	r1, r18
    2574:	13 06       	cpc	r1, r19
    2576:	14 06       	cpc	r1, r20
    2578:	05 06       	cpc	r0, r21
    257a:	08 95       	ret

0000257c <__fp_round>:
    257c:	09 2e       	mov	r0, r25
    257e:	03 94       	inc	r0
    2580:	00 0c       	add	r0, r0
    2582:	11 f4       	brne	.+4      	; 0x2588 <__fp_round+0xc>
    2584:	88 23       	and	r24, r24
    2586:	52 f0       	brmi	.+20     	; 0x259c <__fp_round+0x20>
    2588:	bb 0f       	add	r27, r27
    258a:	40 f4       	brcc	.+16     	; 0x259c <__fp_round+0x20>
    258c:	bf 2b       	or	r27, r31
    258e:	11 f4       	brne	.+4      	; 0x2594 <__fp_round+0x18>
    2590:	60 ff       	sbrs	r22, 0
    2592:	04 c0       	rjmp	.+8      	; 0x259c <__fp_round+0x20>
    2594:	6f 5f       	subi	r22, 0xFF	; 255
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	8f 4f       	sbci	r24, 0xFF	; 255
    259a:	9f 4f       	sbci	r25, 0xFF	; 255
    259c:	08 95       	ret

0000259e <__fp_split3>:
    259e:	57 fd       	sbrc	r21, 7
    25a0:	90 58       	subi	r25, 0x80	; 128
    25a2:	44 0f       	add	r20, r20
    25a4:	55 1f       	adc	r21, r21
    25a6:	59 f0       	breq	.+22     	; 0x25be <__fp_splitA+0x10>
    25a8:	5f 3f       	cpi	r21, 0xFF	; 255
    25aa:	71 f0       	breq	.+28     	; 0x25c8 <__fp_splitA+0x1a>
    25ac:	47 95       	ror	r20

000025ae <__fp_splitA>:
    25ae:	88 0f       	add	r24, r24
    25b0:	97 fb       	bst	r25, 7
    25b2:	99 1f       	adc	r25, r25
    25b4:	61 f0       	breq	.+24     	; 0x25ce <__fp_splitA+0x20>
    25b6:	9f 3f       	cpi	r25, 0xFF	; 255
    25b8:	79 f0       	breq	.+30     	; 0x25d8 <__fp_splitA+0x2a>
    25ba:	87 95       	ror	r24
    25bc:	08 95       	ret
    25be:	12 16       	cp	r1, r18
    25c0:	13 06       	cpc	r1, r19
    25c2:	14 06       	cpc	r1, r20
    25c4:	55 1f       	adc	r21, r21
    25c6:	f2 cf       	rjmp	.-28     	; 0x25ac <__fp_split3+0xe>
    25c8:	46 95       	lsr	r20
    25ca:	f1 df       	rcall	.-30     	; 0x25ae <__fp_splitA>
    25cc:	08 c0       	rjmp	.+16     	; 0x25de <__fp_splitA+0x30>
    25ce:	16 16       	cp	r1, r22
    25d0:	17 06       	cpc	r1, r23
    25d2:	18 06       	cpc	r1, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	f1 cf       	rjmp	.-30     	; 0x25ba <__fp_splitA+0xc>
    25d8:	86 95       	lsr	r24
    25da:	71 05       	cpc	r23, r1
    25dc:	61 05       	cpc	r22, r1
    25de:	08 94       	sec
    25e0:	08 95       	ret

000025e2 <__fp_zero>:
    25e2:	e8 94       	clt

000025e4 <__fp_szero>:
    25e4:	bb 27       	eor	r27, r27
    25e6:	66 27       	eor	r22, r22
    25e8:	77 27       	eor	r23, r23
    25ea:	cb 01       	movw	r24, r22
    25ec:	97 f9       	bld	r25, 7
    25ee:	08 95       	ret

000025f0 <__mulsf3>:
    25f0:	0b d0       	rcall	.+22     	; 0x2608 <__mulsf3x>
    25f2:	c4 cf       	rjmp	.-120    	; 0x257c <__fp_round>
    25f4:	b5 df       	rcall	.-150    	; 0x2560 <__fp_pscA>
    25f6:	28 f0       	brcs	.+10     	; 0x2602 <__mulsf3+0x12>
    25f8:	ba df       	rcall	.-140    	; 0x256e <__fp_pscB>
    25fa:	18 f0       	brcs	.+6      	; 0x2602 <__mulsf3+0x12>
    25fc:	95 23       	and	r25, r21
    25fe:	09 f0       	breq	.+2      	; 0x2602 <__mulsf3+0x12>
    2600:	a6 cf       	rjmp	.-180    	; 0x254e <__fp_inf>
    2602:	ab cf       	rjmp	.-170    	; 0x255a <__fp_nan>
    2604:	11 24       	eor	r1, r1
    2606:	ee cf       	rjmp	.-36     	; 0x25e4 <__fp_szero>

00002608 <__mulsf3x>:
    2608:	ca df       	rcall	.-108    	; 0x259e <__fp_split3>
    260a:	a0 f3       	brcs	.-24     	; 0x25f4 <__mulsf3+0x4>

0000260c <__mulsf3_pse>:
    260c:	95 9f       	mul	r25, r21
    260e:	d1 f3       	breq	.-12     	; 0x2604 <__mulsf3+0x14>
    2610:	95 0f       	add	r25, r21
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	55 1f       	adc	r21, r21
    2616:	62 9f       	mul	r22, r18
    2618:	f0 01       	movw	r30, r0
    261a:	72 9f       	mul	r23, r18
    261c:	bb 27       	eor	r27, r27
    261e:	f0 0d       	add	r31, r0
    2620:	b1 1d       	adc	r27, r1
    2622:	63 9f       	mul	r22, r19
    2624:	aa 27       	eor	r26, r26
    2626:	f0 0d       	add	r31, r0
    2628:	b1 1d       	adc	r27, r1
    262a:	aa 1f       	adc	r26, r26
    262c:	64 9f       	mul	r22, r20
    262e:	66 27       	eor	r22, r22
    2630:	b0 0d       	add	r27, r0
    2632:	a1 1d       	adc	r26, r1
    2634:	66 1f       	adc	r22, r22
    2636:	82 9f       	mul	r24, r18
    2638:	22 27       	eor	r18, r18
    263a:	b0 0d       	add	r27, r0
    263c:	a1 1d       	adc	r26, r1
    263e:	62 1f       	adc	r22, r18
    2640:	73 9f       	mul	r23, r19
    2642:	b0 0d       	add	r27, r0
    2644:	a1 1d       	adc	r26, r1
    2646:	62 1f       	adc	r22, r18
    2648:	83 9f       	mul	r24, r19
    264a:	a0 0d       	add	r26, r0
    264c:	61 1d       	adc	r22, r1
    264e:	22 1f       	adc	r18, r18
    2650:	74 9f       	mul	r23, r20
    2652:	33 27       	eor	r19, r19
    2654:	a0 0d       	add	r26, r0
    2656:	61 1d       	adc	r22, r1
    2658:	23 1f       	adc	r18, r19
    265a:	84 9f       	mul	r24, r20
    265c:	60 0d       	add	r22, r0
    265e:	21 1d       	adc	r18, r1
    2660:	82 2f       	mov	r24, r18
    2662:	76 2f       	mov	r23, r22
    2664:	6a 2f       	mov	r22, r26
    2666:	11 24       	eor	r1, r1
    2668:	9f 57       	subi	r25, 0x7F	; 127
    266a:	50 40       	sbci	r21, 0x00	; 0
    266c:	8a f0       	brmi	.+34     	; 0x2690 <__mulsf3_pse+0x84>
    266e:	e1 f0       	breq	.+56     	; 0x26a8 <__mulsf3_pse+0x9c>
    2670:	88 23       	and	r24, r24
    2672:	4a f0       	brmi	.+18     	; 0x2686 <__mulsf3_pse+0x7a>
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	bb 1f       	adc	r27, r27
    267a:	66 1f       	adc	r22, r22
    267c:	77 1f       	adc	r23, r23
    267e:	88 1f       	adc	r24, r24
    2680:	91 50       	subi	r25, 0x01	; 1
    2682:	50 40       	sbci	r21, 0x00	; 0
    2684:	a9 f7       	brne	.-22     	; 0x2670 <__mulsf3_pse+0x64>
    2686:	9e 3f       	cpi	r25, 0xFE	; 254
    2688:	51 05       	cpc	r21, r1
    268a:	70 f0       	brcs	.+28     	; 0x26a8 <__mulsf3_pse+0x9c>
    268c:	60 cf       	rjmp	.-320    	; 0x254e <__fp_inf>
    268e:	aa cf       	rjmp	.-172    	; 0x25e4 <__fp_szero>
    2690:	5f 3f       	cpi	r21, 0xFF	; 255
    2692:	ec f3       	brlt	.-6      	; 0x268e <__mulsf3_pse+0x82>
    2694:	98 3e       	cpi	r25, 0xE8	; 232
    2696:	dc f3       	brlt	.-10     	; 0x268e <__mulsf3_pse+0x82>
    2698:	86 95       	lsr	r24
    269a:	77 95       	ror	r23
    269c:	67 95       	ror	r22
    269e:	b7 95       	ror	r27
    26a0:	f7 95       	ror	r31
    26a2:	e7 95       	ror	r30
    26a4:	9f 5f       	subi	r25, 0xFF	; 255
    26a6:	c1 f7       	brne	.-16     	; 0x2698 <__mulsf3_pse+0x8c>
    26a8:	fe 2b       	or	r31, r30
    26aa:	88 0f       	add	r24, r24
    26ac:	91 1d       	adc	r25, r1
    26ae:	96 95       	lsr	r25
    26b0:	87 95       	ror	r24
    26b2:	97 f9       	bld	r25, 7
    26b4:	08 95       	ret

000026b6 <__udivmodsi4>:
    26b6:	a1 e2       	ldi	r26, 0x21	; 33
    26b8:	1a 2e       	mov	r1, r26
    26ba:	aa 1b       	sub	r26, r26
    26bc:	bb 1b       	sub	r27, r27
    26be:	fd 01       	movw	r30, r26
    26c0:	0d c0       	rjmp	.+26     	; 0x26dc <__udivmodsi4_ep>

000026c2 <__udivmodsi4_loop>:
    26c2:	aa 1f       	adc	r26, r26
    26c4:	bb 1f       	adc	r27, r27
    26c6:	ee 1f       	adc	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	a2 17       	cp	r26, r18
    26cc:	b3 07       	cpc	r27, r19
    26ce:	e4 07       	cpc	r30, r20
    26d0:	f5 07       	cpc	r31, r21
    26d2:	20 f0       	brcs	.+8      	; 0x26dc <__udivmodsi4_ep>
    26d4:	a2 1b       	sub	r26, r18
    26d6:	b3 0b       	sbc	r27, r19
    26d8:	e4 0b       	sbc	r30, r20
    26da:	f5 0b       	sbc	r31, r21

000026dc <__udivmodsi4_ep>:
    26dc:	66 1f       	adc	r22, r22
    26de:	77 1f       	adc	r23, r23
    26e0:	88 1f       	adc	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	1a 94       	dec	r1
    26e6:	69 f7       	brne	.-38     	; 0x26c2 <__udivmodsi4_loop>
    26e8:	60 95       	com	r22
    26ea:	70 95       	com	r23
    26ec:	80 95       	com	r24
    26ee:	90 95       	com	r25
    26f0:	9b 01       	movw	r18, r22
    26f2:	ac 01       	movw	r20, r24
    26f4:	bd 01       	movw	r22, r26
    26f6:	cf 01       	movw	r24, r30
    26f8:	08 95       	ret

000026fa <snprintf>:
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	2e 97       	sbiw	r28, 0x0e	; 14
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0e 89       	ldd	r16, Y+22	; 0x16
    270e:	1f 89       	ldd	r17, Y+23	; 0x17
    2710:	88 8d       	ldd	r24, Y+24	; 0x18
    2712:	99 8d       	ldd	r25, Y+25	; 0x19
    2714:	26 e0       	ldi	r18, 0x06	; 6
    2716:	2c 83       	std	Y+4, r18	; 0x04
    2718:	09 83       	std	Y+1, r16	; 0x01
    271a:	1a 83       	std	Y+2, r17	; 0x02
    271c:	97 ff       	sbrs	r25, 7
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <snprintf+0x2a>
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e8       	ldi	r25, 0x80	; 128
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	ae 01       	movw	r20, r28
    272c:	44 5e       	subi	r20, 0xE4	; 228
    272e:	5f 4f       	sbci	r21, 0xFF	; 255
    2730:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2732:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2734:	ce 01       	movw	r24, r28
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	16 d0       	rcall	.+44     	; 0x2766 <vfprintf>
    273a:	4d 81       	ldd	r20, Y+5	; 0x05
    273c:	5e 81       	ldd	r21, Y+6	; 0x06
    273e:	57 fd       	sbrc	r21, 7
    2740:	0a c0       	rjmp	.+20     	; 0x2756 <snprintf+0x5c>
    2742:	2f 81       	ldd	r18, Y+7	; 0x07
    2744:	38 85       	ldd	r19, Y+8	; 0x08
    2746:	42 17       	cp	r20, r18
    2748:	53 07       	cpc	r21, r19
    274a:	0c f4       	brge	.+2      	; 0x274e <snprintf+0x54>
    274c:	9a 01       	movw	r18, r20
    274e:	f8 01       	movw	r30, r16
    2750:	e2 0f       	add	r30, r18
    2752:	f3 1f       	adc	r31, r19
    2754:	10 82       	st	Z, r1
    2756:	2e 96       	adiw	r28, 0x0e	; 14
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	08 95       	ret

00002766 <vfprintf>:
    2766:	2f 92       	push	r2
    2768:	3f 92       	push	r3
    276a:	4f 92       	push	r4
    276c:	5f 92       	push	r5
    276e:	6f 92       	push	r6
    2770:	7f 92       	push	r7
    2772:	8f 92       	push	r8
    2774:	9f 92       	push	r9
    2776:	af 92       	push	r10
    2778:	bf 92       	push	r11
    277a:	cf 92       	push	r12
    277c:	df 92       	push	r13
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	2b 97       	sbiw	r28, 0x0b	; 11
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	6c 01       	movw	r12, r24
    2796:	7b 01       	movw	r14, r22
    2798:	8a 01       	movw	r16, r20
    279a:	fc 01       	movw	r30, r24
    279c:	16 82       	std	Z+6, r1	; 0x06
    279e:	17 82       	std	Z+7, r1	; 0x07
    27a0:	83 81       	ldd	r24, Z+3	; 0x03
    27a2:	81 ff       	sbrs	r24, 1
    27a4:	bf c1       	rjmp	.+894    	; 0x2b24 <vfprintf+0x3be>
    27a6:	ce 01       	movw	r24, r28
    27a8:	01 96       	adiw	r24, 0x01	; 1
    27aa:	3c 01       	movw	r6, r24
    27ac:	f6 01       	movw	r30, r12
    27ae:	93 81       	ldd	r25, Z+3	; 0x03
    27b0:	f7 01       	movw	r30, r14
    27b2:	93 fd       	sbrc	r25, 3
    27b4:	85 91       	lpm	r24, Z+
    27b6:	93 ff       	sbrs	r25, 3
    27b8:	81 91       	ld	r24, Z+
    27ba:	7f 01       	movw	r14, r30
    27bc:	88 23       	and	r24, r24
    27be:	09 f4       	brne	.+2      	; 0x27c2 <vfprintf+0x5c>
    27c0:	ad c1       	rjmp	.+858    	; 0x2b1c <vfprintf+0x3b6>
    27c2:	85 32       	cpi	r24, 0x25	; 37
    27c4:	39 f4       	brne	.+14     	; 0x27d4 <vfprintf+0x6e>
    27c6:	93 fd       	sbrc	r25, 3
    27c8:	85 91       	lpm	r24, Z+
    27ca:	93 ff       	sbrs	r25, 3
    27cc:	81 91       	ld	r24, Z+
    27ce:	7f 01       	movw	r14, r30
    27d0:	85 32       	cpi	r24, 0x25	; 37
    27d2:	21 f4       	brne	.+8      	; 0x27dc <vfprintf+0x76>
    27d4:	b6 01       	movw	r22, r12
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	d3 d1       	rcall	.+934    	; 0x2b80 <fputc>
    27da:	e8 cf       	rjmp	.-48     	; 0x27ac <vfprintf+0x46>
    27dc:	91 2c       	mov	r9, r1
    27de:	21 2c       	mov	r2, r1
    27e0:	31 2c       	mov	r3, r1
    27e2:	ff e1       	ldi	r31, 0x1F	; 31
    27e4:	f3 15       	cp	r31, r3
    27e6:	d8 f0       	brcs	.+54     	; 0x281e <vfprintf+0xb8>
    27e8:	8b 32       	cpi	r24, 0x2B	; 43
    27ea:	79 f0       	breq	.+30     	; 0x280a <vfprintf+0xa4>
    27ec:	38 f4       	brcc	.+14     	; 0x27fc <vfprintf+0x96>
    27ee:	80 32       	cpi	r24, 0x20	; 32
    27f0:	79 f0       	breq	.+30     	; 0x2810 <vfprintf+0xaa>
    27f2:	83 32       	cpi	r24, 0x23	; 35
    27f4:	a1 f4       	brne	.+40     	; 0x281e <vfprintf+0xb8>
    27f6:	23 2d       	mov	r18, r3
    27f8:	20 61       	ori	r18, 0x10	; 16
    27fa:	1d c0       	rjmp	.+58     	; 0x2836 <vfprintf+0xd0>
    27fc:	8d 32       	cpi	r24, 0x2D	; 45
    27fe:	61 f0       	breq	.+24     	; 0x2818 <vfprintf+0xb2>
    2800:	80 33       	cpi	r24, 0x30	; 48
    2802:	69 f4       	brne	.+26     	; 0x281e <vfprintf+0xb8>
    2804:	23 2d       	mov	r18, r3
    2806:	21 60       	ori	r18, 0x01	; 1
    2808:	16 c0       	rjmp	.+44     	; 0x2836 <vfprintf+0xd0>
    280a:	83 2d       	mov	r24, r3
    280c:	82 60       	ori	r24, 0x02	; 2
    280e:	38 2e       	mov	r3, r24
    2810:	e3 2d       	mov	r30, r3
    2812:	e4 60       	ori	r30, 0x04	; 4
    2814:	3e 2e       	mov	r3, r30
    2816:	2a c0       	rjmp	.+84     	; 0x286c <vfprintf+0x106>
    2818:	f3 2d       	mov	r31, r3
    281a:	f8 60       	ori	r31, 0x08	; 8
    281c:	1d c0       	rjmp	.+58     	; 0x2858 <vfprintf+0xf2>
    281e:	37 fc       	sbrc	r3, 7
    2820:	2d c0       	rjmp	.+90     	; 0x287c <vfprintf+0x116>
    2822:	20 ed       	ldi	r18, 0xD0	; 208
    2824:	28 0f       	add	r18, r24
    2826:	2a 30       	cpi	r18, 0x0A	; 10
    2828:	40 f0       	brcs	.+16     	; 0x283a <vfprintf+0xd4>
    282a:	8e 32       	cpi	r24, 0x2E	; 46
    282c:	b9 f4       	brne	.+46     	; 0x285c <vfprintf+0xf6>
    282e:	36 fc       	sbrc	r3, 6
    2830:	75 c1       	rjmp	.+746    	; 0x2b1c <vfprintf+0x3b6>
    2832:	23 2d       	mov	r18, r3
    2834:	20 64       	ori	r18, 0x40	; 64
    2836:	32 2e       	mov	r3, r18
    2838:	19 c0       	rjmp	.+50     	; 0x286c <vfprintf+0x106>
    283a:	36 fe       	sbrs	r3, 6
    283c:	06 c0       	rjmp	.+12     	; 0x284a <vfprintf+0xe4>
    283e:	8a e0       	ldi	r24, 0x0A	; 10
    2840:	98 9e       	mul	r9, r24
    2842:	20 0d       	add	r18, r0
    2844:	11 24       	eor	r1, r1
    2846:	92 2e       	mov	r9, r18
    2848:	11 c0       	rjmp	.+34     	; 0x286c <vfprintf+0x106>
    284a:	ea e0       	ldi	r30, 0x0A	; 10
    284c:	2e 9e       	mul	r2, r30
    284e:	20 0d       	add	r18, r0
    2850:	11 24       	eor	r1, r1
    2852:	22 2e       	mov	r2, r18
    2854:	f3 2d       	mov	r31, r3
    2856:	f0 62       	ori	r31, 0x20	; 32
    2858:	3f 2e       	mov	r3, r31
    285a:	08 c0       	rjmp	.+16     	; 0x286c <vfprintf+0x106>
    285c:	8c 36       	cpi	r24, 0x6C	; 108
    285e:	21 f4       	brne	.+8      	; 0x2868 <vfprintf+0x102>
    2860:	83 2d       	mov	r24, r3
    2862:	80 68       	ori	r24, 0x80	; 128
    2864:	38 2e       	mov	r3, r24
    2866:	02 c0       	rjmp	.+4      	; 0x286c <vfprintf+0x106>
    2868:	88 36       	cpi	r24, 0x68	; 104
    286a:	41 f4       	brne	.+16     	; 0x287c <vfprintf+0x116>
    286c:	f7 01       	movw	r30, r14
    286e:	93 fd       	sbrc	r25, 3
    2870:	85 91       	lpm	r24, Z+
    2872:	93 ff       	sbrs	r25, 3
    2874:	81 91       	ld	r24, Z+
    2876:	7f 01       	movw	r14, r30
    2878:	81 11       	cpse	r24, r1
    287a:	b3 cf       	rjmp	.-154    	; 0x27e2 <vfprintf+0x7c>
    287c:	98 2f       	mov	r25, r24
    287e:	9f 7d       	andi	r25, 0xDF	; 223
    2880:	95 54       	subi	r25, 0x45	; 69
    2882:	93 30       	cpi	r25, 0x03	; 3
    2884:	28 f4       	brcc	.+10     	; 0x2890 <vfprintf+0x12a>
    2886:	0c 5f       	subi	r16, 0xFC	; 252
    2888:	1f 4f       	sbci	r17, 0xFF	; 255
    288a:	9f e3       	ldi	r25, 0x3F	; 63
    288c:	99 83       	std	Y+1, r25	; 0x01
    288e:	0d c0       	rjmp	.+26     	; 0x28aa <vfprintf+0x144>
    2890:	83 36       	cpi	r24, 0x63	; 99
    2892:	31 f0       	breq	.+12     	; 0x28a0 <vfprintf+0x13a>
    2894:	83 37       	cpi	r24, 0x73	; 115
    2896:	71 f0       	breq	.+28     	; 0x28b4 <vfprintf+0x14e>
    2898:	83 35       	cpi	r24, 0x53	; 83
    289a:	09 f0       	breq	.+2      	; 0x289e <vfprintf+0x138>
    289c:	55 c0       	rjmp	.+170    	; 0x2948 <vfprintf+0x1e2>
    289e:	20 c0       	rjmp	.+64     	; 0x28e0 <vfprintf+0x17a>
    28a0:	f8 01       	movw	r30, r16
    28a2:	80 81       	ld	r24, Z
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	0e 5f       	subi	r16, 0xFE	; 254
    28a8:	1f 4f       	sbci	r17, 0xFF	; 255
    28aa:	88 24       	eor	r8, r8
    28ac:	83 94       	inc	r8
    28ae:	91 2c       	mov	r9, r1
    28b0:	53 01       	movw	r10, r6
    28b2:	12 c0       	rjmp	.+36     	; 0x28d8 <vfprintf+0x172>
    28b4:	28 01       	movw	r4, r16
    28b6:	f2 e0       	ldi	r31, 0x02	; 2
    28b8:	4f 0e       	add	r4, r31
    28ba:	51 1c       	adc	r5, r1
    28bc:	f8 01       	movw	r30, r16
    28be:	a0 80       	ld	r10, Z
    28c0:	b1 80       	ldd	r11, Z+1	; 0x01
    28c2:	36 fe       	sbrs	r3, 6
    28c4:	03 c0       	rjmp	.+6      	; 0x28cc <vfprintf+0x166>
    28c6:	69 2d       	mov	r22, r9
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	02 c0       	rjmp	.+4      	; 0x28d0 <vfprintf+0x16a>
    28cc:	6f ef       	ldi	r22, 0xFF	; 255
    28ce:	7f ef       	ldi	r23, 0xFF	; 255
    28d0:	c5 01       	movw	r24, r10
    28d2:	4b d1       	rcall	.+662    	; 0x2b6a <strnlen>
    28d4:	4c 01       	movw	r8, r24
    28d6:	82 01       	movw	r16, r4
    28d8:	f3 2d       	mov	r31, r3
    28da:	ff 77       	andi	r31, 0x7F	; 127
    28dc:	3f 2e       	mov	r3, r31
    28de:	15 c0       	rjmp	.+42     	; 0x290a <vfprintf+0x1a4>
    28e0:	28 01       	movw	r4, r16
    28e2:	22 e0       	ldi	r18, 0x02	; 2
    28e4:	42 0e       	add	r4, r18
    28e6:	51 1c       	adc	r5, r1
    28e8:	f8 01       	movw	r30, r16
    28ea:	a0 80       	ld	r10, Z
    28ec:	b1 80       	ldd	r11, Z+1	; 0x01
    28ee:	36 fe       	sbrs	r3, 6
    28f0:	03 c0       	rjmp	.+6      	; 0x28f8 <vfprintf+0x192>
    28f2:	69 2d       	mov	r22, r9
    28f4:	70 e0       	ldi	r23, 0x00	; 0
    28f6:	02 c0       	rjmp	.+4      	; 0x28fc <vfprintf+0x196>
    28f8:	6f ef       	ldi	r22, 0xFF	; 255
    28fa:	7f ef       	ldi	r23, 0xFF	; 255
    28fc:	c5 01       	movw	r24, r10
    28fe:	2a d1       	rcall	.+596    	; 0x2b54 <strnlen_P>
    2900:	4c 01       	movw	r8, r24
    2902:	f3 2d       	mov	r31, r3
    2904:	f0 68       	ori	r31, 0x80	; 128
    2906:	3f 2e       	mov	r3, r31
    2908:	82 01       	movw	r16, r4
    290a:	33 fc       	sbrc	r3, 3
    290c:	19 c0       	rjmp	.+50     	; 0x2940 <vfprintf+0x1da>
    290e:	82 2d       	mov	r24, r2
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	88 16       	cp	r8, r24
    2914:	99 06       	cpc	r9, r25
    2916:	a0 f4       	brcc	.+40     	; 0x2940 <vfprintf+0x1da>
    2918:	b6 01       	movw	r22, r12
    291a:	80 e2       	ldi	r24, 0x20	; 32
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	30 d1       	rcall	.+608    	; 0x2b80 <fputc>
    2920:	2a 94       	dec	r2
    2922:	f5 cf       	rjmp	.-22     	; 0x290e <vfprintf+0x1a8>
    2924:	f5 01       	movw	r30, r10
    2926:	37 fc       	sbrc	r3, 7
    2928:	85 91       	lpm	r24, Z+
    292a:	37 fe       	sbrs	r3, 7
    292c:	81 91       	ld	r24, Z+
    292e:	5f 01       	movw	r10, r30
    2930:	b6 01       	movw	r22, r12
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	25 d1       	rcall	.+586    	; 0x2b80 <fputc>
    2936:	21 10       	cpse	r2, r1
    2938:	2a 94       	dec	r2
    293a:	21 e0       	ldi	r18, 0x01	; 1
    293c:	82 1a       	sub	r8, r18
    293e:	91 08       	sbc	r9, r1
    2940:	81 14       	cp	r8, r1
    2942:	91 04       	cpc	r9, r1
    2944:	79 f7       	brne	.-34     	; 0x2924 <vfprintf+0x1be>
    2946:	e1 c0       	rjmp	.+450    	; 0x2b0a <vfprintf+0x3a4>
    2948:	84 36       	cpi	r24, 0x64	; 100
    294a:	11 f0       	breq	.+4      	; 0x2950 <vfprintf+0x1ea>
    294c:	89 36       	cpi	r24, 0x69	; 105
    294e:	39 f5       	brne	.+78     	; 0x299e <vfprintf+0x238>
    2950:	f8 01       	movw	r30, r16
    2952:	37 fe       	sbrs	r3, 7
    2954:	07 c0       	rjmp	.+14     	; 0x2964 <vfprintf+0x1fe>
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	0c 5f       	subi	r16, 0xFC	; 252
    2960:	1f 4f       	sbci	r17, 0xFF	; 255
    2962:	08 c0       	rjmp	.+16     	; 0x2974 <vfprintf+0x20e>
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	07 2e       	mov	r0, r23
    296a:	00 0c       	add	r0, r0
    296c:	88 0b       	sbc	r24, r24
    296e:	99 0b       	sbc	r25, r25
    2970:	0e 5f       	subi	r16, 0xFE	; 254
    2972:	1f 4f       	sbci	r17, 0xFF	; 255
    2974:	f3 2d       	mov	r31, r3
    2976:	ff 76       	andi	r31, 0x6F	; 111
    2978:	3f 2e       	mov	r3, r31
    297a:	97 ff       	sbrs	r25, 7
    297c:	09 c0       	rjmp	.+18     	; 0x2990 <vfprintf+0x22a>
    297e:	90 95       	com	r25
    2980:	80 95       	com	r24
    2982:	70 95       	com	r23
    2984:	61 95       	neg	r22
    2986:	7f 4f       	sbci	r23, 0xFF	; 255
    2988:	8f 4f       	sbci	r24, 0xFF	; 255
    298a:	9f 4f       	sbci	r25, 0xFF	; 255
    298c:	f0 68       	ori	r31, 0x80	; 128
    298e:	3f 2e       	mov	r3, r31
    2990:	2a e0       	ldi	r18, 0x0A	; 10
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	a3 01       	movw	r20, r6
    2996:	30 d1       	rcall	.+608    	; 0x2bf8 <__ultoa_invert>
    2998:	88 2e       	mov	r8, r24
    299a:	86 18       	sub	r8, r6
    299c:	44 c0       	rjmp	.+136    	; 0x2a26 <vfprintf+0x2c0>
    299e:	85 37       	cpi	r24, 0x75	; 117
    29a0:	31 f4       	brne	.+12     	; 0x29ae <vfprintf+0x248>
    29a2:	23 2d       	mov	r18, r3
    29a4:	2f 7e       	andi	r18, 0xEF	; 239
    29a6:	b2 2e       	mov	r11, r18
    29a8:	2a e0       	ldi	r18, 0x0A	; 10
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	25 c0       	rjmp	.+74     	; 0x29f8 <vfprintf+0x292>
    29ae:	93 2d       	mov	r25, r3
    29b0:	99 7f       	andi	r25, 0xF9	; 249
    29b2:	b9 2e       	mov	r11, r25
    29b4:	8f 36       	cpi	r24, 0x6F	; 111
    29b6:	c1 f0       	breq	.+48     	; 0x29e8 <vfprintf+0x282>
    29b8:	18 f4       	brcc	.+6      	; 0x29c0 <vfprintf+0x25a>
    29ba:	88 35       	cpi	r24, 0x58	; 88
    29bc:	79 f0       	breq	.+30     	; 0x29dc <vfprintf+0x276>
    29be:	ae c0       	rjmp	.+348    	; 0x2b1c <vfprintf+0x3b6>
    29c0:	80 37       	cpi	r24, 0x70	; 112
    29c2:	19 f0       	breq	.+6      	; 0x29ca <vfprintf+0x264>
    29c4:	88 37       	cpi	r24, 0x78	; 120
    29c6:	21 f0       	breq	.+8      	; 0x29d0 <vfprintf+0x26a>
    29c8:	a9 c0       	rjmp	.+338    	; 0x2b1c <vfprintf+0x3b6>
    29ca:	e9 2f       	mov	r30, r25
    29cc:	e0 61       	ori	r30, 0x10	; 16
    29ce:	be 2e       	mov	r11, r30
    29d0:	b4 fe       	sbrs	r11, 4
    29d2:	0d c0       	rjmp	.+26     	; 0x29ee <vfprintf+0x288>
    29d4:	fb 2d       	mov	r31, r11
    29d6:	f4 60       	ori	r31, 0x04	; 4
    29d8:	bf 2e       	mov	r11, r31
    29da:	09 c0       	rjmp	.+18     	; 0x29ee <vfprintf+0x288>
    29dc:	34 fe       	sbrs	r3, 4
    29de:	0a c0       	rjmp	.+20     	; 0x29f4 <vfprintf+0x28e>
    29e0:	29 2f       	mov	r18, r25
    29e2:	26 60       	ori	r18, 0x06	; 6
    29e4:	b2 2e       	mov	r11, r18
    29e6:	06 c0       	rjmp	.+12     	; 0x29f4 <vfprintf+0x28e>
    29e8:	28 e0       	ldi	r18, 0x08	; 8
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	05 c0       	rjmp	.+10     	; 0x29f8 <vfprintf+0x292>
    29ee:	20 e1       	ldi	r18, 0x10	; 16
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <vfprintf+0x292>
    29f4:	20 e1       	ldi	r18, 0x10	; 16
    29f6:	32 e0       	ldi	r19, 0x02	; 2
    29f8:	f8 01       	movw	r30, r16
    29fa:	b7 fe       	sbrs	r11, 7
    29fc:	07 c0       	rjmp	.+14     	; 0x2a0c <vfprintf+0x2a6>
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	0c 5f       	subi	r16, 0xFC	; 252
    2a08:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0a:	06 c0       	rjmp	.+12     	; 0x2a18 <vfprintf+0x2b2>
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 5f       	subi	r16, 0xFE	; 254
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	a3 01       	movw	r20, r6
    2a1a:	ee d0       	rcall	.+476    	; 0x2bf8 <__ultoa_invert>
    2a1c:	88 2e       	mov	r8, r24
    2a1e:	86 18       	sub	r8, r6
    2a20:	fb 2d       	mov	r31, r11
    2a22:	ff 77       	andi	r31, 0x7F	; 127
    2a24:	3f 2e       	mov	r3, r31
    2a26:	36 fe       	sbrs	r3, 6
    2a28:	0d c0       	rjmp	.+26     	; 0x2a44 <vfprintf+0x2de>
    2a2a:	23 2d       	mov	r18, r3
    2a2c:	2e 7f       	andi	r18, 0xFE	; 254
    2a2e:	a2 2e       	mov	r10, r18
    2a30:	89 14       	cp	r8, r9
    2a32:	58 f4       	brcc	.+22     	; 0x2a4a <vfprintf+0x2e4>
    2a34:	34 fe       	sbrs	r3, 4
    2a36:	0b c0       	rjmp	.+22     	; 0x2a4e <vfprintf+0x2e8>
    2a38:	32 fc       	sbrc	r3, 2
    2a3a:	09 c0       	rjmp	.+18     	; 0x2a4e <vfprintf+0x2e8>
    2a3c:	83 2d       	mov	r24, r3
    2a3e:	8e 7e       	andi	r24, 0xEE	; 238
    2a40:	a8 2e       	mov	r10, r24
    2a42:	05 c0       	rjmp	.+10     	; 0x2a4e <vfprintf+0x2e8>
    2a44:	b8 2c       	mov	r11, r8
    2a46:	a3 2c       	mov	r10, r3
    2a48:	03 c0       	rjmp	.+6      	; 0x2a50 <vfprintf+0x2ea>
    2a4a:	b8 2c       	mov	r11, r8
    2a4c:	01 c0       	rjmp	.+2      	; 0x2a50 <vfprintf+0x2ea>
    2a4e:	b9 2c       	mov	r11, r9
    2a50:	a4 fe       	sbrs	r10, 4
    2a52:	0f c0       	rjmp	.+30     	; 0x2a72 <vfprintf+0x30c>
    2a54:	fe 01       	movw	r30, r28
    2a56:	e8 0d       	add	r30, r8
    2a58:	f1 1d       	adc	r31, r1
    2a5a:	80 81       	ld	r24, Z
    2a5c:	80 33       	cpi	r24, 0x30	; 48
    2a5e:	21 f4       	brne	.+8      	; 0x2a68 <vfprintf+0x302>
    2a60:	9a 2d       	mov	r25, r10
    2a62:	99 7e       	andi	r25, 0xE9	; 233
    2a64:	a9 2e       	mov	r10, r25
    2a66:	09 c0       	rjmp	.+18     	; 0x2a7a <vfprintf+0x314>
    2a68:	a2 fe       	sbrs	r10, 2
    2a6a:	06 c0       	rjmp	.+12     	; 0x2a78 <vfprintf+0x312>
    2a6c:	b3 94       	inc	r11
    2a6e:	b3 94       	inc	r11
    2a70:	04 c0       	rjmp	.+8      	; 0x2a7a <vfprintf+0x314>
    2a72:	8a 2d       	mov	r24, r10
    2a74:	86 78       	andi	r24, 0x86	; 134
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <vfprintf+0x314>
    2a78:	b3 94       	inc	r11
    2a7a:	a3 fc       	sbrc	r10, 3
    2a7c:	10 c0       	rjmp	.+32     	; 0x2a9e <vfprintf+0x338>
    2a7e:	a0 fe       	sbrs	r10, 0
    2a80:	06 c0       	rjmp	.+12     	; 0x2a8e <vfprintf+0x328>
    2a82:	b2 14       	cp	r11, r2
    2a84:	80 f4       	brcc	.+32     	; 0x2aa6 <vfprintf+0x340>
    2a86:	28 0c       	add	r2, r8
    2a88:	92 2c       	mov	r9, r2
    2a8a:	9b 18       	sub	r9, r11
    2a8c:	0d c0       	rjmp	.+26     	; 0x2aa8 <vfprintf+0x342>
    2a8e:	b2 14       	cp	r11, r2
    2a90:	58 f4       	brcc	.+22     	; 0x2aa8 <vfprintf+0x342>
    2a92:	b6 01       	movw	r22, r12
    2a94:	80 e2       	ldi	r24, 0x20	; 32
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	73 d0       	rcall	.+230    	; 0x2b80 <fputc>
    2a9a:	b3 94       	inc	r11
    2a9c:	f8 cf       	rjmp	.-16     	; 0x2a8e <vfprintf+0x328>
    2a9e:	b2 14       	cp	r11, r2
    2aa0:	18 f4       	brcc	.+6      	; 0x2aa8 <vfprintf+0x342>
    2aa2:	2b 18       	sub	r2, r11
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <vfprintf+0x344>
    2aa6:	98 2c       	mov	r9, r8
    2aa8:	21 2c       	mov	r2, r1
    2aaa:	a4 fe       	sbrs	r10, 4
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <vfprintf+0x366>
    2aae:	b6 01       	movw	r22, r12
    2ab0:	80 e3       	ldi	r24, 0x30	; 48
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	65 d0       	rcall	.+202    	; 0x2b80 <fputc>
    2ab6:	a2 fe       	sbrs	r10, 2
    2ab8:	16 c0       	rjmp	.+44     	; 0x2ae6 <vfprintf+0x380>
    2aba:	a1 fc       	sbrc	r10, 1
    2abc:	03 c0       	rjmp	.+6      	; 0x2ac4 <vfprintf+0x35e>
    2abe:	88 e7       	ldi	r24, 0x78	; 120
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <vfprintf+0x362>
    2ac4:	88 e5       	ldi	r24, 0x58	; 88
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	b6 01       	movw	r22, r12
    2aca:	0c c0       	rjmp	.+24     	; 0x2ae4 <vfprintf+0x37e>
    2acc:	8a 2d       	mov	r24, r10
    2ace:	86 78       	andi	r24, 0x86	; 134
    2ad0:	51 f0       	breq	.+20     	; 0x2ae6 <vfprintf+0x380>
    2ad2:	a1 fe       	sbrs	r10, 1
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <vfprintf+0x374>
    2ad6:	8b e2       	ldi	r24, 0x2B	; 43
    2ad8:	01 c0       	rjmp	.+2      	; 0x2adc <vfprintf+0x376>
    2ada:	80 e2       	ldi	r24, 0x20	; 32
    2adc:	a7 fc       	sbrc	r10, 7
    2ade:	8d e2       	ldi	r24, 0x2D	; 45
    2ae0:	b6 01       	movw	r22, r12
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	4d d0       	rcall	.+154    	; 0x2b80 <fputc>
    2ae6:	89 14       	cp	r8, r9
    2ae8:	30 f4       	brcc	.+12     	; 0x2af6 <vfprintf+0x390>
    2aea:	b6 01       	movw	r22, r12
    2aec:	80 e3       	ldi	r24, 0x30	; 48
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	47 d0       	rcall	.+142    	; 0x2b80 <fputc>
    2af2:	9a 94       	dec	r9
    2af4:	f8 cf       	rjmp	.-16     	; 0x2ae6 <vfprintf+0x380>
    2af6:	8a 94       	dec	r8
    2af8:	f3 01       	movw	r30, r6
    2afa:	e8 0d       	add	r30, r8
    2afc:	f1 1d       	adc	r31, r1
    2afe:	80 81       	ld	r24, Z
    2b00:	b6 01       	movw	r22, r12
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	3d d0       	rcall	.+122    	; 0x2b80 <fputc>
    2b06:	81 10       	cpse	r8, r1
    2b08:	f6 cf       	rjmp	.-20     	; 0x2af6 <vfprintf+0x390>
    2b0a:	22 20       	and	r2, r2
    2b0c:	09 f4       	brne	.+2      	; 0x2b10 <vfprintf+0x3aa>
    2b0e:	4e ce       	rjmp	.-868    	; 0x27ac <vfprintf+0x46>
    2b10:	b6 01       	movw	r22, r12
    2b12:	80 e2       	ldi	r24, 0x20	; 32
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	34 d0       	rcall	.+104    	; 0x2b80 <fputc>
    2b18:	2a 94       	dec	r2
    2b1a:	f7 cf       	rjmp	.-18     	; 0x2b0a <vfprintf+0x3a4>
    2b1c:	f6 01       	movw	r30, r12
    2b1e:	86 81       	ldd	r24, Z+6	; 0x06
    2b20:	97 81       	ldd	r25, Z+7	; 0x07
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <vfprintf+0x3c2>
    2b24:	8f ef       	ldi	r24, 0xFF	; 255
    2b26:	9f ef       	ldi	r25, 0xFF	; 255
    2b28:	2b 96       	adiw	r28, 0x0b	; 11
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
    2b3e:	bf 90       	pop	r11
    2b40:	af 90       	pop	r10
    2b42:	9f 90       	pop	r9
    2b44:	8f 90       	pop	r8
    2b46:	7f 90       	pop	r7
    2b48:	6f 90       	pop	r6
    2b4a:	5f 90       	pop	r5
    2b4c:	4f 90       	pop	r4
    2b4e:	3f 90       	pop	r3
    2b50:	2f 90       	pop	r2
    2b52:	08 95       	ret

00002b54 <strnlen_P>:
    2b54:	fc 01       	movw	r30, r24
    2b56:	05 90       	lpm	r0, Z+
    2b58:	61 50       	subi	r22, 0x01	; 1
    2b5a:	70 40       	sbci	r23, 0x00	; 0
    2b5c:	01 10       	cpse	r0, r1
    2b5e:	d8 f7       	brcc	.-10     	; 0x2b56 <strnlen_P+0x2>
    2b60:	80 95       	com	r24
    2b62:	90 95       	com	r25
    2b64:	8e 0f       	add	r24, r30
    2b66:	9f 1f       	adc	r25, r31
    2b68:	08 95       	ret

00002b6a <strnlen>:
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	61 50       	subi	r22, 0x01	; 1
    2b6e:	70 40       	sbci	r23, 0x00	; 0
    2b70:	01 90       	ld	r0, Z+
    2b72:	01 10       	cpse	r0, r1
    2b74:	d8 f7       	brcc	.-10     	; 0x2b6c <strnlen+0x2>
    2b76:	80 95       	com	r24
    2b78:	90 95       	com	r25
    2b7a:	8e 0f       	add	r24, r30
    2b7c:	9f 1f       	adc	r25, r31
    2b7e:	08 95       	ret

00002b80 <fputc>:
    2b80:	0f 93       	push	r16
    2b82:	1f 93       	push	r17
    2b84:	cf 93       	push	r28
    2b86:	df 93       	push	r29
    2b88:	fb 01       	movw	r30, r22
    2b8a:	23 81       	ldd	r18, Z+3	; 0x03
    2b8c:	21 fd       	sbrc	r18, 1
    2b8e:	03 c0       	rjmp	.+6      	; 0x2b96 <fputc+0x16>
    2b90:	8f ef       	ldi	r24, 0xFF	; 255
    2b92:	9f ef       	ldi	r25, 0xFF	; 255
    2b94:	2c c0       	rjmp	.+88     	; 0x2bee <fputc+0x6e>
    2b96:	22 ff       	sbrs	r18, 2
    2b98:	16 c0       	rjmp	.+44     	; 0x2bc6 <fputc+0x46>
    2b9a:	46 81       	ldd	r20, Z+6	; 0x06
    2b9c:	57 81       	ldd	r21, Z+7	; 0x07
    2b9e:	24 81       	ldd	r18, Z+4	; 0x04
    2ba0:	35 81       	ldd	r19, Z+5	; 0x05
    2ba2:	42 17       	cp	r20, r18
    2ba4:	53 07       	cpc	r21, r19
    2ba6:	44 f4       	brge	.+16     	; 0x2bb8 <fputc+0x38>
    2ba8:	a0 81       	ld	r26, Z
    2baa:	b1 81       	ldd	r27, Z+1	; 0x01
    2bac:	9d 01       	movw	r18, r26
    2bae:	2f 5f       	subi	r18, 0xFF	; 255
    2bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb2:	20 83       	st	Z, r18
    2bb4:	31 83       	std	Z+1, r19	; 0x01
    2bb6:	8c 93       	st	X, r24
    2bb8:	26 81       	ldd	r18, Z+6	; 0x06
    2bba:	37 81       	ldd	r19, Z+7	; 0x07
    2bbc:	2f 5f       	subi	r18, 0xFF	; 255
    2bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc0:	26 83       	std	Z+6, r18	; 0x06
    2bc2:	37 83       	std	Z+7, r19	; 0x07
    2bc4:	14 c0       	rjmp	.+40     	; 0x2bee <fputc+0x6e>
    2bc6:	8b 01       	movw	r16, r22
    2bc8:	ec 01       	movw	r28, r24
    2bca:	fb 01       	movw	r30, r22
    2bcc:	00 84       	ldd	r0, Z+8	; 0x08
    2bce:	f1 85       	ldd	r31, Z+9	; 0x09
    2bd0:	e0 2d       	mov	r30, r0
    2bd2:	19 95       	eicall
    2bd4:	89 2b       	or	r24, r25
    2bd6:	e1 f6       	brne	.-72     	; 0x2b90 <fputc+0x10>
    2bd8:	d8 01       	movw	r26, r16
    2bda:	16 96       	adiw	r26, 0x06	; 6
    2bdc:	8d 91       	ld	r24, X+
    2bde:	9c 91       	ld	r25, X
    2be0:	17 97       	sbiw	r26, 0x07	; 7
    2be2:	01 96       	adiw	r24, 0x01	; 1
    2be4:	16 96       	adiw	r26, 0x06	; 6
    2be6:	8d 93       	st	X+, r24
    2be8:	9c 93       	st	X, r25
    2bea:	17 97       	sbiw	r26, 0x07	; 7
    2bec:	ce 01       	movw	r24, r28
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	1f 91       	pop	r17
    2bf4:	0f 91       	pop	r16
    2bf6:	08 95       	ret

00002bf8 <__ultoa_invert>:
    2bf8:	fa 01       	movw	r30, r20
    2bfa:	aa 27       	eor	r26, r26
    2bfc:	28 30       	cpi	r18, 0x08	; 8
    2bfe:	51 f1       	breq	.+84     	; 0x2c54 <__ultoa_invert+0x5c>
    2c00:	20 31       	cpi	r18, 0x10	; 16
    2c02:	81 f1       	breq	.+96     	; 0x2c64 <__ultoa_invert+0x6c>
    2c04:	e8 94       	clt
    2c06:	6f 93       	push	r22
    2c08:	6e 7f       	andi	r22, 0xFE	; 254
    2c0a:	6e 5f       	subi	r22, 0xFE	; 254
    2c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c10:	9f 4f       	sbci	r25, 0xFF	; 255
    2c12:	af 4f       	sbci	r26, 0xFF	; 255
    2c14:	b1 e0       	ldi	r27, 0x01	; 1
    2c16:	3e d0       	rcall	.+124    	; 0x2c94 <__ultoa_invert+0x9c>
    2c18:	b4 e0       	ldi	r27, 0x04	; 4
    2c1a:	3c d0       	rcall	.+120    	; 0x2c94 <__ultoa_invert+0x9c>
    2c1c:	67 0f       	add	r22, r23
    2c1e:	78 1f       	adc	r23, r24
    2c20:	89 1f       	adc	r24, r25
    2c22:	9a 1f       	adc	r25, r26
    2c24:	a1 1d       	adc	r26, r1
    2c26:	68 0f       	add	r22, r24
    2c28:	79 1f       	adc	r23, r25
    2c2a:	8a 1f       	adc	r24, r26
    2c2c:	91 1d       	adc	r25, r1
    2c2e:	a1 1d       	adc	r26, r1
    2c30:	6a 0f       	add	r22, r26
    2c32:	71 1d       	adc	r23, r1
    2c34:	81 1d       	adc	r24, r1
    2c36:	91 1d       	adc	r25, r1
    2c38:	a1 1d       	adc	r26, r1
    2c3a:	20 d0       	rcall	.+64     	; 0x2c7c <__ultoa_invert+0x84>
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <__ultoa_invert+0x48>
    2c3e:	68 94       	set
    2c40:	3f 91       	pop	r19
    2c42:	2a e0       	ldi	r18, 0x0A	; 10
    2c44:	26 9f       	mul	r18, r22
    2c46:	11 24       	eor	r1, r1
    2c48:	30 19       	sub	r19, r0
    2c4a:	30 5d       	subi	r19, 0xD0	; 208
    2c4c:	31 93       	st	Z+, r19
    2c4e:	de f6       	brtc	.-74     	; 0x2c06 <__ultoa_invert+0xe>
    2c50:	cf 01       	movw	r24, r30
    2c52:	08 95       	ret
    2c54:	46 2f       	mov	r20, r22
    2c56:	47 70       	andi	r20, 0x07	; 7
    2c58:	40 5d       	subi	r20, 0xD0	; 208
    2c5a:	41 93       	st	Z+, r20
    2c5c:	b3 e0       	ldi	r27, 0x03	; 3
    2c5e:	0f d0       	rcall	.+30     	; 0x2c7e <__ultoa_invert+0x86>
    2c60:	c9 f7       	brne	.-14     	; 0x2c54 <__ultoa_invert+0x5c>
    2c62:	f6 cf       	rjmp	.-20     	; 0x2c50 <__ultoa_invert+0x58>
    2c64:	46 2f       	mov	r20, r22
    2c66:	4f 70       	andi	r20, 0x0F	; 15
    2c68:	40 5d       	subi	r20, 0xD0	; 208
    2c6a:	4a 33       	cpi	r20, 0x3A	; 58
    2c6c:	18 f0       	brcs	.+6      	; 0x2c74 <__ultoa_invert+0x7c>
    2c6e:	49 5d       	subi	r20, 0xD9	; 217
    2c70:	31 fd       	sbrc	r19, 1
    2c72:	40 52       	subi	r20, 0x20	; 32
    2c74:	41 93       	st	Z+, r20
    2c76:	02 d0       	rcall	.+4      	; 0x2c7c <__ultoa_invert+0x84>
    2c78:	a9 f7       	brne	.-22     	; 0x2c64 <__ultoa_invert+0x6c>
    2c7a:	ea cf       	rjmp	.-44     	; 0x2c50 <__ultoa_invert+0x58>
    2c7c:	b4 e0       	ldi	r27, 0x04	; 4
    2c7e:	a6 95       	lsr	r26
    2c80:	97 95       	ror	r25
    2c82:	87 95       	ror	r24
    2c84:	77 95       	ror	r23
    2c86:	67 95       	ror	r22
    2c88:	ba 95       	dec	r27
    2c8a:	c9 f7       	brne	.-14     	; 0x2c7e <__ultoa_invert+0x86>
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	61 05       	cpc	r22, r1
    2c90:	71 05       	cpc	r23, r1
    2c92:	08 95       	ret
    2c94:	9b 01       	movw	r18, r22
    2c96:	ac 01       	movw	r20, r24
    2c98:	0a 2e       	mov	r0, r26
    2c9a:	06 94       	lsr	r0
    2c9c:	57 95       	ror	r21
    2c9e:	47 95       	ror	r20
    2ca0:	37 95       	ror	r19
    2ca2:	27 95       	ror	r18
    2ca4:	ba 95       	dec	r27
    2ca6:	c9 f7       	brne	.-14     	; 0x2c9a <__ultoa_invert+0xa2>
    2ca8:	62 0f       	add	r22, r18
    2caa:	73 1f       	adc	r23, r19
    2cac:	84 1f       	adc	r24, r20
    2cae:	95 1f       	adc	r25, r21
    2cb0:	a0 1d       	adc	r26, r0
    2cb2:	08 95       	ret

00002cb4 <_exit>:
    2cb4:	f8 94       	cli

00002cb6 <__stop_program>:
    2cb6:	ff cf       	rjmp	.-2      	; 0x2cb6 <__stop_program>
